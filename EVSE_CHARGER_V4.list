
EVSE_CHARGER_V4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002914  080107d8  080107d8  000207d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080130ec  080130ec  00030214  2**0
                  CONTENTS
  4 .ARM          00000000  080130ec  080130ec  00030214  2**0
                  CONTENTS
  5 .preinit_array 00000000  080130ec  080130ec  00030214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080130ec  080130ec  000230ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080130f0  080130f0  000230f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  080130f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  20000218  08013308  00030218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000818  08013308  00030818  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d47  00000000  00000000  0003023d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c4d  00000000  00000000  00048f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  0004cbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f0  00000000  00000000  0004e278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005c77  00000000  00000000  0004f768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c1b4  00000000  00000000  000553df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009830f  00000000  00000000  00071593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001098a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071c0  00000000  00000000  001098f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000218 	.word	0x20000218
 800012c:	00000000 	.word	0x00000000
 8000130:	080107c0 	.word	0x080107c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000021c 	.word	0x2000021c
 800014c:	080107c0 	.word	0x080107c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	0000      	movs	r0, r0
	...

080011a0 <inicia_sistema>:
#define counter_value 3

void (*tabela_estados[])(int) = {estado_a, estado_bb, estado_bv, estado_c1, estado_c2, estado_f, estado_erro};

//função que inicializa o sistema
void inicia_sistema() {
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b089      	sub	sp, #36	; 0x24
 80011a4:	af04      	add	r7, sp, #16
	estado_atual = ESTADO_A;
 80011a6:	4b56      	ldr	r3, [pc, #344]	; (8001300 <inicia_sistema+0x160>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
	estado_anterior = ESTADO_A;
 80011ac:	4b55      	ldr	r3, [pc, #340]	; (8001304 <inicia_sistema+0x164>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
	//configuração do display
	GC9A01_Initial();
 80011b2:	f003 feeb 	bl	8004f8c <GC9A01_Initial>

	// inicia as interrupções dos adcs
	HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	2012      	movs	r0, #18
 80011bc:	f007 ff83 	bl	80090c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80011c0:	2012      	movs	r0, #18
 80011c2:	f007 ff9c 	bl	80090fe <HAL_NVIC_EnableIRQ>

	// Configura o pwm do backlight em 100%
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80011c6:	210c      	movs	r1, #12
 80011c8:	484f      	ldr	r0, [pc, #316]	; (8001308 <inicia_sistema+0x168>)
 80011ca:	f00a fbcf 	bl	800b96c <HAL_TIM_PWM_Start>
	TIM1->CCR4 = (TIM1->ARR);
 80011ce:	4b4f      	ldr	r3, [pc, #316]	; (800130c <inicia_sistema+0x16c>)
 80011d0:	4a4e      	ldr	r2, [pc, #312]	; (800130c <inicia_sistema+0x16c>)
 80011d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40

	// Liga o led branco
	// PWM do led vermelho
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011d6:	2100      	movs	r1, #0
 80011d8:	484d      	ldr	r0, [pc, #308]	; (8001310 <inicia_sistema+0x170>)
 80011da:	f00a fbc7 	bl	800b96c <HAL_TIM_PWM_Start>
	TIM3->CCR1 = (TIM3->ARR)*0.6;
 80011de:	4b4d      	ldr	r3, [pc, #308]	; (8001314 <inicia_sistema+0x174>)
 80011e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f8fe 	bl	80003e4 <__aeabi_ui2d>
 80011e8:	a341      	add	r3, pc, #260	; (adr r3, 80012f0 <inicia_sistema+0x150>)
 80011ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ee:	f7ff f973 	bl	80004d8 <__aeabi_dmul>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4c47      	ldr	r4, [pc, #284]	; (8001314 <inicia_sistema+0x174>)
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f7ff fc44 	bl	8000a88 <__aeabi_d2uiz>
 8001200:	4603      	mov	r3, r0
 8001202:	6363      	str	r3, [r4, #52]	; 0x34
	// PWM do led verde
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001204:	210c      	movs	r1, #12
 8001206:	4844      	ldr	r0, [pc, #272]	; (8001318 <inicia_sistema+0x178>)
 8001208:	f00a fbb0 	bl	800b96c <HAL_TIM_PWM_Start>
	TIM2->CCR4 = (TIM2->ARR)*0.7;
 800120c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f8e6 	bl	80003e4 <__aeabi_ui2d>
 8001218:	a337      	add	r3, pc, #220	; (adr r3, 80012f8 <inicia_sistema+0x158>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7ff f95b 	bl	80004d8 <__aeabi_dmul>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fc2b 	bl	8000a88 <__aeabi_d2uiz>
 8001232:	4603      	mov	r3, r0
 8001234:	6423      	str	r3, [r4, #64]	; 0x40
	// PWM do led azul
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001236:	2108      	movs	r1, #8
 8001238:	4837      	ldr	r0, [pc, #220]	; (8001318 <inicia_sistema+0x178>)
 800123a:	f00a fb97 	bl	800b96c <HAL_TIM_PWM_Start>
	TIM2->CCR3 = (TIM2->ARR)*1;
 800123e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001242:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001248:	63d3      	str	r3, [r2, #60]	; 0x3c


	// Habilita o PWM do CP (inicia com o Duty Cycle em 100%)
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800124a:	2100      	movs	r1, #0
 800124c:	4832      	ldr	r0, [pc, #200]	; (8001318 <inicia_sistema+0x178>)
 800124e:	f00a fb8d 	bl	800b96c <HAL_TIM_PWM_Start>
	TIM2->CCR1 = TIM2->ARR;
 8001252:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001256:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125c:	6353      	str	r3, [r2, #52]	; 0x34

	//power_data_sample();
	//power_calc();

	ClearScreen2(BLACK);
 800125e:	2000      	movs	r0, #0
 8001260:	f004 f8e6 	bl	8005430 <ClearScreen2>
	WriteString(40, 107,"EVPV POWER", Font_16x26, WHITE, BLACK);
 8001264:	4b2d      	ldr	r3, [pc, #180]	; (800131c <inicia_sistema+0x17c>)
 8001266:	2200      	movs	r2, #0
 8001268:	9202      	str	r2, [sp, #8]
 800126a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800126e:	9201      	str	r2, [sp, #4]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	9200      	str	r2, [sp, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a2a      	ldr	r2, [pc, #168]	; (8001320 <inicia_sistema+0x180>)
 8001278:	216b      	movs	r1, #107	; 0x6b
 800127a:	2028      	movs	r0, #40	; 0x28
 800127c:	f003 fda2 	bl	8004dc4 <WriteString>
	char textBuffer[16];

	sprintf(textBuffer, "Version: %1d.%1d.%1d",EVSE_FW_VERSION_MAJOR,EVSE_FW_VERSION_MINOR,EVSE_FW_VERSION_PATCH  );
 8001280:	4638      	mov	r0, r7
 8001282:	2301      	movs	r3, #1
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2300      	movs	r3, #0
 8001288:	2204      	movs	r2, #4
 800128a:	4926      	ldr	r1, [pc, #152]	; (8001324 <inicia_sistema+0x184>)
 800128c:	f00c fd5e 	bl	800dd4c <siprintf>
	WriteString(120-strlen(textBuffer)*11/2, 160, textBuffer, Font_11x18, WHITE, BLACK);
 8001290:	463b      	mov	r3, r7
 8001292:	4618      	mov	r0, r3
 8001294:	f7fe ff5c 	bl	8000150 <strlen>
 8001298:	4602      	mov	r2, r0
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	085b      	lsrs	r3, r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80012ac:	b298      	uxth	r0, r3
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <inicia_sistema+0x188>)
 80012b0:	4639      	mov	r1, r7
 80012b2:	2200      	movs	r2, #0
 80012b4:	9202      	str	r2, [sp, #8]
 80012b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ba:	9201      	str	r2, [sp, #4]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	9200      	str	r2, [sp, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	460a      	mov	r2, r1
 80012c4:	21a0      	movs	r1, #160	; 0xa0
 80012c6:	f003 fd7d 	bl	8004dc4 <WriteString>
	detecta_plug();
	tela_state = 1;
	HAL_Delay(3000);
#endif
#ifdef VersaoPublica
	HAL_Delay(1000);
 80012ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ce:	f007 f8cd 	bl	800846c <HAL_Delay>
#endif
	detecta_orderm_fases();
 80012d2:	f003 fbd1 	bl	8004a78 <detecta_orderm_fases>
	detecta_mono_tri();
 80012d6:	f003 fab7 	bl	8004848 <detecta_mono_tri>
	reconhecimento_terra_neutro();
 80012da:	f003 fa95 	bl	8004808 <reconhecimento_terra_neutro>
	ClearScreen2(BLACK);
 80012de:	2000      	movs	r0, #0
 80012e0:	f004 f8a6 	bl	8005430 <ClearScreen2>
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	f3af 8000 	nop.w
 80012f0:	33333333 	.word	0x33333333
 80012f4:	3fe33333 	.word	0x3fe33333
 80012f8:	66666666 	.word	0x66666666
 80012fc:	3fe66666 	.word	0x3fe66666
 8001300:	200007d9 	.word	0x200007d9
 8001304:	200007d8 	.word	0x200007d8
 8001308:	20000420 	.word	0x20000420
 800130c:	40012c00 	.word	0x40012c00
 8001310:	200004b0 	.word	0x200004b0
 8001314:	40000400 	.word	0x40000400
 8001318:	20000468 	.word	0x20000468
 800131c:	20000024 	.word	0x20000024
 8001320:	080107d8 	.word	0x080107d8
 8001324:	080107e4 	.word	0x080107e4
 8001328:	2000001c 	.word	0x2000001c
 800132c:	00000000 	.word	0x00000000

08001330 <estado_a>:

void estado_a(int corrente) {
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	//sprintf(buffer, "---------------------------------\r\n");
	//HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
	//HAL_UART_Transmit(&huart1, str_estado_A, strlen((char*) str_estado_A), HAL_MAX_DELAY);

	//--------------------------------INICIO ALTERAÇÕES ESTADO A --------------------------------
	TIM2->CCR1 = TIM2->ARR;
 8001338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800133c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001342:	6353      	str	r3, [r2, #52]	; 0x34
	corrente_selecionada = corrente;
 8001344:	4a78      	ldr	r2, [pc, #480]	; (8001528 <estado_a+0x1f8>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
	power = 0;
 800134a:	4b78      	ldr	r3, [pc, #480]	; (800152c <estado_a+0x1fc>)
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
#ifdef VersaoPublica
	Energy = 0;
 8001352:	4b77      	ldr	r3, [pc, #476]	; (8001530 <estado_a+0x200>)
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
#endif
	Irms = 0;
 800135a:	4b76      	ldr	r3, [pc, #472]	; (8001534 <estado_a+0x204>)
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
	hold_state_erro_ativarele = 0;
 8001362:	4b75      	ldr	r3, [pc, #468]	; (8001538 <estado_a+0x208>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
	hold_state_erro_detectar_ordem_fases = 0;
 8001368:	4b74      	ldr	r3, [pc, #464]	; (800153c <estado_a+0x20c>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
	Flag_IDR_AC = 0;
 800136e:	4b74      	ldr	r3, [pc, #464]	; (8001540 <estado_a+0x210>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
	Flag_IDR_DC = 0;
 8001374:	4b73      	ldr	r3, [pc, #460]	; (8001544 <estado_a+0x214>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]

	// Liga o led branco
	// PWM do led vermelho
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800137a:	2100      	movs	r1, #0
 800137c:	4872      	ldr	r0, [pc, #456]	; (8001548 <estado_a+0x218>)
 800137e:	f00a faf5 	bl	800b96c <HAL_TIM_PWM_Start>
	TIM3->CCR1 = (TIM3->ARR)*0.6;
 8001382:	4b72      	ldr	r3, [pc, #456]	; (800154c <estado_a+0x21c>)
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f82c 	bl	80003e4 <__aeabi_ui2d>
 800138c:	a362      	add	r3, pc, #392	; (adr r3, 8001518 <estado_a+0x1e8>)
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	f7ff f8a1 	bl	80004d8 <__aeabi_dmul>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4c6c      	ldr	r4, [pc, #432]	; (800154c <estado_a+0x21c>)
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fb72 	bl	8000a88 <__aeabi_d2uiz>
 80013a4:	4603      	mov	r3, r0
 80013a6:	6363      	str	r3, [r4, #52]	; 0x34
	// PWM do led verde
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80013a8:	210c      	movs	r1, #12
 80013aa:	4869      	ldr	r0, [pc, #420]	; (8001550 <estado_a+0x220>)
 80013ac:	f00a fade 	bl	800b96c <HAL_TIM_PWM_Start>
	TIM2->CCR4 = (TIM2->ARR)*0.7;
 80013b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f814 	bl	80003e4 <__aeabi_ui2d>
 80013bc:	a358      	add	r3, pc, #352	; (adr r3, 8001520 <estado_a+0x1f0>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	f7ff f889 	bl	80004d8 <__aeabi_dmul>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff fb59 	bl	8000a88 <__aeabi_d2uiz>
 80013d6:	4603      	mov	r3, r0
 80013d8:	6423      	str	r3, [r4, #64]	; 0x40
	// PWM do led azul
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80013da:	2108      	movs	r1, #8
 80013dc:	485c      	ldr	r0, [pc, #368]	; (8001550 <estado_a+0x220>)
 80013de:	f00a fac5 	bl	800b96c <HAL_TIM_PWM_Start>
	TIM2->CCR3 = (TIM2->ARR)*1;
 80013e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	63d3      	str	r3, [r2, #60]	; 0x3c

	Flag_IDR_tipo_B = 0;
 80013ee:	4b59      	ldr	r3, [pc, #356]	; (8001554 <estado_a+0x224>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
	atualiza_tensao_fase_neutro();
 80013f4:	f001 fcc6 	bl	8002d84 <atualiza_tensao_fase_neutro>
	atualiza_offset_corrente();
 80013f8:	f000 feb6 	bl	8002168 <atualiza_offset_corrente>
	atualiza_tensao_fase_terra();
 80013fc:	f001 f908 	bl	8002610 <atualiza_tensao_fase_terra>
	atualiza_temperatura();
 8001400:	f003 f8ae 	bl	8004560 <atualiza_temperatura>
	//detecta_fase();
	//detecta_neutro();


	//--------------------------- ALTERAÇÕES APENAS NA MUDANÇA DE ESTADO ------------------------
	if(estado_atual != estado_anterior)
 8001404:	4b54      	ldr	r3, [pc, #336]	; (8001558 <estado_a+0x228>)
 8001406:	781a      	ldrb	r2, [r3, #0]
 8001408:	4b54      	ldr	r3, [pc, #336]	; (800155c <estado_a+0x22c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	d001      	beq.n	8001414 <estado_a+0xe4>
	{
		desativarele();
 8001410:	f002 ff2e 	bl	8004270 <desativarele>
		Flag_tela = 1;
		tela_state = 0;
		timer_tela = 0;
#endif
	}
	estado_anterior = estado_atual;
 8001414:	4b50      	ldr	r3, [pc, #320]	; (8001558 <estado_a+0x228>)
 8001416:	781a      	ldrb	r2, [r3, #0]
 8001418:	4b50      	ldr	r3, [pc, #320]	; (800155c <estado_a+0x22c>)
 800141a:	701a      	strb	r2, [r3, #0]
	//--------------------------------FINAL ALTERAÇÕES ESTADO A ---------------------------------

	//leitura do adc no pino A3 pilot_read
	medida_CP_atual = read_pilot();
 800141c:	f000 fd72 	bl	8001f04 <read_pilot>
 8001420:	4603      	mov	r3, r0
 8001422:	461a      	mov	r2, r3
 8001424:	4b4e      	ldr	r3, [pc, #312]	; (8001560 <estado_a+0x230>)
 8001426:	801a      	strh	r2, [r3, #0]
	//HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
	//sprintf(buffer, "\r\n\n\n");
	//HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);

	//condição para mudança de estado
	if ((medida_CP_atual > (ideal_PR_9_IN - DELTA_VOLT) && medida_CP_atual < (ideal_PR_9_IN + DELTA_VOLT)) || ((medida_CP_atual > (ideal_PR_6_IN - DELTA_VOLT)&& medida_CP_atual < (ideal_PR_6_IN + DELTA_VOLT))))
 8001428:	4b4d      	ldr	r3, [pc, #308]	; (8001560 <estado_a+0x230>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001430:	d905      	bls.n	800143e <estado_a+0x10e>
 8001432:	4b4b      	ldr	r3, [pc, #300]	; (8001560 <estado_a+0x230>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	f242 720f 	movw	r2, #9999	; 0x270f
 800143a:	4293      	cmp	r3, r2
 800143c:	d90b      	bls.n	8001456 <estado_a+0x126>
 800143e:	4b48      	ldr	r3, [pc, #288]	; (8001560 <estado_a+0x230>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	f241 3288 	movw	r2, #5000	; 0x1388
 8001446:	4293      	cmp	r3, r2
 8001448:	d925      	bls.n	8001496 <estado_a+0x166>
 800144a:	4b45      	ldr	r3, [pc, #276]	; (8001560 <estado_a+0x230>)
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	f641 3257 	movw	r2, #6999	; 0x1b57
 8001452:	4293      	cmp	r3, r2
 8001454:	d81f      	bhi.n	8001496 <estado_a+0x166>
	{
		counter_estados[0] = 0;	//A
 8001456:	4b43      	ldr	r3, [pc, #268]	; (8001564 <estado_a+0x234>)
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
		counter_estados[1]++;	//BB
 800145c:	4b41      	ldr	r3, [pc, #260]	; (8001564 <estado_a+0x234>)
 800145e:	785b      	ldrb	r3, [r3, #1]
 8001460:	3301      	adds	r3, #1
 8001462:	b2da      	uxtb	r2, r3
 8001464:	4b3f      	ldr	r3, [pc, #252]	; (8001564 <estado_a+0x234>)
 8001466:	705a      	strb	r2, [r3, #1]
		counter_estados[2] = 0;	//BV
 8001468:	4b3e      	ldr	r3, [pc, #248]	; (8001564 <estado_a+0x234>)
 800146a:	2200      	movs	r2, #0
 800146c:	709a      	strb	r2, [r3, #2]
		counter_estados[3] = 0;	//C1
 800146e:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <estado_a+0x234>)
 8001470:	2200      	movs	r2, #0
 8001472:	70da      	strb	r2, [r3, #3]
		counter_estados[4] = 0;	//C2
 8001474:	4b3b      	ldr	r3, [pc, #236]	; (8001564 <estado_a+0x234>)
 8001476:	2200      	movs	r2, #0
 8001478:	711a      	strb	r2, [r3, #4]
		counter_estados[5] = 0;	//ERRO
 800147a:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <estado_a+0x234>)
 800147c:	2200      	movs	r2, #0
 800147e:	715a      	strb	r2, [r3, #5]
		if(counter_estados[1] > counter_value){
 8001480:	4b38      	ldr	r3, [pc, #224]	; (8001564 <estado_a+0x234>)
 8001482:	785b      	ldrb	r3, [r3, #1]
 8001484:	2b03      	cmp	r3, #3
 8001486:	d941      	bls.n	800150c <estado_a+0x1dc>
			estado_atual = ESTADO_BB;
 8001488:	4b33      	ldr	r3, [pc, #204]	; (8001558 <estado_a+0x228>)
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
			counter_estados[1] = 0;
 800148e:	4b35      	ldr	r3, [pc, #212]	; (8001564 <estado_a+0x234>)
 8001490:	2200      	movs	r2, #0
 8001492:	705a      	strb	r2, [r3, #1]
		if(counter_estados[1] > counter_value){
 8001494:	e03a      	b.n	800150c <estado_a+0x1dc>
		}
	}
	else
	{
		if (!(medida_CP_atual > (ideal_PR_12_IN - DELTA_VOLT) && medida_CP_atual < (ideal_PR_12_IN + DELTA_VOLT)))
 8001496:	4b32      	ldr	r3, [pc, #200]	; (8001560 <estado_a+0x230>)
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800149e:	4293      	cmp	r3, r2
 80014a0:	d905      	bls.n	80014ae <estado_a+0x17e>
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <estado_a+0x230>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	f243 22c7 	movw	r2, #12999	; 0x32c7
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d91f      	bls.n	80014ee <estado_a+0x1be>
		{
			counter_estados[0] = 0;
 80014ae:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <estado_a+0x234>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
			counter_estados[1] = 0;
 80014b4:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <estado_a+0x234>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	705a      	strb	r2, [r3, #1]
			counter_estados[2] = 0;
 80014ba:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <estado_a+0x234>)
 80014bc:	2200      	movs	r2, #0
 80014be:	709a      	strb	r2, [r3, #2]
			counter_estados[3] = 0;
 80014c0:	4b28      	ldr	r3, [pc, #160]	; (8001564 <estado_a+0x234>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	70da      	strb	r2, [r3, #3]
			counter_estados[4] = 0;
 80014c6:	4b27      	ldr	r3, [pc, #156]	; (8001564 <estado_a+0x234>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	711a      	strb	r2, [r3, #4]
			counter_estados[5]++;
 80014cc:	4b25      	ldr	r3, [pc, #148]	; (8001564 <estado_a+0x234>)
 80014ce:	795b      	ldrb	r3, [r3, #5]
 80014d0:	3301      	adds	r3, #1
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b23      	ldr	r3, [pc, #140]	; (8001564 <estado_a+0x234>)
 80014d6:	715a      	strb	r2, [r3, #5]
			if(counter_estados[5] > counter_value){
 80014d8:	4b22      	ldr	r3, [pc, #136]	; (8001564 <estado_a+0x234>)
 80014da:	795b      	ldrb	r3, [r3, #5]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d915      	bls.n	800150c <estado_a+0x1dc>
				estado_atual = ESTADO_ERRO;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <estado_a+0x228>)
 80014e2:	2206      	movs	r2, #6
 80014e4:	701a      	strb	r2, [r3, #0]
				counter_estados[5] = 0;
 80014e6:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <estado_a+0x234>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	715a      	strb	r2, [r3, #5]
			if(counter_estados[5] > counter_value){
 80014ec:	e00e      	b.n	800150c <estado_a+0x1dc>
			}
		}
		else
		{
			for(int i=0; i<6; i++){
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	e007      	b.n	8001504 <estado_a+0x1d4>
				counter_estados[i] = 0;
 80014f4:	4a1b      	ldr	r2, [pc, #108]	; (8001564 <estado_a+0x234>)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4413      	add	r3, r2
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<6; i++){
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3301      	adds	r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b05      	cmp	r3, #5
 8001508:	ddf4      	ble.n	80014f4 <estado_a+0x1c4>
			}
		}
	}
}
 800150a:	bf00      	nop
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	bd90      	pop	{r4, r7, pc}
 8001514:	f3af 8000 	nop.w
 8001518:	33333333 	.word	0x33333333
 800151c:	3fe33333 	.word	0x3fe33333
 8001520:	66666666 	.word	0x66666666
 8001524:	3fe66666 	.word	0x3fe66666
 8001528:	20000258 	.word	0x20000258
 800152c:	200005a0 	.word	0x200005a0
 8001530:	200005a4 	.word	0x200005a4
 8001534:	20000268 	.word	0x20000268
 8001538:	20000276 	.word	0x20000276
 800153c:	20000278 	.word	0x20000278
 8001540:	20000236 	.word	0x20000236
 8001544:	20000237 	.word	0x20000237
 8001548:	200004b0 	.word	0x200004b0
 800154c:	40000400 	.word	0x40000400
 8001550:	20000468 	.word	0x20000468
 8001554:	20000235 	.word	0x20000235
 8001558:	200007d9 	.word	0x200007d9
 800155c:	200007d8 	.word	0x200007d8
 8001560:	200005d2 	.word	0x200005d2
 8001564:	20000280 	.word	0x20000280

08001568 <estado_bb>:

void estado_bb(int corrente) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	//sprintf(buffer, "---------------------------------\r\n");
	//HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
	//HAL_UART_Transmit(&huart1, str_estado_BB, strlen((char*) str_estado_BB),HAL_MAX_DELAY);

	//--------------------------------INICIO ALTERAÇÕES ESTADO BB --------------------------------
	TIM2->CCR1 = (corrente*TIM2->ARR/60);
 8001570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	fb02 f303 	mul.w	r3, r2, r3
 800157c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001580:	495c      	ldr	r1, [pc, #368]	; (80016f4 <estado_bb+0x18c>)
 8001582:	fba1 1303 	umull	r1, r3, r1, r3
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	6353      	str	r3, [r2, #52]	; 0x34
	corrente_selecionada = corrente;
 800158a:	4a5b      	ldr	r2, [pc, #364]	; (80016f8 <estado_bb+0x190>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6013      	str	r3, [r2, #0]
	power = 0;
 8001590:	4b5a      	ldr	r3, [pc, #360]	; (80016fc <estado_bb+0x194>)
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
	Irms = 0;
 8001598:	4b59      	ldr	r3, [pc, #356]	; (8001700 <estado_bb+0x198>)
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	601a      	str	r2, [r3, #0]

	atualiza_tensao_fase_neutro();
 80015a0:	f001 fbf0 	bl	8002d84 <atualiza_tensao_fase_neutro>
	//detecta_rele_colado();

	//--------------------------- ALTERAÇÕES APENAS NA MUDANÇA DE ESTADO ------------------------
	if(estado_atual != estado_anterior)
 80015a4:	4b57      	ldr	r3, [pc, #348]	; (8001704 <estado_bb+0x19c>)
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	4b57      	ldr	r3, [pc, #348]	; (8001708 <estado_bb+0x1a0>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <estado_bb+0x4c>
	{
		desativarele();
 80015b0:	f002 fe5e 	bl	8004270 <desativarele>
		Flag_tela = 1;
		tela_state = 0;
		timer_tela = 0;
#endif
	}
	estado_anterior = estado_atual;
 80015b4:	4b53      	ldr	r3, [pc, #332]	; (8001704 <estado_bb+0x19c>)
 80015b6:	781a      	ldrb	r2, [r3, #0]
 80015b8:	4b53      	ldr	r3, [pc, #332]	; (8001708 <estado_bb+0x1a0>)
 80015ba:	701a      	strb	r2, [r3, #0]
	//--------------------------------FINAL ALTERAÇÕES ESTADO BB ---------------------------------

	//leitura do adc no pino A3 pilot_read
	medida_CP_atual = read_pilot();
 80015bc:	f000 fca2 	bl	8001f04 <read_pilot>
 80015c0:	4603      	mov	r3, r0
 80015c2:	461a      	mov	r2, r3
 80015c4:	4b51      	ldr	r3, [pc, #324]	; (800170c <estado_bb+0x1a4>)
 80015c6:	801a      	strh	r2, [r3, #0]
	//HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
	//sprintf(buffer, "\r\n\n\n");
	//HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);

	//condição para mudança de estado
	if (medida_CP_atual > (ideal_PR_12_IN - DELTA_VOLT) && medida_CP_atual < (ideal_PR_12_IN + DELTA_VOLT))
 80015c8:	4b50      	ldr	r3, [pc, #320]	; (800170c <estado_bb+0x1a4>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d925      	bls.n	8001620 <estado_bb+0xb8>
 80015d4:	4b4d      	ldr	r3, [pc, #308]	; (800170c <estado_bb+0x1a4>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	f243 22c7 	movw	r2, #12999	; 0x32c7
 80015dc:	4293      	cmp	r3, r2
 80015de:	d81f      	bhi.n	8001620 <estado_bb+0xb8>
	{
		counter_estados[1] = 0;
 80015e0:	4b4b      	ldr	r3, [pc, #300]	; (8001710 <estado_bb+0x1a8>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	705a      	strb	r2, [r3, #1]
		counter_estados[2] = 0;
 80015e6:	4b4a      	ldr	r3, [pc, #296]	; (8001710 <estado_bb+0x1a8>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	709a      	strb	r2, [r3, #2]
		counter_estados[3] = 0;
 80015ec:	4b48      	ldr	r3, [pc, #288]	; (8001710 <estado_bb+0x1a8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	70da      	strb	r2, [r3, #3]
		counter_estados[4] = 0;
 80015f2:	4b47      	ldr	r3, [pc, #284]	; (8001710 <estado_bb+0x1a8>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	711a      	strb	r2, [r3, #4]
		counter_estados[5] = 0;
 80015f8:	4b45      	ldr	r3, [pc, #276]	; (8001710 <estado_bb+0x1a8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	715a      	strb	r2, [r3, #5]
		counter_estados[0]++;
 80015fe:	4b44      	ldr	r3, [pc, #272]	; (8001710 <estado_bb+0x1a8>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4b42      	ldr	r3, [pc, #264]	; (8001710 <estado_bb+0x1a8>)
 8001608:	701a      	strb	r2, [r3, #0]
		if(counter_estados[0] > counter_value){
 800160a:	4b41      	ldr	r3, [pc, #260]	; (8001710 <estado_bb+0x1a8>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b03      	cmp	r3, #3
 8001610:	d96c      	bls.n	80016ec <estado_bb+0x184>
			estado_atual = ESTADO_A;
 8001612:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <estado_bb+0x19c>)
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
			counter_estados[0] = 0;
 8001618:	4b3d      	ldr	r3, [pc, #244]	; (8001710 <estado_bb+0x1a8>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
		if(counter_estados[0] > counter_value){
 800161e:	e065      	b.n	80016ec <estado_bb+0x184>
		}
	}
	else if (medida_CP_atual > (ideal_PR_6_IN - DELTA_VOLT) && medida_CP_atual < (ideal_PR_6_IN + DELTA_VOLT))
 8001620:	4b3a      	ldr	r3, [pc, #232]	; (800170c <estado_bb+0x1a4>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	f241 3288 	movw	r2, #5000	; 0x1388
 8001628:	4293      	cmp	r3, r2
 800162a:	d925      	bls.n	8001678 <estado_bb+0x110>
 800162c:	4b37      	ldr	r3, [pc, #220]	; (800170c <estado_bb+0x1a4>)
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	f641 3257 	movw	r2, #6999	; 0x1b57
 8001634:	4293      	cmp	r3, r2
 8001636:	d81f      	bhi.n	8001678 <estado_bb+0x110>
	{
		counter_estados[0] = 0;
 8001638:	4b35      	ldr	r3, [pc, #212]	; (8001710 <estado_bb+0x1a8>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
		counter_estados[1] = 0;
 800163e:	4b34      	ldr	r3, [pc, #208]	; (8001710 <estado_bb+0x1a8>)
 8001640:	2200      	movs	r2, #0
 8001642:	705a      	strb	r2, [r3, #1]
		counter_estados[2] = 0;
 8001644:	4b32      	ldr	r3, [pc, #200]	; (8001710 <estado_bb+0x1a8>)
 8001646:	2200      	movs	r2, #0
 8001648:	709a      	strb	r2, [r3, #2]
		counter_estados[3]++;
 800164a:	4b31      	ldr	r3, [pc, #196]	; (8001710 <estado_bb+0x1a8>)
 800164c:	78db      	ldrb	r3, [r3, #3]
 800164e:	3301      	adds	r3, #1
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4b2f      	ldr	r3, [pc, #188]	; (8001710 <estado_bb+0x1a8>)
 8001654:	70da      	strb	r2, [r3, #3]
		counter_estados[4] = 0;
 8001656:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <estado_bb+0x1a8>)
 8001658:	2200      	movs	r2, #0
 800165a:	711a      	strb	r2, [r3, #4]
		counter_estados[5] = 0;
 800165c:	4b2c      	ldr	r3, [pc, #176]	; (8001710 <estado_bb+0x1a8>)
 800165e:	2200      	movs	r2, #0
 8001660:	715a      	strb	r2, [r3, #5]
		if(counter_estados[3] > counter_value){
 8001662:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <estado_bb+0x1a8>)
 8001664:	78db      	ldrb	r3, [r3, #3]
 8001666:	2b03      	cmp	r3, #3
 8001668:	d940      	bls.n	80016ec <estado_bb+0x184>
			estado_atual = ESTADO_C1;
 800166a:	4b26      	ldr	r3, [pc, #152]	; (8001704 <estado_bb+0x19c>)
 800166c:	2203      	movs	r2, #3
 800166e:	701a      	strb	r2, [r3, #0]
			counter_estados[3] = 0;
 8001670:	4b27      	ldr	r3, [pc, #156]	; (8001710 <estado_bb+0x1a8>)
 8001672:	2200      	movs	r2, #0
 8001674:	70da      	strb	r2, [r3, #3]
		if(counter_estados[3] > counter_value){
 8001676:	e039      	b.n	80016ec <estado_bb+0x184>
		}
	}
	else
	{
		if (!(medida_CP_atual > (ideal_PR_9_IN - DELTA_VOLT) && medida_CP_atual < (ideal_PR_9_IN + DELTA_VOLT)))
 8001678:	4b24      	ldr	r3, [pc, #144]	; (800170c <estado_bb+0x1a4>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001680:	d905      	bls.n	800168e <estado_bb+0x126>
 8001682:	4b22      	ldr	r3, [pc, #136]	; (800170c <estado_bb+0x1a4>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	f242 720f 	movw	r2, #9999	; 0x270f
 800168a:	4293      	cmp	r3, r2
 800168c:	d91f      	bls.n	80016ce <estado_bb+0x166>
		{
			counter_estados[0] = 0;
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <estado_bb+0x1a8>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
			counter_estados[1] = 0;
 8001694:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <estado_bb+0x1a8>)
 8001696:	2200      	movs	r2, #0
 8001698:	705a      	strb	r2, [r3, #1]
			counter_estados[2] = 0;
 800169a:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <estado_bb+0x1a8>)
 800169c:	2200      	movs	r2, #0
 800169e:	709a      	strb	r2, [r3, #2]
			counter_estados[3] = 0;
 80016a0:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <estado_bb+0x1a8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	70da      	strb	r2, [r3, #3]
			counter_estados[4] = 0;
 80016a6:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <estado_bb+0x1a8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	711a      	strb	r2, [r3, #4]
			counter_estados[5]++;
 80016ac:	4b18      	ldr	r3, [pc, #96]	; (8001710 <estado_bb+0x1a8>)
 80016ae:	795b      	ldrb	r3, [r3, #5]
 80016b0:	3301      	adds	r3, #1
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	4b16      	ldr	r3, [pc, #88]	; (8001710 <estado_bb+0x1a8>)
 80016b6:	715a      	strb	r2, [r3, #5]
			if(counter_estados[5] > counter_value){
 80016b8:	4b15      	ldr	r3, [pc, #84]	; (8001710 <estado_bb+0x1a8>)
 80016ba:	795b      	ldrb	r3, [r3, #5]
 80016bc:	2b03      	cmp	r3, #3
 80016be:	d915      	bls.n	80016ec <estado_bb+0x184>
				estado_atual = ESTADO_ERRO;
 80016c0:	4b10      	ldr	r3, [pc, #64]	; (8001704 <estado_bb+0x19c>)
 80016c2:	2206      	movs	r2, #6
 80016c4:	701a      	strb	r2, [r3, #0]
				counter_estados[5] = 0;
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <estado_bb+0x1a8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	715a      	strb	r2, [r3, #5]
			if(counter_estados[5] > counter_value){
 80016cc:	e00e      	b.n	80016ec <estado_bb+0x184>
			}
		}
		else
		{
			for(int i=0; i<6; i++){
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	e007      	b.n	80016e4 <estado_bb+0x17c>
				counter_estados[i] = 0;
 80016d4:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <estado_bb+0x1a8>)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4413      	add	r3, r2
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<6; i++){
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3301      	adds	r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b05      	cmp	r3, #5
 80016e8:	ddf4      	ble.n	80016d4 <estado_bb+0x16c>
			}
		}
	}
}
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	88888889 	.word	0x88888889
 80016f8:	20000258 	.word	0x20000258
 80016fc:	200005a0 	.word	0x200005a0
 8001700:	20000268 	.word	0x20000268
 8001704:	200007d9 	.word	0x200007d9
 8001708:	200007d8 	.word	0x200007d8
 800170c:	200005d2 	.word	0x200005d2
 8001710:	20000280 	.word	0x20000280

08001714 <estado_bv>:

void estado_bv(int corrente) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	//sprintf(buffer, "---------------------------------\r\n");
	//HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
	//HAL_UART_Transmit(&huart1, str_estado_BV, strlen((char*) str_estado_BV), HAL_MAX_DELAY);

	//--------------------------------INICIO ALTERAÇÕES ESTADO BV --------------------------------
	TIM2->CCR1 = (corrente*TIM2->ARR/60);
 800171c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	fb02 f303 	mul.w	r3, r2, r3
 8001728:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800172c:	497f      	ldr	r1, [pc, #508]	; (800192c <estado_bv+0x218>)
 800172e:	fba1 1303 	umull	r1, r3, r1, r3
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	6353      	str	r3, [r2, #52]	; 0x34
	corrente_selecionada = corrente;
 8001736:	4a7e      	ldr	r2, [pc, #504]	; (8001930 <estado_bv+0x21c>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6013      	str	r3, [r2, #0]
	power = 0;
 800173c:	4b7d      	ldr	r3, [pc, #500]	; (8001934 <estado_bv+0x220>)
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
	Irms = 0;
 8001744:	4b7c      	ldr	r3, [pc, #496]	; (8001938 <estado_bv+0x224>)
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

	// Liga o led verde
	// PWM do led azul
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800174c:	2108      	movs	r1, #8
 800174e:	487b      	ldr	r0, [pc, #492]	; (800193c <estado_bv+0x228>)
 8001750:	f00a f90c 	bl	800b96c <HAL_TIM_PWM_Start>
	TIM2->CCR3 = 0;
 8001754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001758:	2200      	movs	r2, #0
 800175a:	63da      	str	r2, [r3, #60]	; 0x3c
	// PWM do led verde
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800175c:	210c      	movs	r1, #12
 800175e:	4877      	ldr	r0, [pc, #476]	; (800193c <estado_bv+0x228>)
 8001760:	f00a f904 	bl	800b96c <HAL_TIM_PWM_Start>
	TIM2->CCR4 = (TIM2->ARR);
 8001764:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001768:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	6413      	str	r3, [r2, #64]	; 0x40
	// PWM do led vermelho
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001770:	2100      	movs	r1, #0
 8001772:	4873      	ldr	r0, [pc, #460]	; (8001940 <estado_bv+0x22c>)
 8001774:	f00a f8fa 	bl	800b96c <HAL_TIM_PWM_Start>
	TIM3->CCR1 = 0;
 8001778:	4b72      	ldr	r3, [pc, #456]	; (8001944 <estado_bv+0x230>)
 800177a:	2200      	movs	r2, #0
 800177c:	635a      	str	r2, [r3, #52]	; 0x34

	atualiza_tensao_fase_neutro();
 800177e:	f001 fb01 	bl	8002d84 <atualiza_tensao_fase_neutro>
	//detecta_rele_colado();

	//--------------------------- ALTERAÇÕES APENAS NA MUDANÇA DE ESTADO ------------------------
	if(estado_atual != estado_anterior)
 8001782:	4b71      	ldr	r3, [pc, #452]	; (8001948 <estado_bv+0x234>)
 8001784:	781a      	ldrb	r2, [r3, #0]
 8001786:	4b71      	ldr	r3, [pc, #452]	; (800194c <estado_bv+0x238>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d001      	beq.n	8001792 <estado_bv+0x7e>
	{
		desativarele();
 800178e:	f002 fd6f 	bl	8004270 <desativarele>
		Flag_tela = 1;
		tela_state = 0;
		timer_tela = 0;
#endif
	}
	estado_anterior = estado_atual;
 8001792:	4b6d      	ldr	r3, [pc, #436]	; (8001948 <estado_bv+0x234>)
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	4b6d      	ldr	r3, [pc, #436]	; (800194c <estado_bv+0x238>)
 8001798:	701a      	strb	r2, [r3, #0]
	//--------------------------------FINAL ALTERAÇÕES ESTADO BV ---------------------------------

	//leitura do adc no pino A3 pilot_read
	medida_CP_atual = read_pilot();
 800179a:	f000 fbb3 	bl	8001f04 <read_pilot>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b6b      	ldr	r3, [pc, #428]	; (8001950 <estado_bv+0x23c>)
 80017a4:	801a      	strh	r2, [r3, #0]
	//HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
	//sprintf(buffer, "\r\n\n\n");
	//HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);

	//condição para mudança de estado
	if (medida_CP_atual > (ideal_PR_12_IN - DELTA_VOLT) && medida_CP_atual < (ideal_PR_12_IN + DELTA_VOLT))
 80017a6:	4b6a      	ldr	r3, [pc, #424]	; (8001950 <estado_bv+0x23c>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d926      	bls.n	8001800 <estado_bv+0xec>
 80017b2:	4b67      	ldr	r3, [pc, #412]	; (8001950 <estado_bv+0x23c>)
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	f243 22c7 	movw	r2, #12999	; 0x32c7
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d820      	bhi.n	8001800 <estado_bv+0xec>
	{
		counter_estados[0]++;
 80017be:	4b65      	ldr	r3, [pc, #404]	; (8001954 <estado_bv+0x240>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4b63      	ldr	r3, [pc, #396]	; (8001954 <estado_bv+0x240>)
 80017c8:	701a      	strb	r2, [r3, #0]
		counter_estados[1] = 0;
 80017ca:	4b62      	ldr	r3, [pc, #392]	; (8001954 <estado_bv+0x240>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	705a      	strb	r2, [r3, #1]
		counter_estados[2] = 0;
 80017d0:	4b60      	ldr	r3, [pc, #384]	; (8001954 <estado_bv+0x240>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	709a      	strb	r2, [r3, #2]
		counter_estados[3] = 0;
 80017d6:	4b5f      	ldr	r3, [pc, #380]	; (8001954 <estado_bv+0x240>)
 80017d8:	2200      	movs	r2, #0
 80017da:	70da      	strb	r2, [r3, #3]
		counter_estados[4] = 0;
 80017dc:	4b5d      	ldr	r3, [pc, #372]	; (8001954 <estado_bv+0x240>)
 80017de:	2200      	movs	r2, #0
 80017e0:	711a      	strb	r2, [r3, #4]
		counter_estados[5] = 0;
 80017e2:	4b5c      	ldr	r3, [pc, #368]	; (8001954 <estado_bv+0x240>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	715a      	strb	r2, [r3, #5]
		if(counter_estados[0] > counter_value){
 80017e8:	4b5a      	ldr	r3, [pc, #360]	; (8001954 <estado_bv+0x240>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	f240 8099 	bls.w	8001924 <estado_bv+0x210>
			estado_atual = ESTADO_A;
 80017f2:	4b55      	ldr	r3, [pc, #340]	; (8001948 <estado_bv+0x234>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
			counter_estados[0] = 0;
 80017f8:	4b56      	ldr	r3, [pc, #344]	; (8001954 <estado_bv+0x240>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
		if(counter_estados[0] > counter_value){
 80017fe:	e091      	b.n	8001924 <estado_bv+0x210>
		}
	}
	else if (medida_CP_atual > (ideal_PR_6_IN - DELTA_VOLT) && medida_CP_atual < (ideal_PR_6_IN + DELTA_VOLT))
 8001800:	4b53      	ldr	r3, [pc, #332]	; (8001950 <estado_bv+0x23c>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	f241 3288 	movw	r2, #5000	; 0x1388
 8001808:	4293      	cmp	r3, r2
 800180a:	d925      	bls.n	8001858 <estado_bv+0x144>
 800180c:	4b50      	ldr	r3, [pc, #320]	; (8001950 <estado_bv+0x23c>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	f641 3257 	movw	r2, #6999	; 0x1b57
 8001814:	4293      	cmp	r3, r2
 8001816:	d81f      	bhi.n	8001858 <estado_bv+0x144>
	{
		counter_estados[0] = 0;
 8001818:	4b4e      	ldr	r3, [pc, #312]	; (8001954 <estado_bv+0x240>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
		counter_estados[1] = 0;
 800181e:	4b4d      	ldr	r3, [pc, #308]	; (8001954 <estado_bv+0x240>)
 8001820:	2200      	movs	r2, #0
 8001822:	705a      	strb	r2, [r3, #1]
		counter_estados[2] = 0;
 8001824:	4b4b      	ldr	r3, [pc, #300]	; (8001954 <estado_bv+0x240>)
 8001826:	2200      	movs	r2, #0
 8001828:	709a      	strb	r2, [r3, #2]
		counter_estados[3] = 0;
 800182a:	4b4a      	ldr	r3, [pc, #296]	; (8001954 <estado_bv+0x240>)
 800182c:	2200      	movs	r2, #0
 800182e:	70da      	strb	r2, [r3, #3]
		counter_estados[4]++;
 8001830:	4b48      	ldr	r3, [pc, #288]	; (8001954 <estado_bv+0x240>)
 8001832:	791b      	ldrb	r3, [r3, #4]
 8001834:	3301      	adds	r3, #1
 8001836:	b2da      	uxtb	r2, r3
 8001838:	4b46      	ldr	r3, [pc, #280]	; (8001954 <estado_bv+0x240>)
 800183a:	711a      	strb	r2, [r3, #4]
		counter_estados[5] = 0;
 800183c:	4b45      	ldr	r3, [pc, #276]	; (8001954 <estado_bv+0x240>)
 800183e:	2200      	movs	r2, #0
 8001840:	715a      	strb	r2, [r3, #5]
		if(counter_estados[4] > counter_value){
 8001842:	4b44      	ldr	r3, [pc, #272]	; (8001954 <estado_bv+0x240>)
 8001844:	791b      	ldrb	r3, [r3, #4]
 8001846:	2b03      	cmp	r3, #3
 8001848:	d96c      	bls.n	8001924 <estado_bv+0x210>
			estado_atual = ESTADO_C2;
 800184a:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <estado_bv+0x234>)
 800184c:	2204      	movs	r2, #4
 800184e:	701a      	strb	r2, [r3, #0]
			counter_estados[4] = 0;
 8001850:	4b40      	ldr	r3, [pc, #256]	; (8001954 <estado_bv+0x240>)
 8001852:	2200      	movs	r2, #0
 8001854:	711a      	strb	r2, [r3, #4]
		if(counter_estados[4] > counter_value){
 8001856:	e065      	b.n	8001924 <estado_bv+0x210>
		}
	}
	else if (medida_CP_atual > (ideal_PR_6_IN - DELTA_VOLT) && medida_CP_atual < (ideal_PR_6_IN + DELTA_VOLT))
 8001858:	4b3d      	ldr	r3, [pc, #244]	; (8001950 <estado_bv+0x23c>)
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001860:	4293      	cmp	r3, r2
 8001862:	d925      	bls.n	80018b0 <estado_bv+0x19c>
 8001864:	4b3a      	ldr	r3, [pc, #232]	; (8001950 <estado_bv+0x23c>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	f641 3257 	movw	r2, #6999	; 0x1b57
 800186c:	4293      	cmp	r3, r2
 800186e:	d81f      	bhi.n	80018b0 <estado_bv+0x19c>
	{
		counter_estados[0] = 0;
 8001870:	4b38      	ldr	r3, [pc, #224]	; (8001954 <estado_bv+0x240>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
		counter_estados[1] = 0;
 8001876:	4b37      	ldr	r3, [pc, #220]	; (8001954 <estado_bv+0x240>)
 8001878:	2200      	movs	r2, #0
 800187a:	705a      	strb	r2, [r3, #1]
		counter_estados[2]++;
 800187c:	4b35      	ldr	r3, [pc, #212]	; (8001954 <estado_bv+0x240>)
 800187e:	789b      	ldrb	r3, [r3, #2]
 8001880:	3301      	adds	r3, #1
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b33      	ldr	r3, [pc, #204]	; (8001954 <estado_bv+0x240>)
 8001886:	709a      	strb	r2, [r3, #2]
		counter_estados[3] = 0;
 8001888:	4b32      	ldr	r3, [pc, #200]	; (8001954 <estado_bv+0x240>)
 800188a:	2200      	movs	r2, #0
 800188c:	70da      	strb	r2, [r3, #3]
		counter_estados[4] = 0;
 800188e:	4b31      	ldr	r3, [pc, #196]	; (8001954 <estado_bv+0x240>)
 8001890:	2200      	movs	r2, #0
 8001892:	711a      	strb	r2, [r3, #4]
		counter_estados[5] = 0;
 8001894:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <estado_bv+0x240>)
 8001896:	2200      	movs	r2, #0
 8001898:	715a      	strb	r2, [r3, #5]
		if(counter_estados[2] > counter_value){
 800189a:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <estado_bv+0x240>)
 800189c:	789b      	ldrb	r3, [r3, #2]
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d940      	bls.n	8001924 <estado_bv+0x210>
			estado_atual = ESTADO_BV;
 80018a2:	4b29      	ldr	r3, [pc, #164]	; (8001948 <estado_bv+0x234>)
 80018a4:	2202      	movs	r2, #2
 80018a6:	701a      	strb	r2, [r3, #0]
			counter_estados[2] = 0;
 80018a8:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <estado_bv+0x240>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	709a      	strb	r2, [r3, #2]
		if(counter_estados[2] > counter_value){
 80018ae:	e039      	b.n	8001924 <estado_bv+0x210>
		}
	}
	else
	{
		if (!(medida_CP_atual > (ideal_PR_9_IN - DELTA_VOLT) && medida_CP_atual < (ideal_PR_9_IN + DELTA_VOLT)))
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <estado_bv+0x23c>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80018b8:	d905      	bls.n	80018c6 <estado_bv+0x1b2>
 80018ba:	4b25      	ldr	r3, [pc, #148]	; (8001950 <estado_bv+0x23c>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	f242 720f 	movw	r2, #9999	; 0x270f
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d91f      	bls.n	8001906 <estado_bv+0x1f2>
		{
			counter_estados[0] = 0;
 80018c6:	4b23      	ldr	r3, [pc, #140]	; (8001954 <estado_bv+0x240>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
			counter_estados[1] = 0;
 80018cc:	4b21      	ldr	r3, [pc, #132]	; (8001954 <estado_bv+0x240>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	705a      	strb	r2, [r3, #1]
			counter_estados[2] = 0;
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <estado_bv+0x240>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	709a      	strb	r2, [r3, #2]
			counter_estados[3] = 0;
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <estado_bv+0x240>)
 80018da:	2200      	movs	r2, #0
 80018dc:	70da      	strb	r2, [r3, #3]
			counter_estados[4] = 0;
 80018de:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <estado_bv+0x240>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	711a      	strb	r2, [r3, #4]
			counter_estados[5]++;
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <estado_bv+0x240>)
 80018e6:	795b      	ldrb	r3, [r3, #5]
 80018e8:	3301      	adds	r3, #1
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <estado_bv+0x240>)
 80018ee:	715a      	strb	r2, [r3, #5]
			if(counter_estados[5] > counter_value){
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <estado_bv+0x240>)
 80018f2:	795b      	ldrb	r3, [r3, #5]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d915      	bls.n	8001924 <estado_bv+0x210>
				estado_atual = ESTADO_ERRO;
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <estado_bv+0x234>)
 80018fa:	2206      	movs	r2, #6
 80018fc:	701a      	strb	r2, [r3, #0]
				counter_estados[5] = 0;
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <estado_bv+0x240>)
 8001900:	2200      	movs	r2, #0
 8001902:	715a      	strb	r2, [r3, #5]
			if(counter_estados[5] > counter_value){
 8001904:	e00e      	b.n	8001924 <estado_bv+0x210>
			}
		}
		else
		{
			for(int i=0; i<6; i++){
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	e007      	b.n	800191c <estado_bv+0x208>
				counter_estados[i] = 0;
 800190c:	4a11      	ldr	r2, [pc, #68]	; (8001954 <estado_bv+0x240>)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4413      	add	r3, r2
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<6; i++){
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	3301      	adds	r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b05      	cmp	r3, #5
 8001920:	ddf4      	ble.n	800190c <estado_bv+0x1f8>
			}
		}
	}
}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	88888889 	.word	0x88888889
 8001930:	20000258 	.word	0x20000258
 8001934:	200005a0 	.word	0x200005a0
 8001938:	20000268 	.word	0x20000268
 800193c:	20000468 	.word	0x20000468
 8001940:	200004b0 	.word	0x200004b0
 8001944:	40000400 	.word	0x40000400
 8001948:	200007d9 	.word	0x200007d9
 800194c:	200007d8 	.word	0x200007d8
 8001950:	200005d2 	.word	0x200005d2
 8001954:	20000280 	.word	0x20000280

08001958 <estado_c1>:
void estado_c1(int corrente){
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	//--------------------------------INICIO ALTERAÇÕES ESTADO C1 --------------------------------
	TIM2->CCR1 = (corrente*TIM2->ARR/60);
 8001960:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	fb02 f303 	mul.w	r3, r2, r3
 800196c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001970:	4989      	ldr	r1, [pc, #548]	; (8001b98 <estado_c1+0x240>)
 8001972:	fba1 1303 	umull	r1, r3, r1, r3
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	6353      	str	r3, [r2, #52]	; 0x34
	corrente_selecionada = corrente;
 800197a:	4a88      	ldr	r2, [pc, #544]	; (8001b9c <estado_c1+0x244>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6013      	str	r3, [r2, #0]
	power = 0;
 8001980:	4b87      	ldr	r3, [pc, #540]	; (8001ba0 <estado_c1+0x248>)
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
	Irms = 0;
 8001988:	4b86      	ldr	r3, [pc, #536]	; (8001ba4 <estado_c1+0x24c>)
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	601a      	str	r2, [r3, #0]

	atualiza_tensao_fase_neutro();
 8001990:	f001 f9f8 	bl	8002d84 <atualiza_tensao_fase_neutro>
	//detecta_rele_colado();

	//--------------------------- ALTERAÇÕES APENAS NA MUDANÇA DE ESTADO ------------------------
	if(estado_atual != estado_anterior)
 8001994:	4b84      	ldr	r3, [pc, #528]	; (8001ba8 <estado_c1+0x250>)
 8001996:	781a      	ldrb	r2, [r3, #0]
 8001998:	4b84      	ldr	r3, [pc, #528]	; (8001bac <estado_c1+0x254>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <estado_c1+0x4c>
	{
		desativarele();
 80019a0:	f002 fc66 	bl	8004270 <desativarele>
		Flag_tela = 1;
		tela_state = 0;
		timer_tela = 0;
#endif
	}
	estado_anterior = estado_atual;
 80019a4:	4b80      	ldr	r3, [pc, #512]	; (8001ba8 <estado_c1+0x250>)
 80019a6:	781a      	ldrb	r2, [r3, #0]
 80019a8:	4b80      	ldr	r3, [pc, #512]	; (8001bac <estado_c1+0x254>)
 80019aa:	701a      	strb	r2, [r3, #0]
	//--------------------------------FINAL ALTERAÇÕES ESTADO C1 ---------------------------------

	//leitura do adc no pino A3 pilot_read
	medida_CP_atual = read_pilot();
 80019ac:	f000 faaa 	bl	8001f04 <read_pilot>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b7e      	ldr	r3, [pc, #504]	; (8001bb0 <estado_c1+0x258>)
 80019b6:	801a      	strh	r2, [r3, #0]
	//HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
	//sprintf(buffer, "\r\n\n\n");
	//HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);

	//condição para mudança de estado
	if (medida_CP_atual > (ideal_PR_9_IN - DELTA_VOLT) && medida_CP_atual < (ideal_PR_9_IN + DELTA_VOLT))
 80019b8:	4b7d      	ldr	r3, [pc, #500]	; (8001bb0 <estado_c1+0x258>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80019c0:	d926      	bls.n	8001a10 <estado_c1+0xb8>
 80019c2:	4b7b      	ldr	r3, [pc, #492]	; (8001bb0 <estado_c1+0x258>)
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	f242 720f 	movw	r2, #9999	; 0x270f
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d820      	bhi.n	8001a10 <estado_c1+0xb8>
	{
		counter_estados[0] = 0;
 80019ce:	4b79      	ldr	r3, [pc, #484]	; (8001bb4 <estado_c1+0x25c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
		counter_estados[1]++;
 80019d4:	4b77      	ldr	r3, [pc, #476]	; (8001bb4 <estado_c1+0x25c>)
 80019d6:	785b      	ldrb	r3, [r3, #1]
 80019d8:	3301      	adds	r3, #1
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	4b75      	ldr	r3, [pc, #468]	; (8001bb4 <estado_c1+0x25c>)
 80019de:	705a      	strb	r2, [r3, #1]
		counter_estados[2] = 0;
 80019e0:	4b74      	ldr	r3, [pc, #464]	; (8001bb4 <estado_c1+0x25c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	709a      	strb	r2, [r3, #2]
		counter_estados[3] = 0;
 80019e6:	4b73      	ldr	r3, [pc, #460]	; (8001bb4 <estado_c1+0x25c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	70da      	strb	r2, [r3, #3]
		counter_estados[4] = 0;
 80019ec:	4b71      	ldr	r3, [pc, #452]	; (8001bb4 <estado_c1+0x25c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	711a      	strb	r2, [r3, #4]
		counter_estados[5] = 0;
 80019f2:	4b70      	ldr	r3, [pc, #448]	; (8001bb4 <estado_c1+0x25c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	715a      	strb	r2, [r3, #5]
		if(counter_estados[1] > counter_value){
 80019f8:	4b6e      	ldr	r3, [pc, #440]	; (8001bb4 <estado_c1+0x25c>)
 80019fa:	785b      	ldrb	r3, [r3, #1]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	f240 80c7 	bls.w	8001b90 <estado_c1+0x238>
			estado_atual = ESTADO_BB;
 8001a02:	4b69      	ldr	r3, [pc, #420]	; (8001ba8 <estado_c1+0x250>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
			counter_estados[1] = 0;
 8001a08:	4b6a      	ldr	r3, [pc, #424]	; (8001bb4 <estado_c1+0x25c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	705a      	strb	r2, [r3, #1]
		if(counter_estados[1] > counter_value){
 8001a0e:	e0bf      	b.n	8001b90 <estado_c1+0x238>
		}
	}
	else if (medida_CP_atual > (ideal_PR_6_IN - DELTA_VOLT) && medida_CP_atual < (ideal_PR_6_IN + DELTA_VOLT)) //&& OCPP_Charge)
 8001a10:	4b67      	ldr	r3, [pc, #412]	; (8001bb0 <estado_c1+0x258>)
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d926      	bls.n	8001a6a <estado_c1+0x112>
 8001a1c:	4b64      	ldr	r3, [pc, #400]	; (8001bb0 <estado_c1+0x258>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	f641 3257 	movw	r2, #6999	; 0x1b57
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d820      	bhi.n	8001a6a <estado_c1+0x112>
	{
		counter_estados[0] = 0;
 8001a28:	4b62      	ldr	r3, [pc, #392]	; (8001bb4 <estado_c1+0x25c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
		counter_estados[1] = 0;
 8001a2e:	4b61      	ldr	r3, [pc, #388]	; (8001bb4 <estado_c1+0x25c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	705a      	strb	r2, [r3, #1]
		counter_estados[2] = 0;
 8001a34:	4b5f      	ldr	r3, [pc, #380]	; (8001bb4 <estado_c1+0x25c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	709a      	strb	r2, [r3, #2]
		counter_estados[3] = 0;
 8001a3a:	4b5e      	ldr	r3, [pc, #376]	; (8001bb4 <estado_c1+0x25c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	70da      	strb	r2, [r3, #3]
		counter_estados[4]++;
 8001a40:	4b5c      	ldr	r3, [pc, #368]	; (8001bb4 <estado_c1+0x25c>)
 8001a42:	791b      	ldrb	r3, [r3, #4]
 8001a44:	3301      	adds	r3, #1
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4b5a      	ldr	r3, [pc, #360]	; (8001bb4 <estado_c1+0x25c>)
 8001a4a:	711a      	strb	r2, [r3, #4]
		counter_estados[5] = 0;
 8001a4c:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <estado_c1+0x25c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	715a      	strb	r2, [r3, #5]
		if(counter_estados[4] > counter_value){
 8001a52:	4b58      	ldr	r3, [pc, #352]	; (8001bb4 <estado_c1+0x25c>)
 8001a54:	791b      	ldrb	r3, [r3, #4]
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	f240 809a 	bls.w	8001b90 <estado_c1+0x238>
			estado_atual = ESTADO_C2;
 8001a5c:	4b52      	ldr	r3, [pc, #328]	; (8001ba8 <estado_c1+0x250>)
 8001a5e:	2204      	movs	r2, #4
 8001a60:	701a      	strb	r2, [r3, #0]
			counter_estados[4] = 0;
 8001a62:	4b54      	ldr	r3, [pc, #336]	; (8001bb4 <estado_c1+0x25c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	711a      	strb	r2, [r3, #4]
		if(counter_estados[4] > counter_value){
 8001a68:	e092      	b.n	8001b90 <estado_c1+0x238>
		}
	}
	else if (medida_CP_atual > (ideal_PR_12_IN - DELTA_VOLT) && medida_CP_atual < (ideal_PR_12_IN + DELTA_VOLT))
 8001a6a:	4b51      	ldr	r3, [pc, #324]	; (8001bb0 <estado_c1+0x258>)
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d925      	bls.n	8001ac2 <estado_c1+0x16a>
 8001a76:	4b4e      	ldr	r3, [pc, #312]	; (8001bb0 <estado_c1+0x258>)
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	f243 22c7 	movw	r2, #12999	; 0x32c7
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d81f      	bhi.n	8001ac2 <estado_c1+0x16a>
	{
		counter_estados[0] = 0;
 8001a82:	4b4c      	ldr	r3, [pc, #304]	; (8001bb4 <estado_c1+0x25c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
		counter_estados[1] = 0;
 8001a88:	4b4a      	ldr	r3, [pc, #296]	; (8001bb4 <estado_c1+0x25c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	705a      	strb	r2, [r3, #1]
		counter_estados[2] = 0;
 8001a8e:	4b49      	ldr	r3, [pc, #292]	; (8001bb4 <estado_c1+0x25c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	709a      	strb	r2, [r3, #2]
		counter_estados[3] = 0;
 8001a94:	4b47      	ldr	r3, [pc, #284]	; (8001bb4 <estado_c1+0x25c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	70da      	strb	r2, [r3, #3]
		counter_estados[4]++;
 8001a9a:	4b46      	ldr	r3, [pc, #280]	; (8001bb4 <estado_c1+0x25c>)
 8001a9c:	791b      	ldrb	r3, [r3, #4]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b44      	ldr	r3, [pc, #272]	; (8001bb4 <estado_c1+0x25c>)
 8001aa4:	711a      	strb	r2, [r3, #4]
		counter_estados[5] = 0;
 8001aa6:	4b43      	ldr	r3, [pc, #268]	; (8001bb4 <estado_c1+0x25c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	715a      	strb	r2, [r3, #5]
		if(counter_estados[4] > counter_value){
 8001aac:	4b41      	ldr	r3, [pc, #260]	; (8001bb4 <estado_c1+0x25c>)
 8001aae:	791b      	ldrb	r3, [r3, #4]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d96d      	bls.n	8001b90 <estado_c1+0x238>
			estado_atual = ESTADO_A;
 8001ab4:	4b3c      	ldr	r3, [pc, #240]	; (8001ba8 <estado_c1+0x250>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
			counter_estados[4] = 0;
 8001aba:	4b3e      	ldr	r3, [pc, #248]	; (8001bb4 <estado_c1+0x25c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	711a      	strb	r2, [r3, #4]
		if(counter_estados[4] > counter_value){
 8001ac0:	e066      	b.n	8001b90 <estado_c1+0x238>
		}
	}
	else if (medida_CP_atual > (ideal_PR_6_IN - DELTA_VOLT) && medida_CP_atual < (ideal_PR_6_IN + DELTA_VOLT))
 8001ac2:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <estado_c1+0x258>)
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d925      	bls.n	8001b1a <estado_c1+0x1c2>
 8001ace:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <estado_c1+0x258>)
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	f641 3257 	movw	r2, #6999	; 0x1b57
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d81f      	bhi.n	8001b1a <estado_c1+0x1c2>
	{
		counter_estados[0] = 0;
 8001ada:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <estado_c1+0x25c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
		counter_estados[1] = 0;
 8001ae0:	4b34      	ldr	r3, [pc, #208]	; (8001bb4 <estado_c1+0x25c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	705a      	strb	r2, [r3, #1]
		counter_estados[2] = 0;
 8001ae6:	4b33      	ldr	r3, [pc, #204]	; (8001bb4 <estado_c1+0x25c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	709a      	strb	r2, [r3, #2]
		counter_estados[3]++;
 8001aec:	4b31      	ldr	r3, [pc, #196]	; (8001bb4 <estado_c1+0x25c>)
 8001aee:	78db      	ldrb	r3, [r3, #3]
 8001af0:	3301      	adds	r3, #1
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <estado_c1+0x25c>)
 8001af6:	70da      	strb	r2, [r3, #3]
		counter_estados[4] = 0;
 8001af8:	4b2e      	ldr	r3, [pc, #184]	; (8001bb4 <estado_c1+0x25c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	711a      	strb	r2, [r3, #4]
		counter_estados[5] = 0;
 8001afe:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <estado_c1+0x25c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	715a      	strb	r2, [r3, #5]
		if(counter_estados[3] > counter_value){
 8001b04:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <estado_c1+0x25c>)
 8001b06:	78db      	ldrb	r3, [r3, #3]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d941      	bls.n	8001b90 <estado_c1+0x238>
			estado_atual = ESTADO_C1;
 8001b0c:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <estado_c1+0x250>)
 8001b0e:	2203      	movs	r2, #3
 8001b10:	701a      	strb	r2, [r3, #0]
			counter_estados[3] = 0;
 8001b12:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <estado_c1+0x25c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	70da      	strb	r2, [r3, #3]
		if(counter_estados[3] > counter_value){
 8001b18:	e03a      	b.n	8001b90 <estado_c1+0x238>
		}
	}
	else
	{
		if (!(medida_CP_atual > (ideal_PR_6_IN - DELTA_VOLT) && medida_CP_atual < (ideal_PR_6_IN + DELTA_VOLT)))
 8001b1a:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <estado_c1+0x258>)
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d905      	bls.n	8001b32 <estado_c1+0x1da>
 8001b26:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <estado_c1+0x258>)
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	f641 3257 	movw	r2, #6999	; 0x1b57
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d91f      	bls.n	8001b72 <estado_c1+0x21a>
		{
			counter_estados[0] = 0;
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <estado_c1+0x25c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
			counter_estados[1] = 0;
 8001b38:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <estado_c1+0x25c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	705a      	strb	r2, [r3, #1]
			counter_estados[2] = 0;
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <estado_c1+0x25c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	709a      	strb	r2, [r3, #2]
			counter_estados[3] = 0;
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <estado_c1+0x25c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	70da      	strb	r2, [r3, #3]
			counter_estados[4] = 0;
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <estado_c1+0x25c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	711a      	strb	r2, [r3, #4]
			counter_estados[5]++;
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <estado_c1+0x25c>)
 8001b52:	795b      	ldrb	r3, [r3, #5]
 8001b54:	3301      	adds	r3, #1
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <estado_c1+0x25c>)
 8001b5a:	715a      	strb	r2, [r3, #5]
			if(counter_estados[5] > counter_value){
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <estado_c1+0x25c>)
 8001b5e:	795b      	ldrb	r3, [r3, #5]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d915      	bls.n	8001b90 <estado_c1+0x238>
				estado_atual = ESTADO_ERRO;
 8001b64:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <estado_c1+0x250>)
 8001b66:	2206      	movs	r2, #6
 8001b68:	701a      	strb	r2, [r3, #0]
				counter_estados[5] = 0;
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <estado_c1+0x25c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	715a      	strb	r2, [r3, #5]
			if(counter_estados[5] > counter_value){
 8001b70:	e00e      	b.n	8001b90 <estado_c1+0x238>
			}
		}
		else
		{
			for(int i=0; i<6; i++){
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	e007      	b.n	8001b88 <estado_c1+0x230>
				counter_estados[i] = 0;
 8001b78:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <estado_c1+0x25c>)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<6; i++){
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	3301      	adds	r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b05      	cmp	r3, #5
 8001b8c:	ddf4      	ble.n	8001b78 <estado_c1+0x220>
			}
		}
	}
}
 8001b8e:	bf00      	nop
 8001b90:	bf00      	nop
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	88888889 	.word	0x88888889
 8001b9c:	20000258 	.word	0x20000258
 8001ba0:	200005a0 	.word	0x200005a0
 8001ba4:	20000268 	.word	0x20000268
 8001ba8:	200007d9 	.word	0x200007d9
 8001bac:	200007d8 	.word	0x200007d8
 8001bb0:	200005d2 	.word	0x200005d2
 8001bb4:	20000280 	.word	0x20000280

08001bb8 <estado_c2>:

void estado_c2(int corrente) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	//sprintf(buffer, "---------------------------------\r\n");
	//HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
	//HAL_UART_Transmit(&huart1, str_estado_C, strlen((char*) str_estado_C), HAL_MAX_DELAY);

	//--------------------------------INICIO ALTERAÇÕES ESTADO C --------------------------------
	TIM2->CCR1 = (corrente*TIM2->ARR/60);
 8001bc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	fb02 f303 	mul.w	r3, r2, r3
 8001bcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bd0:	4964      	ldr	r1, [pc, #400]	; (8001d64 <estado_c2+0x1ac>)
 8001bd2:	fba1 1303 	umull	r1, r3, r1, r3
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	6353      	str	r3, [r2, #52]	; 0x34
	corrente_selecionada = corrente;
 8001bda:	4a63      	ldr	r2, [pc, #396]	; (8001d68 <estado_c2+0x1b0>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6013      	str	r3, [r2, #0]
	power = V_fase_neutro*Irms;
 8001be0:	4b62      	ldr	r3, [pc, #392]	; (8001d6c <estado_c2+0x1b4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff f879 	bl	8000cdc <__aeabi_i2f>
 8001bea:	4602      	mov	r2, r0
 8001bec:	4b60      	ldr	r3, [pc, #384]	; (8001d70 <estado_c2+0x1b8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	f7ff f8c6 	bl	8000d84 <__aeabi_fmul>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b5d      	ldr	r3, [pc, #372]	; (8001d74 <estado_c2+0x1bc>)
 8001bfe:	601a      	str	r2, [r3, #0]

	atualiza_tensao_fase_neutro();
 8001c00:	f001 f8c0 	bl	8002d84 <atualiza_tensao_fase_neutro>
	atualiza_correte();
 8001c04:	f000 faf4 	bl	80021f0 <atualiza_correte>
	IDR_tipo_B();
 8001c08:	f000 fa4a 	bl	80020a0 <IDR_tipo_B>
	//detecta_rele_colado();
	//detecta_fase();
	//detecta_neutro();

	//--------------------------- ALTERAÇÕES APENAS NA MUDANÇA DE ESTADO ------------------------
	if(estado_atual != estado_anterior && !Flag_IDR_tipo_B)
 8001c0c:	4b5a      	ldr	r3, [pc, #360]	; (8001d78 <estado_c2+0x1c0>)
 8001c0e:	781a      	ldrb	r2, [r3, #0]
 8001c10:	4b5a      	ldr	r3, [pc, #360]	; (8001d7c <estado_c2+0x1c4>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d005      	beq.n	8001c24 <estado_c2+0x6c>
 8001c18:	4b59      	ldr	r3, [pc, #356]	; (8001d80 <estado_c2+0x1c8>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <estado_c2+0x6c>
	{
		ativarele();
 8001c20:	f002 f9ae 	bl	8003f80 <ativarele>
		Flag_tela = 1;
		tela_state = 0;
		timer_tela = 0;
#endif
	}
	estado_anterior = estado_atual;
 8001c24:	4b54      	ldr	r3, [pc, #336]	; (8001d78 <estado_c2+0x1c0>)
 8001c26:	781a      	ldrb	r2, [r3, #0]
 8001c28:	4b54      	ldr	r3, [pc, #336]	; (8001d7c <estado_c2+0x1c4>)
 8001c2a:	701a      	strb	r2, [r3, #0]
	//--------------------------------FINAL ALTERAÇÕES ESTADO C ---------------------------------

	//leitura do adc no pino A3 pilot_read
	medida_CP_atual = read_pilot();
 8001c2c:	f000 f96a 	bl	8001f04 <read_pilot>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b53      	ldr	r3, [pc, #332]	; (8001d84 <estado_c2+0x1cc>)
 8001c36:	801a      	strh	r2, [r3, #0]
	//HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
	//sprintf(buffer, "\r\n\n\n");
	//HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);

	//condição para mudança de estado
	if (medida_CP_atual > (ideal_PR_12_IN - DELTA_VOLT) && medida_CP_atual < (ideal_PR_12_IN + DELTA_VOLT))
 8001c38:	4b52      	ldr	r3, [pc, #328]	; (8001d84 <estado_c2+0x1cc>)
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d925      	bls.n	8001c90 <estado_c2+0xd8>
 8001c44:	4b4f      	ldr	r3, [pc, #316]	; (8001d84 <estado_c2+0x1cc>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	f243 22c7 	movw	r2, #12999	; 0x32c7
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d81f      	bhi.n	8001c90 <estado_c2+0xd8>
	{
		counter_estados[0]++;
 8001c50:	4b4d      	ldr	r3, [pc, #308]	; (8001d88 <estado_c2+0x1d0>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	3301      	adds	r3, #1
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	4b4b      	ldr	r3, [pc, #300]	; (8001d88 <estado_c2+0x1d0>)
 8001c5a:	701a      	strb	r2, [r3, #0]
		counter_estados[1] = 0;
 8001c5c:	4b4a      	ldr	r3, [pc, #296]	; (8001d88 <estado_c2+0x1d0>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	705a      	strb	r2, [r3, #1]
		counter_estados[2] = 0;
 8001c62:	4b49      	ldr	r3, [pc, #292]	; (8001d88 <estado_c2+0x1d0>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	709a      	strb	r2, [r3, #2]
		counter_estados[3] = 0;
 8001c68:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <estado_c2+0x1d0>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	70da      	strb	r2, [r3, #3]
		counter_estados[4] = 0;
 8001c6e:	4b46      	ldr	r3, [pc, #280]	; (8001d88 <estado_c2+0x1d0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	711a      	strb	r2, [r3, #4]
		counter_estados[5] = 0;
 8001c74:	4b44      	ldr	r3, [pc, #272]	; (8001d88 <estado_c2+0x1d0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	715a      	strb	r2, [r3, #5]
		if(counter_estados[0] > counter_value){
 8001c7a:	4b43      	ldr	r3, [pc, #268]	; (8001d88 <estado_c2+0x1d0>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d96c      	bls.n	8001d5c <estado_c2+0x1a4>
			estado_atual = ESTADO_A;
 8001c82:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <estado_c2+0x1c0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
			counter_estados[0] = 0;
 8001c88:	4b3f      	ldr	r3, [pc, #252]	; (8001d88 <estado_c2+0x1d0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
		if(counter_estados[0] > counter_value){
 8001c8e:	e065      	b.n	8001d5c <estado_c2+0x1a4>
		}
	}
	else if ((medida_CP_atual > (ideal_PR_9_IN - DELTA_VOLT) && medida_CP_atual < (ideal_PR_9_IN + DELTA_VOLT)) )//|| !OCPP_Charge)
 8001c90:	4b3c      	ldr	r3, [pc, #240]	; (8001d84 <estado_c2+0x1cc>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001c98:	d925      	bls.n	8001ce6 <estado_c2+0x12e>
 8001c9a:	4b3a      	ldr	r3, [pc, #232]	; (8001d84 <estado_c2+0x1cc>)
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d81f      	bhi.n	8001ce6 <estado_c2+0x12e>
	{
		counter_estados[0] = 0;
 8001ca6:	4b38      	ldr	r3, [pc, #224]	; (8001d88 <estado_c2+0x1d0>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
		counter_estados[1] = 0;
 8001cac:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <estado_c2+0x1d0>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	705a      	strb	r2, [r3, #1]
		counter_estados[2]++;
 8001cb2:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <estado_c2+0x1d0>)
 8001cb4:	789b      	ldrb	r3, [r3, #2]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4b33      	ldr	r3, [pc, #204]	; (8001d88 <estado_c2+0x1d0>)
 8001cbc:	709a      	strb	r2, [r3, #2]
		counter_estados[3] = 0;
 8001cbe:	4b32      	ldr	r3, [pc, #200]	; (8001d88 <estado_c2+0x1d0>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	70da      	strb	r2, [r3, #3]
		counter_estados[4] = 0;
 8001cc4:	4b30      	ldr	r3, [pc, #192]	; (8001d88 <estado_c2+0x1d0>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	711a      	strb	r2, [r3, #4]
		counter_estados[5] = 0;
 8001cca:	4b2f      	ldr	r3, [pc, #188]	; (8001d88 <estado_c2+0x1d0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	715a      	strb	r2, [r3, #5]
		if(counter_estados[2] > counter_value){
 8001cd0:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <estado_c2+0x1d0>)
 8001cd2:	789b      	ldrb	r3, [r3, #2]
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d941      	bls.n	8001d5c <estado_c2+0x1a4>
			estado_atual = ESTADO_BV;
 8001cd8:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <estado_c2+0x1c0>)
 8001cda:	2202      	movs	r2, #2
 8001cdc:	701a      	strb	r2, [r3, #0]
			counter_estados[2] = 0;
 8001cde:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <estado_c2+0x1d0>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	709a      	strb	r2, [r3, #2]
		if(counter_estados[2] > counter_value){
 8001ce4:	e03a      	b.n	8001d5c <estado_c2+0x1a4>
		}
	}
	else
	{
		if (!(medida_CP_atual > (ideal_PR_6_IN - DELTA_VOLT) && medida_CP_atual < (ideal_PR_6_IN + DELTA_VOLT)))
 8001ce6:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <estado_c2+0x1cc>)
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d905      	bls.n	8001cfe <estado_c2+0x146>
 8001cf2:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <estado_c2+0x1cc>)
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	f641 3257 	movw	r2, #6999	; 0x1b57
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d91f      	bls.n	8001d3e <estado_c2+0x186>
		{
			counter_estados[0] = 0;
 8001cfe:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <estado_c2+0x1d0>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
			counter_estados[1] = 0;
 8001d04:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <estado_c2+0x1d0>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	705a      	strb	r2, [r3, #1]
			counter_estados[2] = 0;
 8001d0a:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <estado_c2+0x1d0>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	709a      	strb	r2, [r3, #2]
			counter_estados[3] = 0;
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <estado_c2+0x1d0>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	70da      	strb	r2, [r3, #3]
			counter_estados[4] = 0;
 8001d16:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <estado_c2+0x1d0>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	711a      	strb	r2, [r3, #4]
			counter_estados[5]++;
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <estado_c2+0x1d0>)
 8001d1e:	795b      	ldrb	r3, [r3, #5]
 8001d20:	3301      	adds	r3, #1
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <estado_c2+0x1d0>)
 8001d26:	715a      	strb	r2, [r3, #5]
			if(counter_estados[5] > counter_value){
 8001d28:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <estado_c2+0x1d0>)
 8001d2a:	795b      	ldrb	r3, [r3, #5]
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	d915      	bls.n	8001d5c <estado_c2+0x1a4>
				estado_atual = ESTADO_ERRO;
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <estado_c2+0x1c0>)
 8001d32:	2206      	movs	r2, #6
 8001d34:	701a      	strb	r2, [r3, #0]
				counter_estados[5] = 0;
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <estado_c2+0x1d0>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	715a      	strb	r2, [r3, #5]
			if(counter_estados[5] > counter_value){
 8001d3c:	e00e      	b.n	8001d5c <estado_c2+0x1a4>
			}
		}
		else
		{
			for(int i=0; i<6; i++){
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	e007      	b.n	8001d54 <estado_c2+0x19c>
				counter_estados[i] = 0;
 8001d44:	4a10      	ldr	r2, [pc, #64]	; (8001d88 <estado_c2+0x1d0>)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4413      	add	r3, r2
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<6; i++){
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3301      	adds	r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	ddf4      	ble.n	8001d44 <estado_c2+0x18c>
			}
		}
	}
}
 8001d5a:	bf00      	nop
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	88888889 	.word	0x88888889
 8001d68:	20000258 	.word	0x20000258
 8001d6c:	2000023c 	.word	0x2000023c
 8001d70:	20000268 	.word	0x20000268
 8001d74:	200005a0 	.word	0x200005a0
 8001d78:	200007d9 	.word	0x200007d9
 8001d7c:	200007d8 	.word	0x200007d8
 8001d80:	20000235 	.word	0x20000235
 8001d84:	200005d2 	.word	0x200005d2
 8001d88:	20000280 	.word	0x20000280

08001d8c <estado_erro>:

void estado_erro(int corrente) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	//sprintf(buffer, "---------------------------------\r\n");
	//HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
	//HAL_UART_Transmit(&huart1, str_estado_erro, strlen((char*) str_estado_erro), HAL_MAX_DELAY);

	//--------------------------------INICIO ALTERAÇÕES ERRO --------------------------------
	TIM2->CCR1 = 1000;
 8001d94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d9c:	635a      	str	r2, [r3, #52]	; 0x34
	Irms = 0;
 8001d9e:	4b49      	ldr	r3, [pc, #292]	; (8001ec4 <estado_erro+0x138>)
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
	corrente_selecionada = corrente;
 8001da6:	4a48      	ldr	r2, [pc, #288]	; (8001ec8 <estado_erro+0x13c>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6013      	str	r3, [r2, #0]

	if(hold_state_erro_detectar_ordem_fases == 1){
 8001dac:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <estado_erro+0x140>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <estado_erro+0x2c>
		detecta_orderm_fases();
 8001db4:	f002 fe60 	bl	8004a78 <detecta_orderm_fases>
	}
	//detecta_rele_colado();
	//Atualiza medida de corrente
	atualiza_correte();
 8001db8:	f000 fa1a 	bl	80021f0 <atualiza_correte>
	//Atualiza medida da tensão da fase 1
	atualiza_tensao_fase_terra();
 8001dbc:	f000 fc28 	bl	8002610 <atualiza_tensao_fase_terra>
	//Atualiza temperatura
	atualiza_temperatura();
 8001dc0:	f002 fbce 	bl	8004560 <atualiza_temperatura>
	//Desativa o relé da fase 1
	HAL_GPIO_WritePin(RELE_F1_GPIO_Port, RELE_F1_Pin, 0);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2108      	movs	r1, #8
 8001dc8:	4841      	ldr	r0, [pc, #260]	; (8001ed0 <estado_erro+0x144>)
 8001dca:	f007 fffa 	bl	8009dc2 <HAL_GPIO_WritePin>
	//Desativa o relé do Neutro
	HAL_GPIO_WritePin(RELE_N_GPIO_Port, RELE_N_Pin, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dd4:	483f      	ldr	r0, [pc, #252]	; (8001ed4 <estado_erro+0x148>)
 8001dd6:	f007 fff4 	bl	8009dc2 <HAL_GPIO_WritePin>
	//Desativa o relé da fase 2
	HAL_GPIO_WritePin(RELE_F2_GPIO_Port, RELE_F2_Pin, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2104      	movs	r1, #4
 8001dde:	483e      	ldr	r0, [pc, #248]	; (8001ed8 <estado_erro+0x14c>)
 8001de0:	f007 ffef 	bl	8009dc2 <HAL_GPIO_WritePin>
	//Desativa o relé da fase 3
	HAL_GPIO_WritePin(RELE_F3_GPIO_Port, RELE_F3_Pin, 0);
 8001de4:	2200      	movs	r2, #0
 8001de6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dea:	483a      	ldr	r0, [pc, #232]	; (8001ed4 <estado_erro+0x148>)
 8001dec:	f007 ffe9 	bl	8009dc2 <HAL_GPIO_WritePin>
		Flag_tela = 1;
		tela_state = 0;
		timer_tela = 0;
#endif
	}
	estado_anterior = estado_atual;
 8001df0:	4b3a      	ldr	r3, [pc, #232]	; (8001edc <estado_erro+0x150>)
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	4b3a      	ldr	r3, [pc, #232]	; (8001ee0 <estado_erro+0x154>)
 8001df6:	701a      	strb	r2, [r3, #0]
	//--------------------------------FINAL ALTERAÇÕES ERRO ---------------------------------

	//leitura do adc no pino A3 pilot_read
	medida_CP_atual = read_pilot();
 8001df8:	f000 f884 	bl	8001f04 <read_pilot>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <estado_erro+0x158>)
 8001e02:	801a      	strh	r2, [r3, #0]
	//HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
	//sprintf(buffer, "\r\n\n\n");
	//HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);

	//condição para mudança de estado
	if (medida_CP_atual > (ideal_PR_12_IN - DELTA_VOLT) && medida_CP_atual < (ideal_PR_12_IN + DELTA_VOLT))
 8001e04:	4b37      	ldr	r3, [pc, #220]	; (8001ee4 <estado_erro+0x158>)
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d925      	bls.n	8001e5c <estado_erro+0xd0>
 8001e10:	4b34      	ldr	r3, [pc, #208]	; (8001ee4 <estado_erro+0x158>)
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	f243 22c7 	movw	r2, #12999	; 0x32c7
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d81f      	bhi.n	8001e5c <estado_erro+0xd0>
	{
		counter_estados[0]++;
 8001e1c:	4b32      	ldr	r3, [pc, #200]	; (8001ee8 <estado_erro+0x15c>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	3301      	adds	r3, #1
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <estado_erro+0x15c>)
 8001e26:	701a      	strb	r2, [r3, #0]
		counter_estados[1] = 0;
 8001e28:	4b2f      	ldr	r3, [pc, #188]	; (8001ee8 <estado_erro+0x15c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	705a      	strb	r2, [r3, #1]
		counter_estados[2] = 0;
 8001e2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ee8 <estado_erro+0x15c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	709a      	strb	r2, [r3, #2]
		counter_estados[3] = 0;
 8001e34:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <estado_erro+0x15c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	70da      	strb	r2, [r3, #3]
		counter_estados[4] = 0;
 8001e3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ee8 <estado_erro+0x15c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	711a      	strb	r2, [r3, #4]
		counter_estados[5] = 0;
 8001e40:	4b29      	ldr	r3, [pc, #164]	; (8001ee8 <estado_erro+0x15c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	715a      	strb	r2, [r3, #5]
		if(counter_estados[0] > counter_value){
 8001e46:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <estado_erro+0x15c>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d935      	bls.n	8001eba <estado_erro+0x12e>
			estado_atual = ESTADO_A;
 8001e4e:	4b23      	ldr	r3, [pc, #140]	; (8001edc <estado_erro+0x150>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
			counter_estados[0] = 0;
 8001e54:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <estado_erro+0x15c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
		if(counter_estados[0] > counter_value){
 8001e5a:	e02e      	b.n	8001eba <estado_erro+0x12e>
		}
	}
	else if (medida_CP_atual > (ideal_PR_9_IN - DELTA_VOLT) && medida_CP_atual < (ideal_PR_9_IN + DELTA_VOLT) && !Flag_IDR_tipo_B)
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <estado_erro+0x158>)
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001e64:	d929      	bls.n	8001eba <estado_erro+0x12e>
 8001e66:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <estado_erro+0x158>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d823      	bhi.n	8001eba <estado_erro+0x12e>
 8001e72:	4b1e      	ldr	r3, [pc, #120]	; (8001eec <estado_erro+0x160>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d11f      	bne.n	8001eba <estado_erro+0x12e>
	{
		counter_estados[0] = 0;
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <estado_erro+0x15c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
		counter_estados[1]++;
 8001e80:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <estado_erro+0x15c>)
 8001e82:	785b      	ldrb	r3, [r3, #1]
 8001e84:	3301      	adds	r3, #1
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <estado_erro+0x15c>)
 8001e8a:	705a      	strb	r2, [r3, #1]
		counter_estados[2] = 0;
 8001e8c:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <estado_erro+0x15c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	709a      	strb	r2, [r3, #2]
		counter_estados[3] = 0;
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <estado_erro+0x15c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	70da      	strb	r2, [r3, #3]
		counter_estados[4] = 0;
 8001e98:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <estado_erro+0x15c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	711a      	strb	r2, [r3, #4]
		counter_estados[5] = 0;
 8001e9e:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <estado_erro+0x15c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	715a      	strb	r2, [r3, #5]
		if(counter_estados[1] > counter_value){
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <estado_erro+0x15c>)
 8001ea6:	785b      	ldrb	r3, [r3, #1]
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d906      	bls.n	8001eba <estado_erro+0x12e>
			estado_atual = ESTADO_BB;
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <estado_erro+0x150>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
			counter_estados[1] = 0;
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <estado_erro+0x15c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	705a      	strb	r2, [r3, #1]
		}
	}
}
 8001eb8:	e7ff      	b.n	8001eba <estado_erro+0x12e>
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000268 	.word	0x20000268
 8001ec8:	20000258 	.word	0x20000258
 8001ecc:	20000278 	.word	0x20000278
 8001ed0:	40010c00 	.word	0x40010c00
 8001ed4:	40011000 	.word	0x40011000
 8001ed8:	40011400 	.word	0x40011400
 8001edc:	200007d9 	.word	0x200007d9
 8001ee0:	200007d8 	.word	0x200007d8
 8001ee4:	200005d2 	.word	0x200005d2
 8001ee8:	20000280 	.word	0x20000280
 8001eec:	20000235 	.word	0x20000235

08001ef0 <estado_f>:

void estado_f(int erro){
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
	...

08001f04 <read_pilot>:


uint16_t read_pilot(){
 8001f04:	b5b0      	push	{r4, r5, r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0
	float R45 = 82e3;
 8001f0a:	4b57      	ldr	r3, [pc, #348]	; (8002068 <read_pilot+0x164>)
 8001f0c:	613b      	str	r3, [r7, #16]
	float R48 = 100e3;
 8001f0e:	4b57      	ldr	r3, [pc, #348]	; (800206c <read_pilot+0x168>)
 8001f10:	60fb      	str	r3, [r7, #12]
	float Req = 680e3;
 8001f12:	4b57      	ldr	r3, [pc, #348]	; (8002070 <read_pilot+0x16c>)
 8001f14:	60bb      	str	r3, [r7, #8]
	uint16_t medida_CP_atual;
	int sample = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
	int sum = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	623b      	str	r3, [r7, #32]
	int num = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 3; i++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	e033      	b.n	8001f90 <read_pilot+0x8c>
	{
		int tempo_start = HAL_GetTick();
 8001f28:	f006 fa96 	bl	8008458 <HAL_GetTick>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	603b      	str	r3, [r7, #0]
		ADC_Select_CH3();
 8001f30:	f005 f910 	bl	8007154 <ADC_Select_CH3>
		HAL_ADC_Start(&hadc1);
 8001f34:	484f      	ldr	r0, [pc, #316]	; (8002074 <read_pilot+0x170>)
 8001f36:	f006 fb95 	bl	8008664 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001f3a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f3e:	484d      	ldr	r0, [pc, #308]	; (8002074 <read_pilot+0x170>)
 8001f40:	f006 fc6a 	bl	8008818 <HAL_ADC_PollForConversion>
		for (int i = 0; HAL_GetTick() - tempo_start < 20; i++){
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	e011      	b.n	8001f6e <read_pilot+0x6a>
			num++;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	61fb      	str	r3, [r7, #28]
			if (sample < HAL_ADC_GetValue(&hadc1)){
 8001f50:	4848      	ldr	r0, [pc, #288]	; (8002074 <read_pilot+0x170>)
 8001f52:	f006 fd67 	bl	8008a24 <HAL_ADC_GetValue>
 8001f56:	4602      	mov	r2, r0
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d904      	bls.n	8001f68 <read_pilot+0x64>
				sample = HAL_ADC_GetValue(&hadc1);
 8001f5e:	4845      	ldr	r0, [pc, #276]	; (8002074 <read_pilot+0x170>)
 8001f60:	f006 fd60 	bl	8008a24 <HAL_ADC_GetValue>
 8001f64:	4603      	mov	r3, r0
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i = 0; HAL_GetTick() - tempo_start < 20; i++){
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	f006 fa73 	bl	8008458 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b13      	cmp	r3, #19
 8001f7a:	d9e6      	bls.n	8001f4a <read_pilot+0x46>
			}
		}
		HAL_ADC_Stop(&hadc1);
 8001f7c:	483d      	ldr	r0, [pc, #244]	; (8002074 <read_pilot+0x170>)
 8001f7e:	f006 fc1f 	bl	80087c0 <HAL_ADC_Stop>
		sum += sample;
 8001f82:	6a3a      	ldr	r2, [r7, #32]
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	4413      	add	r3, r2
 8001f88:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < 3; i++)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	61bb      	str	r3, [r7, #24]
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	ddc8      	ble.n	8001f28 <read_pilot+0x24>
	}

	PILOT_READ_VALUE = sample*3300/4095;		// (3300/4095) converte para mV
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001f9c:	fb02 f303 	mul.w	r3, r2, r3
 8001fa0:	4a35      	ldr	r2, [pc, #212]	; (8002078 <read_pilot+0x174>)
 8001fa2:	fb82 1203 	smull	r1, r2, r2, r3
 8001fa6:	441a      	add	r2, r3
 8001fa8:	12d2      	asrs	r2, r2, #11
 8001faa:	17db      	asrs	r3, r3, #31
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	4b32      	ldr	r3, [pc, #200]	; (800207c <read_pilot+0x178>)
 8001fb2:	801a      	strh	r2, [r3, #0]
	medida_CP_atual = PILOT_READ_VALUE*((Req/R45)+1+(Req/R48))-3300*(Req/R45);		// conversão do valor do adc para o valor real do CP
 8001fb4:	4b31      	ldr	r3, [pc, #196]	; (800207c <read_pilot+0x178>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fe8f 	bl	8000cdc <__aeabi_i2f>
 8001fbe:	4604      	mov	r4, r0
 8001fc0:	6939      	ldr	r1, [r7, #16]
 8001fc2:	68b8      	ldr	r0, [r7, #8]
 8001fc4:	f7fe ff92 	bl	8000eec <__aeabi_fdiv>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fdd0 	bl	8000b74 <__addsf3>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	461d      	mov	r5, r3
 8001fd8:	68f9      	ldr	r1, [r7, #12]
 8001fda:	68b8      	ldr	r0, [r7, #8]
 8001fdc:	f7fe ff86 	bl	8000eec <__aeabi_fdiv>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4628      	mov	r0, r5
 8001fe6:	f7fe fdc5 	bl	8000b74 <__addsf3>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4619      	mov	r1, r3
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f7fe fec8 	bl	8000d84 <__aeabi_fmul>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	461c      	mov	r4, r3
 8001ff8:	6939      	ldr	r1, [r7, #16]
 8001ffa:	68b8      	ldr	r0, [r7, #8]
 8001ffc:	f7fe ff76 	bl	8000eec <__aeabi_fdiv>
 8002000:	4603      	mov	r3, r0
 8002002:	491f      	ldr	r1, [pc, #124]	; (8002080 <read_pilot+0x17c>)
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe febd 	bl	8000d84 <__aeabi_fmul>
 800200a:	4603      	mov	r3, r0
 800200c:	4619      	mov	r1, r3
 800200e:	4620      	mov	r0, r4
 8002010:	f7fe fdae 	bl	8000b70 <__aeabi_fsub>
 8002014:	4603      	mov	r3, r0
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff f8a0 	bl	800115c <__aeabi_f2uiz>
 800201c:	4603      	mov	r3, r0
 800201e:	80fb      	strh	r3, [r7, #6]
	// 2.444V para ESTADO_A
	// 2.245V PARA ESTDO_B
	// 2.049V PARA ESTADO_C

	// caso exista alguma flag de travar em erro essa função retorna o valor 0
	if(hold_state_erro_temp
 8002020:	4b18      	ldr	r3, [pc, #96]	; (8002084 <read_pilot+0x180>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d117      	bne.n	8002058 <read_pilot+0x154>
			|| hold_state_erro_sobrecorrente
 8002028:	4b17      	ldr	r3, [pc, #92]	; (8002088 <read_pilot+0x184>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d113      	bne.n	8002058 <read_pilot+0x154>
			|| hold_state_erro_ativarele
 8002030:	4b16      	ldr	r3, [pc, #88]	; (800208c <read_pilot+0x188>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10f      	bne.n	8002058 <read_pilot+0x154>
			|| hold_state_erro_desativarele
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <read_pilot+0x18c>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10b      	bne.n	8002058 <read_pilot+0x154>
			|| hold_state_erro_detectar_ordem_fases
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <read_pilot+0x190>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d107      	bne.n	8002058 <read_pilot+0x154>
			|| hold_state_erro_conexao_fase
 8002048:	4b13      	ldr	r3, [pc, #76]	; (8002098 <read_pilot+0x194>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d103      	bne.n	8002058 <read_pilot+0x154>
			|| hold_state_erro_rele_colado
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <read_pilot+0x198>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <read_pilot+0x158>
			){
		return 0;
 8002058:	2300      	movs	r3, #0
 800205a:	e000      	b.n	800205e <read_pilot+0x15a>
	}
	else{
		return medida_CP_atual;		//retorna o maior valor de todas as medidas de arr[]
 800205c:	88fb      	ldrh	r3, [r7, #6]
	}
}
 800205e:	4618      	mov	r0, r3
 8002060:	3728      	adds	r7, #40	; 0x28
 8002062:	46bd      	mov	sp, r7
 8002064:	bdb0      	pop	{r4, r5, r7, pc}
 8002066:	bf00      	nop
 8002068:	47a02800 	.word	0x47a02800
 800206c:	47c35000 	.word	0x47c35000
 8002070:	49260400 	.word	0x49260400
 8002074:	20000310 	.word	0x20000310
 8002078:	80080081 	.word	0x80080081
 800207c:	2000027c 	.word	0x2000027c
 8002080:	454e4000 	.word	0x454e4000
 8002084:	20000274 	.word	0x20000274
 8002088:	20000275 	.word	0x20000275
 800208c:	20000276 	.word	0x20000276
 8002090:	20000277 	.word	0x20000277
 8002094:	20000278 	.word	0x20000278
 8002098:	20000279 	.word	0x20000279
 800209c:	2000027a 	.word	0x2000027a

080020a0 <IDR_tipo_B>:

void IDR_tipo_B(){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
	char IDR_AC = HAL_GPIO_ReadPin(IDR_AC_GPIO_Port, IDR_AC_Pin);
 80020a6:	2180      	movs	r1, #128	; 0x80
 80020a8:	4826      	ldr	r0, [pc, #152]	; (8002144 <IDR_tipo_B+0xa4>)
 80020aa:	f007 fe73 	bl	8009d94 <HAL_GPIO_ReadPin>
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
	char IDR_DC = HAL_GPIO_ReadPin(IDR_DC_GPIO_Port, IDR_DC_Pin);
 80020b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020b6:	4823      	ldr	r0, [pc, #140]	; (8002144 <IDR_tipo_B+0xa4>)
 80020b8:	f007 fe6c 	bl	8009d94 <HAL_GPIO_ReadPin>
 80020bc:	4603      	mov	r3, r0
 80020be:	71bb      	strb	r3, [r7, #6]
	//sprintf(buffer,"          AD = \r\n          AO = %d\r\n          DO = %d\r\n", AO, DO);
	//HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
	if(IDR_AC || IDR_DC)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d102      	bne.n	80020cc <IDR_tipo_B+0x2c>
 80020c6:	79bb      	ldrb	r3, [r7, #6]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d036      	beq.n	800213a <IDR_tipo_B+0x9a>
	{
		//Desativa o relé da fase 1
		HAL_GPIO_WritePin(RELE_F1_GPIO_Port, RELE_F1_Pin, 0);
 80020cc:	2200      	movs	r2, #0
 80020ce:	2108      	movs	r1, #8
 80020d0:	481d      	ldr	r0, [pc, #116]	; (8002148 <IDR_tipo_B+0xa8>)
 80020d2:	f007 fe76 	bl	8009dc2 <HAL_GPIO_WritePin>
		//Desativa o relé do Neutro
		HAL_GPIO_WritePin(RELE_N_GPIO_Port, RELE_N_Pin, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020dc:	4819      	ldr	r0, [pc, #100]	; (8002144 <IDR_tipo_B+0xa4>)
 80020de:	f007 fe70 	bl	8009dc2 <HAL_GPIO_WritePin>
		if(Trifasico){
 80020e2:	4b1a      	ldr	r3, [pc, #104]	; (800214c <IDR_tipo_B+0xac>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00a      	beq.n	8002100 <IDR_tipo_B+0x60>
			//Desativa o relé da fase 2
			HAL_GPIO_WritePin(RELE_F2_GPIO_Port, RELE_F2_Pin, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2104      	movs	r1, #4
 80020ee:	4818      	ldr	r0, [pc, #96]	; (8002150 <IDR_tipo_B+0xb0>)
 80020f0:	f007 fe67 	bl	8009dc2 <HAL_GPIO_WritePin>
			//Desativa o relé da fase 3
			HAL_GPIO_WritePin(RELE_F3_GPIO_Port, RELE_F3_Pin, 0);
 80020f4:	2200      	movs	r2, #0
 80020f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020fa:	4812      	ldr	r0, [pc, #72]	; (8002144 <IDR_tipo_B+0xa4>)
 80020fc:	f007 fe61 	bl	8009dc2 <HAL_GPIO_WritePin>
		}
		Flag_IDR_tipo_B = 1;
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <IDR_tipo_B+0xb4>)
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
		estado_atual = ESTADO_ERRO;
 8002106:	4b14      	ldr	r3, [pc, #80]	; (8002158 <IDR_tipo_B+0xb8>)
 8002108:	2206      	movs	r2, #6
 800210a:	701a      	strb	r2, [r3, #0]
		if(IDR_AC){
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d009      	beq.n	8002126 <IDR_tipo_B+0x86>
			Flag_IDR_AC = 1;
 8002112:	4b12      	ldr	r3, [pc, #72]	; (800215c <IDR_tipo_B+0xbc>)
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
			Erros|=(1<ERRO_AD);
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <IDR_tipo_B+0xc0>)
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	b29a      	uxth	r2, r3
 8002122:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <IDR_tipo_B+0xc0>)
 8002124:	801a      	strh	r2, [r3, #0]
		}

		if(IDR_DC){
 8002126:	79bb      	ldrb	r3, [r7, #6]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <IDR_tipo_B+0x9a>
			Flag_IDR_DC = 1;
 800212c:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <IDR_tipo_B+0xc4>)
 800212e:	2201      	movs	r2, #1
 8002130:	701a      	strb	r2, [r3, #0]
			Erros|=(1<ERRO_AO);
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <IDR_tipo_B+0xc0>)
 8002134:	881a      	ldrh	r2, [r3, #0]
 8002136:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <IDR_tipo_B+0xc0>)
 8002138:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40011000 	.word	0x40011000
 8002148:	40010c00 	.word	0x40010c00
 800214c:	20000234 	.word	0x20000234
 8002150:	40011400 	.word	0x40011400
 8002154:	20000235 	.word	0x20000235
 8002158:	200007d9 	.word	0x200007d9
 800215c:	20000236 	.word	0x20000236
 8002160:	200005bc 	.word	0x200005bc
 8002164:	20000237 	.word	0x20000237

08002168 <atualiza_offset_corrente>:

void atualiza_offset_corrente(){
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
	int amostras = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
	for (int i=0; i<50; i++)
 8002172:	2300      	movs	r3, #0
 8002174:	603b      	str	r3, [r7, #0]
 8002176:	e021      	b.n	80021bc <atualiza_offset_corrente+0x54>
	{
		ADC_Select_CH7();
 8002178:	f005 f828 	bl	80071cc <ADC_Select_CH7>
		HAL_ADC_Start(&hadc1);
 800217c:	4817      	ldr	r0, [pc, #92]	; (80021dc <atualiza_offset_corrente+0x74>)
 800217e:	f006 fa71 	bl	8008664 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002182:	f04f 31ff 	mov.w	r1, #4294967295
 8002186:	4815      	ldr	r0, [pc, #84]	; (80021dc <atualiza_offset_corrente+0x74>)
 8002188:	f006 fb46 	bl	8008818 <HAL_ADC_PollForConversion>
		amostras += HAL_ADC_GetValue(&hadc1)*3300/4095;		//transforma a medida em mV e subtrai 1.65v tendo os valores negativos e positivos do sinal
 800218c:	4813      	ldr	r0, [pc, #76]	; (80021dc <atualiza_offset_corrente+0x74>)
 800218e:	f006 fc49 	bl	8008a24 <HAL_ADC_GetValue>
 8002192:	4603      	mov	r3, r0
 8002194:	f640 42e4 	movw	r2, #3300	; 0xce4
 8002198:	fb03 f202 	mul.w	r2, r3, r2
 800219c:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <atualiza_offset_corrente+0x78>)
 800219e:	fba3 1302 	umull	r1, r3, r3, r2
 80021a2:	1ad2      	subs	r2, r2, r3
 80021a4:	0852      	lsrs	r2, r2, #1
 80021a6:	4413      	add	r3, r2
 80021a8:	0ada      	lsrs	r2, r3, #11
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	607b      	str	r3, [r7, #4]
		HAL_ADC_Stop(&hadc1);
 80021b0:	480a      	ldr	r0, [pc, #40]	; (80021dc <atualiza_offset_corrente+0x74>)
 80021b2:	f006 fb05 	bl	80087c0 <HAL_ADC_Stop>
	for (int i=0; i<50; i++)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	3301      	adds	r3, #1
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2b31      	cmp	r3, #49	; 0x31
 80021c0:	ddda      	ble.n	8002178 <atualiza_offset_corrente+0x10>
	}
	offset_corrente = amostras/50;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <atualiza_offset_corrente+0x7c>)
 80021c6:	fb82 1203 	smull	r1, r2, r2, r3
 80021ca:	1112      	asrs	r2, r2, #4
 80021cc:	17db      	asrs	r3, r3, #31
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	4a05      	ldr	r2, [pc, #20]	; (80021e8 <atualiza_offset_corrente+0x80>)
 80021d2:	6013      	str	r3, [r2, #0]
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000310 	.word	0x20000310
 80021e0:	00100101 	.word	0x00100101
 80021e4:	51eb851f 	.word	0x51eb851f
 80021e8:	2000025c 	.word	0x2000025c
 80021ec:	00000000 	.word	0x00000000

080021f0 <atualiza_correte>:



void atualiza_correte(){
 80021f0:	b5b0      	push	{r4, r5, r7, lr}
 80021f2:	b090      	sub	sp, #64	; 0x40
 80021f4:	af00      	add	r7, sp, #0
	// medição da corente RMS
	// declaração das variáveis local
	double R17 = 68;
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	4bbf      	ldr	r3, [pc, #764]	; (80024f8 <atualiza_correte+0x308>)
 80021fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int n_amostras = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	63fb      	str	r3, [r7, #60]	; 0x3c
	int sq_amostra = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
	int sq_amostra2 = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	61bb      	str	r3, [r7, #24]
	int sq_amostra3 = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
	int sum_sq_amostras = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	63bb      	str	r3, [r7, #56]	; 0x38
	int sum_sq_amostras2 = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	637b      	str	r3, [r7, #52]	; 0x34
	int sum_sq_amostras3 = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
	int amostra = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	613b      	str	r3, [r7, #16]
	int amostra2 = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
	int amostra3 = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	62bb      	str	r3, [r7, #40]	; 0x28
	float Vrms = 0;
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
	float Vrms2 = 0;
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	60bb      	str	r3, [r7, #8]
	float Vrms3 = 0;
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
	int tick_inicio_medidas = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	603b      	str	r3, [r7, #0]
	// marca o tempo inicial em ms
	tick_inicio_medidas = HAL_GetTick();
 800223e:	f006 f90b 	bl	8008458 <HAL_GetTick>
 8002242:	4603      	mov	r3, r0
 8002244:	603b      	str	r3, [r7, #0]
	// loop de 100ms
	while(HAL_GetTick() < (tick_inicio_medidas + 50))
 8002246:	e065      	b.n	8002314 <atualiza_correte+0x124>
	{
		// n_amostras marca o número de amostras
		n_amostras++;
 8002248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800224a:	3301      	adds	r3, #1
 800224c:	63fb      	str	r3, [r7, #60]	; 0x3c

		ADC_Select_CH7();
 800224e:	f004 ffbd 	bl	80071cc <ADC_Select_CH7>
		HAL_ADC_Start(&hadc1);
 8002252:	48aa      	ldr	r0, [pc, #680]	; (80024fc <atualiza_correte+0x30c>)
 8002254:	f006 fa06 	bl	8008664 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002258:	f04f 31ff 	mov.w	r1, #4294967295
 800225c:	48a7      	ldr	r0, [pc, #668]	; (80024fc <atualiza_correte+0x30c>)
 800225e:	f006 fadb 	bl	8008818 <HAL_ADC_PollForConversion>
		//transforma a medida em mV e subtrai o offset tendo os valores negativos e positivos do sinal
		amostra = HAL_ADC_GetValue(&hadc1) * 3300/4095 - 1650;
 8002262:	48a6      	ldr	r0, [pc, #664]	; (80024fc <atualiza_correte+0x30c>)
 8002264:	f006 fbde 	bl	8008a24 <HAL_ADC_GetValue>
 8002268:	4603      	mov	r3, r0
 800226a:	f640 42e4 	movw	r2, #3300	; 0xce4
 800226e:	fb03 f202 	mul.w	r2, r3, r2
 8002272:	4ba3      	ldr	r3, [pc, #652]	; (8002500 <atualiza_correte+0x310>)
 8002274:	fba3 1302 	umull	r1, r3, r3, r2
 8002278:	1ad2      	subs	r2, r2, r3
 800227a:	0852      	lsrs	r2, r2, #1
 800227c:	4413      	add	r3, r2
 800227e:	0adb      	lsrs	r3, r3, #11
 8002280:	f2a3 6372 	subw	r3, r3, #1650	; 0x672
 8002284:	613b      	str	r3, [r7, #16]
		if(Trifasico){
 8002286:	4b9f      	ldr	r3, [pc, #636]	; (8002504 <atualiza_correte+0x314>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d027      	beq.n	80022de <atualiza_correte+0xee>
			ADC_Select_CH14();
 800228e:	f005 f815 	bl	80072bc <ADC_Select_CH14>
			amostra2 = HAL_ADC_GetValue(&hadc1) * 3300/4095 - 1650;
 8002292:	489a      	ldr	r0, [pc, #616]	; (80024fc <atualiza_correte+0x30c>)
 8002294:	f006 fbc6 	bl	8008a24 <HAL_ADC_GetValue>
 8002298:	4603      	mov	r3, r0
 800229a:	f640 42e4 	movw	r2, #3300	; 0xce4
 800229e:	fb03 f202 	mul.w	r2, r3, r2
 80022a2:	4b97      	ldr	r3, [pc, #604]	; (8002500 <atualiza_correte+0x310>)
 80022a4:	fba3 1302 	umull	r1, r3, r3, r2
 80022a8:	1ad2      	subs	r2, r2, r3
 80022aa:	0852      	lsrs	r2, r2, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	0adb      	lsrs	r3, r3, #11
 80022b0:	f2a3 6372 	subw	r3, r3, #1650	; 0x672
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
			ADC_Select_CH15();
 80022b6:	f005 f81f 	bl	80072f8 <ADC_Select_CH15>
			amostra3 = HAL_ADC_GetValue(&hadc1) * 3300/4095 - 1650;
 80022ba:	4890      	ldr	r0, [pc, #576]	; (80024fc <atualiza_correte+0x30c>)
 80022bc:	f006 fbb2 	bl	8008a24 <HAL_ADC_GetValue>
 80022c0:	4603      	mov	r3, r0
 80022c2:	f640 42e4 	movw	r2, #3300	; 0xce4
 80022c6:	fb03 f202 	mul.w	r2, r3, r2
 80022ca:	4b8d      	ldr	r3, [pc, #564]	; (8002500 <atualiza_correte+0x310>)
 80022cc:	fba3 1302 	umull	r1, r3, r3, r2
 80022d0:	1ad2      	subs	r2, r2, r3
 80022d2:	0852      	lsrs	r2, r2, #1
 80022d4:	4413      	add	r3, r2
 80022d6:	0adb      	lsrs	r3, r3, #11
 80022d8:	f2a3 6372 	subw	r3, r3, #1650	; 0x672
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		HAL_ADC_Stop(&hadc1);
 80022de:	4887      	ldr	r0, [pc, #540]	; (80024fc <atualiza_correte+0x30c>)
 80022e0:	f006 fa6e 	bl	80087c0 <HAL_ADC_Stop>
		// faz o quadrado a amostra
		sq_amostra = amostra*amostra;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	fb03 f303 	mul.w	r3, r3, r3
 80022ea:	61fb      	str	r3, [r7, #28]
		sq_amostra2 = amostra2*amostra2;
 80022ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ee:	fb03 f303 	mul.w	r3, r3, r3
 80022f2:	61bb      	str	r3, [r7, #24]
		sq_amostra3 = amostra3*amostra3;
 80022f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f6:	fb03 f303 	mul.w	r3, r3, r3
 80022fa:	617b      	str	r3, [r7, #20]
		// soma todas as amostras ao quadrado
		sum_sq_amostras += sq_amostra;
 80022fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	4413      	add	r3, r2
 8002302:	63bb      	str	r3, [r7, #56]	; 0x38
		sum_sq_amostras2 += sq_amostra2;
 8002304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	4413      	add	r3, r2
 800230a:	637b      	str	r3, [r7, #52]	; 0x34
		sum_sq_amostras3 += sq_amostra3;
 800230c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	4413      	add	r3, r2
 8002312:	633b      	str	r3, [r7, #48]	; 0x30
	while(HAL_GetTick() < (tick_inicio_medidas + 50))
 8002314:	f006 f8a0 	bl	8008458 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	3332      	adds	r3, #50	; 0x32
 800231e:	429a      	cmp	r2, r3
 8002320:	d392      	bcc.n	8002248 <atualiza_correte+0x58>
			return;
		}
#endif
	}
	// raiz quadrada da média das amostras ao quadrado (média quadrática)
	Vrms = sqrt(sum_sq_amostras/n_amostras);
 8002322:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002326:	fb92 f3f3 	sdiv	r3, r2, r3
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe f86a 	bl	8000404 <__aeabi_i2d>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	f00d ffb4 	bl	80102a4 <sqrt>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	f7fe fbc0 	bl	8000ac8 <__aeabi_d2f>
 8002348:	4603      	mov	r3, r0
 800234a:	60fb      	str	r3, [r7, #12]
	Vrms2 = sqrt(sum_sq_amostras2/n_amostras);
 800234c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800234e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002350:	fb92 f3f3 	sdiv	r3, r2, r3
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f855 	bl	8000404 <__aeabi_i2d>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4610      	mov	r0, r2
 8002360:	4619      	mov	r1, r3
 8002362:	f00d ff9f 	bl	80102a4 <sqrt>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f7fe fbab 	bl	8000ac8 <__aeabi_d2f>
 8002372:	4603      	mov	r3, r0
 8002374:	60bb      	str	r3, [r7, #8]
	Vrms3 = sqrt(sum_sq_amostras3/n_amostras);
 8002376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800237a:	fb92 f3f3 	sdiv	r3, r2, r3
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f840 	bl	8000404 <__aeabi_i2d>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	f00d ff8a 	bl	80102a4 <sqrt>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4610      	mov	r0, r2
 8002396:	4619      	mov	r1, r3
 8002398:	f7fe fb96 	bl	8000ac8 <__aeabi_d2f>
 800239c:	4603      	mov	r3, r0
 800239e:	607b      	str	r3, [r7, #4]

	// fator de conversão de mA para A
	Irms = Vrms * (2/R17);
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f7fe f841 	bl	8000428 <__aeabi_f2d>
 80023a6:	4604      	mov	r4, r0
 80023a8:	460d      	mov	r5, r1
 80023aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023ae:	f04f 0000 	mov.w	r0, #0
 80023b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80023b6:	f7fe f9b9 	bl	800072c <__aeabi_ddiv>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4620      	mov	r0, r4
 80023c0:	4629      	mov	r1, r5
 80023c2:	f7fe f889 	bl	80004d8 <__aeabi_dmul>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4610      	mov	r0, r2
 80023cc:	4619      	mov	r1, r3
 80023ce:	f7fe fb7b 	bl	8000ac8 <__aeabi_d2f>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4a4c      	ldr	r2, [pc, #304]	; (8002508 <atualiza_correte+0x318>)
 80023d6:	6013      	str	r3, [r2, #0]
	Irms2 = Vrms2 * (2/R17);
 80023d8:	68b8      	ldr	r0, [r7, #8]
 80023da:	f7fe f825 	bl	8000428 <__aeabi_f2d>
 80023de:	4604      	mov	r4, r0
 80023e0:	460d      	mov	r5, r1
 80023e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023e6:	f04f 0000 	mov.w	r0, #0
 80023ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80023ee:	f7fe f99d 	bl	800072c <__aeabi_ddiv>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4620      	mov	r0, r4
 80023f8:	4629      	mov	r1, r5
 80023fa:	f7fe f86d 	bl	80004d8 <__aeabi_dmul>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	f7fe fb5f 	bl	8000ac8 <__aeabi_d2f>
 800240a:	4603      	mov	r3, r0
 800240c:	4a3f      	ldr	r2, [pc, #252]	; (800250c <atualiza_correte+0x31c>)
 800240e:	6013      	str	r3, [r2, #0]
	Irms3 = Vrms3 * (2/R17);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7fe f809 	bl	8000428 <__aeabi_f2d>
 8002416:	4604      	mov	r4, r0
 8002418:	460d      	mov	r5, r1
 800241a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800241e:	f04f 0000 	mov.w	r0, #0
 8002422:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002426:	f7fe f981 	bl	800072c <__aeabi_ddiv>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4620      	mov	r0, r4
 8002430:	4629      	mov	r1, r5
 8002432:	f7fe f851 	bl	80004d8 <__aeabi_dmul>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4610      	mov	r0, r2
 800243c:	4619      	mov	r1, r3
 800243e:	f7fe fb43 	bl	8000ac8 <__aeabi_d2f>
 8002442:	4603      	mov	r3, r0
 8002444:	4a32      	ldr	r2, [pc, #200]	; (8002510 <atualiza_correte+0x320>)
 8002446:	6013      	str	r3, [r2, #0]

	// arredonda a corrente para 0 caso seja menor que 2A
	if(Irms <= 2){
 8002448:	4b2f      	ldr	r3, [pc, #188]	; (8002508 <atualiza_correte+0x318>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe fe3f 	bl	80010d4 <__aeabi_fcmple>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <atualiza_correte+0x274>
		Irms = 0;
 800245c:	4b2a      	ldr	r3, [pc, #168]	; (8002508 <atualiza_correte+0x318>)
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
	}
	if(Irms2 <= 2){
 8002464:	4b29      	ldr	r3, [pc, #164]	; (800250c <atualiza_correte+0x31c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe fe31 	bl	80010d4 <__aeabi_fcmple>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <atualiza_correte+0x290>
		Irms2 = 0;
 8002478:	4b24      	ldr	r3, [pc, #144]	; (800250c <atualiza_correte+0x31c>)
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
	}
	if(Irms3 <= 2){
 8002480:	4b23      	ldr	r3, [pc, #140]	; (8002510 <atualiza_correte+0x320>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe fe23 	bl	80010d4 <__aeabi_fcmple>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <atualiza_correte+0x2ac>
		Irms3 = 0;
 8002494:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <atualiza_correte+0x320>)
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
	}

	// Sobrecorrente de 10%
	if(Irms > corrente_selecionada*1.1)
 800249c:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <atualiza_correte+0x318>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fd ffc1 	bl	8000428 <__aeabi_f2d>
 80024a6:	4604      	mov	r4, r0
 80024a8:	460d      	mov	r5, r1
 80024aa:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <atualiza_correte+0x324>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fd ffa8 	bl	8000404 <__aeabi_i2d>
 80024b4:	a30e      	add	r3, pc, #56	; (adr r3, 80024f0 <atualiza_correte+0x300>)
 80024b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ba:	f7fe f80d 	bl	80004d8 <__aeabi_dmul>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4620      	mov	r0, r4
 80024c4:	4629      	mov	r1, r5
 80024c6:	f7fe fa97 	bl	80009f8 <__aeabi_dcmpgt>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d029      	beq.n	8002524 <atualiza_correte+0x334>
	{
		Flag_Sobrecorrente = 1;
 80024d0:	4b11      	ldr	r3, [pc, #68]	; (8002518 <atualiza_correte+0x328>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
		// trava o carregador em erro
		hold_state_erro_sobrecorrente = 1;
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <atualiza_correte+0x32c>)
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
		Erros|=(1<ERRO_Sobrecorrente);
 80024dc:	4b10      	ldr	r3, [pc, #64]	; (8002520 <atualiza_correte+0x330>)
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <atualiza_correte+0x330>)
 80024e8:	801a      	strh	r2, [r3, #0]
 80024ea:	e021      	b.n	8002530 <atualiza_correte+0x340>
 80024ec:	f3af 8000 	nop.w
 80024f0:	9999999a 	.word	0x9999999a
 80024f4:	3ff19999 	.word	0x3ff19999
 80024f8:	40510000 	.word	0x40510000
 80024fc:	20000310 	.word	0x20000310
 8002500:	00100101 	.word	0x00100101
 8002504:	20000234 	.word	0x20000234
 8002508:	20000268 	.word	0x20000268
 800250c:	2000026c 	.word	0x2000026c
 8002510:	20000270 	.word	0x20000270
 8002514:	20000258 	.word	0x20000258
 8002518:	200005cd 	.word	0x200005cd
 800251c:	20000275 	.word	0x20000275
 8002520:	200005bc 	.word	0x200005bc
	}
	else
	{
		Flag_Sobrecorrente = 0;
 8002524:	4b34      	ldr	r3, [pc, #208]	; (80025f8 <atualiza_correte+0x408>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
		// desabilita o erro
		hold_state_erro_sobrecorrente = 0;
 800252a:	4b34      	ldr	r3, [pc, #208]	; (80025fc <atualiza_correte+0x40c>)
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
	}

	if(Irms2 > corrente_selecionada*1.1)
 8002530:	4b33      	ldr	r3, [pc, #204]	; (8002600 <atualiza_correte+0x410>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7fd ff77 	bl	8000428 <__aeabi_f2d>
 800253a:	4604      	mov	r4, r0
 800253c:	460d      	mov	r5, r1
 800253e:	4b31      	ldr	r3, [pc, #196]	; (8002604 <atualiza_correte+0x414>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fd ff5e 	bl	8000404 <__aeabi_i2d>
 8002548:	a329      	add	r3, pc, #164	; (adr r3, 80025f0 <atualiza_correte+0x400>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	f7fd ffc3 	bl	80004d8 <__aeabi_dmul>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4620      	mov	r0, r4
 8002558:	4629      	mov	r1, r5
 800255a:	f7fe fa4d 	bl	80009f8 <__aeabi_dcmpgt>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00d      	beq.n	8002580 <atualiza_correte+0x390>
	{
		Flag_Sobrecorrente = 1;
 8002564:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <atualiza_correte+0x408>)
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
		// trava o carregador em erro
		hold_state_erro_sobrecorrente = 1;
 800256a:	4b24      	ldr	r3, [pc, #144]	; (80025fc <atualiza_correte+0x40c>)
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]
		Erros|=(1<ERRO_Sobrecorrente);
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <atualiza_correte+0x418>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	4b23      	ldr	r3, [pc, #140]	; (8002608 <atualiza_correte+0x418>)
 800257c:	801a      	strh	r2, [r3, #0]
 800257e:	e005      	b.n	800258c <atualiza_correte+0x39c>
	}
	else
	{
		Flag_Sobrecorrente = 0;
 8002580:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <atualiza_correte+0x408>)
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
		// desabilita o erro
		hold_state_erro_sobrecorrente = 0;
 8002586:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <atualiza_correte+0x40c>)
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
	}

	if(Irms3 > corrente_selecionada*1.1)
 800258c:	4b1f      	ldr	r3, [pc, #124]	; (800260c <atualiza_correte+0x41c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7fd ff49 	bl	8000428 <__aeabi_f2d>
 8002596:	4604      	mov	r4, r0
 8002598:	460d      	mov	r5, r1
 800259a:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <atualiza_correte+0x414>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fd ff30 	bl	8000404 <__aeabi_i2d>
 80025a4:	a312      	add	r3, pc, #72	; (adr r3, 80025f0 <atualiza_correte+0x400>)
 80025a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025aa:	f7fd ff95 	bl	80004d8 <__aeabi_dmul>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4620      	mov	r0, r4
 80025b4:	4629      	mov	r1, r5
 80025b6:	f7fe fa1f 	bl	80009f8 <__aeabi_dcmpgt>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00d      	beq.n	80025dc <atualiza_correte+0x3ec>
	{
		Flag_Sobrecorrente = 1;
 80025c0:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <atualiza_correte+0x408>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	701a      	strb	r2, [r3, #0]
		// trava o carregador em erro
		hold_state_erro_sobrecorrente = 1;
 80025c6:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <atualiza_correte+0x40c>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]
		Erros|=(1<ERRO_Sobrecorrente);
 80025cc:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <atualiza_correte+0x418>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <atualiza_correte+0x418>)
 80025d8:	801a      	strh	r2, [r3, #0]
	{
		Flag_Sobrecorrente = 0;
		// desabilita o erro
		hold_state_erro_sobrecorrente = 0;
	}
}
 80025da:	e005      	b.n	80025e8 <atualiza_correte+0x3f8>
		Flag_Sobrecorrente = 0;
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <atualiza_correte+0x408>)
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
		hold_state_erro_sobrecorrente = 0;
 80025e2:	4b06      	ldr	r3, [pc, #24]	; (80025fc <atualiza_correte+0x40c>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
}
 80025e8:	bf00      	nop
 80025ea:	3740      	adds	r7, #64	; 0x40
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bdb0      	pop	{r4, r5, r7, pc}
 80025f0:	9999999a 	.word	0x9999999a
 80025f4:	3ff19999 	.word	0x3ff19999
 80025f8:	200005cd 	.word	0x200005cd
 80025fc:	20000275 	.word	0x20000275
 8002600:	2000026c 	.word	0x2000026c
 8002604:	20000258 	.word	0x20000258
 8002608:	200005bc 	.word	0x200005bc
 800260c:	20000270 	.word	0x20000270

08002610 <atualiza_tensao_fase_terra>:
  * @return
  *     - Valor em Volts
  */

#define n_medidas_tensao_fase_terra 250
void atualiza_tensao_fase_terra() {
 8002610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002614:	f6ad 0d7c 	subw	sp, sp, #2172	; 0x87c
 8002618:	af00      	add	r7, sp, #0
	///////////////////////////////////////////////////////////////////////////////AQUISIÇÃO DE MEDIDAS///////////////////////
	// variável que guarda os valores das medidas de tensão instantânea
	int arr_voltage_fase_terra [n_medidas_tensao_fase_terra] = {0};
 800261a:	f607 0378 	addw	r3, r7, #2168	; 0x878
 800261e:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8002622:	4618      	mov	r0, r3
 8002624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002628:	461a      	mov	r2, r3
 800262a:	2100      	movs	r1, #0
 800262c:	f00a ff26 	bl	800d47c <memset>
	int arr_voltage_neutro_terra [n_medidas_tensao_fase_terra] = {0};
 8002630:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8002634:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 8002638:	4618      	mov	r0, r3
 800263a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800263e:	461a      	mov	r2, r3
 8002640:	2100      	movs	r1, #0
 8002642:	f00a ff1b 	bl	800d47c <memset>
	// delay entre cada medida do adc máximo de 65535 us
	int delay_us = 200;
 8002646:	23c8      	movs	r3, #200	; 0xc8
 8002648:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
	// guarda o tempo em us (valor do timer3) do início da medida atual
	int target_time = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	f8c7 3860 	str.w	r3, [r7, #2144]	; 0x860
	int start_sample_time = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
	int total_sample_time = (n_medidas_tensao_fase_terra*delay_us);
 8002658:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 800265c:	22fa      	movs	r2, #250	; 0xfa
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
	int n_periodos = total_sample_time/16666;
 8002666:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 800266a:	4a89      	ldr	r2, [pc, #548]	; (8002890 <atualiza_tensao_fase_terra+0x280>)
 800266c:	fb82 1203 	smull	r1, r2, r2, r3
 8002670:	12d2      	asrs	r2, r2, #11
 8002672:	17db      	asrs	r3, r3, #31
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
	// inicia o adc 1
	HAL_ADC_Start(&hadc1);
 800267a:	4886      	ldr	r0, [pc, #536]	; (8002894 <atualiza_tensao_fase_terra+0x284>)
 800267c:	f005 fff2 	bl	8008664 <HAL_ADC_Start>
	// inicia o adc2
	HAL_ADC_Start(&hadc2);
 8002680:	4885      	ldr	r0, [pc, #532]	; (8002898 <atualiza_tensao_fase_terra+0x288>)
 8002682:	f005 ffef 	bl	8008664 <HAL_ADC_Start>
	// seleciona o canal que será medido
	//ADC1_Select_CH4_ADC2_Select_CH2();
	// loop para as aquisições de medida de tensão
	for (int i=0; i<n_medidas_tensao_fase_terra; i++)
 8002686:	2300      	movs	r3, #0
 8002688:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 800268c:	e04e      	b.n	800272c <atualiza_tensao_fase_terra+0x11c>
	{
		// aquisição do tempo do inicio da amostra atual
		start_sample_time = __HAL_TIM_GET_COUNTER(&htim3);
 800268e:	4b83      	ldr	r3, [pc, #524]	; (800289c <atualiza_tensao_fase_terra+0x28c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
		// aguarda a converção do adc1 concluir (atrasa o tempo de aquisição)
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002698:	f04f 31ff 	mov.w	r1, #4294967295
 800269c:	487d      	ldr	r0, [pc, #500]	; (8002894 <atualiza_tensao_fase_terra+0x284>)
 800269e:	f006 f8bb 	bl	8008818 <HAL_ADC_PollForConversion>
		// aguarda a converção do adc2 concluir (atrasa o tempo de aquisição)
		//HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
		// medida instantânea
		ADC_Select_CH4();
 80026a2:	f004 fd75 	bl	8007190 <ADC_Select_CH4>
		arr_voltage_fase_terra[i] = HAL_ADC_GetValue(&hadc1);
 80026a6:	487b      	ldr	r0, [pc, #492]	; (8002894 <atualiza_tensao_fase_terra+0x284>)
 80026a8:	f006 f9bc 	bl	8008a24 <HAL_ADC_GetValue>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4619      	mov	r1, r3
 80026b0:	f607 0378 	addw	r3, r7, #2168	; 0x878
 80026b4:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80026b8:	f8d7 2864 	ldr.w	r2, [r7, #2148]	; 0x864
 80026bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		// medida instantânea
		ADC_Select_CH2();
 80026c0:	f004 fd2a 	bl	8007118 <ADC_Select_CH2>
		arr_voltage_neutro_terra[i] = HAL_ADC_GetValue(&hadc1);
 80026c4:	4873      	ldr	r0, [pc, #460]	; (8002894 <atualiza_tensao_fase_terra+0x284>)
 80026c6:	f006 f9ad 	bl	8008a24 <HAL_ADC_GetValue>
 80026ca:	4603      	mov	r3, r0
 80026cc:	4619      	mov	r1, r3
 80026ce:	f607 0378 	addw	r3, r7, #2168	; 0x878
 80026d2:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 80026d6:	f8d7 2864 	ldr.w	r2, [r7, #2148]	; 0x864
 80026da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		target_time = start_sample_time + delay_us;
 80026de:	f8d7 2838 	ldr.w	r2, [r7, #2104]	; 0x838
 80026e2:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80026e6:	4413      	add	r3, r2
 80026e8:	f8c7 3860 	str.w	r3, [r7, #2144]	; 0x860
		// caso o valor seja maior que
		if(target_time > 16665){
 80026ec:	f8d7 3860 	ldr.w	r3, [r7, #2144]	; 0x860
 80026f0:	f244 1219 	movw	r2, #16665	; 0x4119
 80026f4:	4293      	cmp	r3, r2
 80026f6:	dd0c      	ble.n	8002712 <atualiza_tensao_fase_terra+0x102>
			target_time -= 16665;
 80026f8:	f8d7 3860 	ldr.w	r3, [r7, #2144]	; 0x860
 80026fc:	f5a3 4382 	sub.w	r3, r3, #16640	; 0x4100
 8002700:	3b19      	subs	r3, #25
 8002702:	f8c7 3860 	str.w	r3, [r7, #2144]	; 0x860
			while(__HAL_TIM_GET_COUNTER(&htim3) != 0);
 8002706:	bf00      	nop
 8002708:	4b64      	ldr	r3, [pc, #400]	; (800289c <atualiza_tensao_fase_terra+0x28c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1fa      	bne.n	8002708 <atualiza_tensao_fase_terra+0xf8>
		}
		while(__HAL_TIM_GET_COUNTER(&htim3) < target_time);
 8002712:	bf00      	nop
 8002714:	4b61      	ldr	r3, [pc, #388]	; (800289c <atualiza_tensao_fase_terra+0x28c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800271a:	f8d7 3860 	ldr.w	r3, [r7, #2144]	; 0x860
 800271e:	429a      	cmp	r2, r3
 8002720:	d3f8      	bcc.n	8002714 <atualiza_tensao_fase_terra+0x104>
	for (int i=0; i<n_medidas_tensao_fase_terra; i++)
 8002722:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 8002726:	3301      	adds	r3, #1
 8002728:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 800272c:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 8002730:	2bf9      	cmp	r3, #249	; 0xf9
 8002732:	ddac      	ble.n	800268e <atualiza_tensao_fase_terra+0x7e>
#endif
	}

	///////////////////////////////////////////////////////////////////////TRATAMENTO DAS AQUISIÇÕESE ///////////////////////
	// declaração de variáveis local
	int medida_anterior = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	f8c7 3868 	str.w	r3, [r7, #2152]	; 0x868
	int offset = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
	int start_at = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	f8c7 3870 	str.w	r3, [r7, #2160]	; 0x870
	int end_at = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
	int n = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
	double R51 = 100e6;
 8002752:	a34b      	add	r3, pc, #300	; (adr r3, 8002880 <atualiza_tensao_fase_terra+0x270>)
 8002754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002758:	f607 0128 	addw	r1, r7, #2088	; 0x828
 800275c:	e9c1 2300 	strd	r2, r3, [r1]
	double R52 = 100e6;
 8002760:	a347      	add	r3, pc, #284	; (adr r3, 8002880 <atualiza_tensao_fase_terra+0x270>)
 8002762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002766:	f507 6102 	add.w	r1, r7, #2080	; 0x820
 800276a:	e9c1 2300 	strd	r2, r3, [r1]
	double R59 = 2.4e3;
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	4b4b      	ldr	r3, [pc, #300]	; (80028a0 <atualiza_tensao_fase_terra+0x290>)
 8002774:	f607 0118 	addw	r1, r7, #2072	; 0x818
 8002778:	e9c1 2300 	strd	r2, r3, [r1]
	double R57 = 680e3;
 800277c:	a342      	add	r3, pc, #264	; (adr r3, 8002888 <atualiza_tensao_fase_terra+0x278>)
 800277e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002782:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8002786:	e9c1 2300 	strd	r2, r3, [r1]
	double Req = (R51*R52)/(R51+R52);
 800278a:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002792:	f607 0128 	addw	r1, r7, #2088	; 0x828
 8002796:	e9d1 0100 	ldrd	r0, r1, [r1]
 800279a:	f7fd fe9d 	bl	80004d8 <__aeabi_dmul>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4614      	mov	r4, r2
 80027a4:	461d      	mov	r5, r3
 80027a6:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 80027aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ae:	f607 0128 	addw	r1, r7, #2088	; 0x828
 80027b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027b6:	f7fd fcd9 	bl	800016c <__adddf3>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4620      	mov	r0, r4
 80027c0:	4629      	mov	r1, r5
 80027c2:	f7fd ffb3 	bl	800072c <__aeabi_ddiv>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	f607 0108 	addw	r1, r7, #2056	; 0x808
 80027ce:	e9c1 2300 	strd	r2, r3, [r1]
	double Req2 = (R59*Req)/(R59+Req);
 80027d2:	f607 0308 	addw	r3, r7, #2056	; 0x808
 80027d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027da:	f607 0118 	addw	r1, r7, #2072	; 0x818
 80027de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027e2:	f7fd fe79 	bl	80004d8 <__aeabi_dmul>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4614      	mov	r4, r2
 80027ec:	461d      	mov	r5, r3
 80027ee:	f607 0308 	addw	r3, r7, #2056	; 0x808
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	f607 0118 	addw	r1, r7, #2072	; 0x818
 80027fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027fe:	f7fd fcb5 	bl	800016c <__adddf3>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4620      	mov	r0, r4
 8002808:	4629      	mov	r1, r5
 800280a:	f7fd ff8f 	bl	800072c <__aeabi_ddiv>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	f507 6100 	add.w	r1, r7, #2048	; 0x800
 8002816:	e9c1 2300 	strd	r2, r3, [r1]

	// loop para fazer a média de medidas para o offset de tensão (1.65v)
	for (int i=0; i<n_medidas_tensao_fase_terra; i++)
 800281a:	2300      	movs	r3, #0
 800281c:	f8c7 3858 	str.w	r3, [r7, #2136]	; 0x858
 8002820:	e01c      	b.n	800285c <atualiza_tensao_fase_terra+0x24c>
		{
			offset += arr_voltage_fase_terra[i]*3300/4095;
 8002822:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8002826:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800282a:	f8d7 2858 	ldr.w	r2, [r7, #2136]	; 0x858
 800282e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002832:	f640 42e4 	movw	r2, #3300	; 0xce4
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	4a1a      	ldr	r2, [pc, #104]	; (80028a4 <atualiza_tensao_fase_terra+0x294>)
 800283c:	fb82 1203 	smull	r1, r2, r2, r3
 8002840:	441a      	add	r2, r3
 8002842:	12d2      	asrs	r2, r2, #11
 8002844:	17db      	asrs	r3, r3, #31
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	f8d7 286c 	ldr.w	r2, [r7, #2156]	; 0x86c
 800284c:	4413      	add	r3, r2
 800284e:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
	for (int i=0; i<n_medidas_tensao_fase_terra; i++)
 8002852:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 8002856:	3301      	adds	r3, #1
 8002858:	f8c7 3858 	str.w	r3, [r7, #2136]	; 0x858
 800285c:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 8002860:	2bf9      	cmp	r3, #249	; 0xf9
 8002862:	ddde      	ble.n	8002822 <atualiza_tensao_fase_terra+0x212>
		}
		//faz a média
		offset = offset/n_medidas_tensao_fase_terra;
 8002864:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 8002868:	4a0f      	ldr	r2, [pc, #60]	; (80028a8 <atualiza_tensao_fase_terra+0x298>)
 800286a:	fb82 1203 	smull	r1, r2, r2, r3
 800286e:	1112      	asrs	r2, r2, #4
 8002870:	17db      	asrs	r3, r3, #31
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c

	// passa todos os valores para mV e multiplica pelo coeficiente da corrente/tensão
	for(int i=0; i<n_medidas_tensao_fase_terra; i++){
 8002878:	2300      	movs	r3, #0
 800287a:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 800287e:	e0b4      	b.n	80029ea <atualiza_tensao_fase_terra+0x3da>
 8002880:	00000000 	.word	0x00000000
 8002884:	4197d784 	.word	0x4197d784
 8002888:	00000000 	.word	0x00000000
 800288c:	4124c080 	.word	0x4124c080
 8002890:	1f7562c5 	.word	0x1f7562c5
 8002894:	20000310 	.word	0x20000310
 8002898:	20000340 	.word	0x20000340
 800289c:	200004b0 	.word	0x200004b0
 80028a0:	40a2c000 	.word	0x40a2c000
 80028a4:	80080081 	.word	0x80080081
 80028a8:	10624dd3 	.word	0x10624dd3
		// Fator de conversão da tensão medida para tensão da rede é:
		arr_voltage_fase_terra[i] = (arr_voltage_fase_terra[i]*3300/4095 - offset)*((R57+Req2)/(Req2*1000));
 80028ac:	f607 0378 	addw	r3, r7, #2168	; 0x878
 80028b0:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80028b4:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 80028b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028bc:	f640 42e4 	movw	r2, #3300	; 0xce4
 80028c0:	fb02 f303 	mul.w	r3, r2, r3
 80028c4:	4ad7      	ldr	r2, [pc, #860]	; (8002c24 <atualiza_tensao_fase_terra+0x614>)
 80028c6:	fb82 1203 	smull	r1, r2, r2, r3
 80028ca:	441a      	add	r2, r3
 80028cc:	12d2      	asrs	r2, r2, #11
 80028ce:	17db      	asrs	r3, r3, #31
 80028d0:	1ad2      	subs	r2, r2, r3
 80028d2:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fd fd93 	bl	8000404 <__aeabi_i2d>
 80028de:	4604      	mov	r4, r0
 80028e0:	460d      	mov	r5, r1
 80028e2:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 80028e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ea:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 80028ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028f2:	f7fd fc3b 	bl	800016c <__adddf3>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	e9c7 2300 	strd	r2, r3, [r7]
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	4bc9      	ldr	r3, [pc, #804]	; (8002c28 <atualiza_tensao_fase_terra+0x618>)
 8002904:	f507 6100 	add.w	r1, r7, #2048	; 0x800
 8002908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800290c:	f7fd fde4 	bl	80004d8 <__aeabi_dmul>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002918:	f7fd ff08 	bl	800072c <__aeabi_ddiv>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4620      	mov	r0, r4
 8002922:	4629      	mov	r1, r5
 8002924:	f7fd fdd8 	bl	80004d8 <__aeabi_dmul>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4610      	mov	r0, r2
 800292e:	4619      	mov	r1, r3
 8002930:	f7fe f882 	bl	8000a38 <__aeabi_d2iz>
 8002934:	4601      	mov	r1, r0
 8002936:	f607 0378 	addw	r3, r7, #2168	; 0x878
 800293a:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800293e:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8002942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		arr_voltage_neutro_terra[i] = (arr_voltage_neutro_terra[i]*3300/4095 - offset)*((R57+Req2)/(Req2*1000));
 8002946:	f607 0378 	addw	r3, r7, #2168	; 0x878
 800294a:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 800294e:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8002952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002956:	f640 42e4 	movw	r2, #3300	; 0xce4
 800295a:	fb02 f303 	mul.w	r3, r2, r3
 800295e:	4ab1      	ldr	r2, [pc, #708]	; (8002c24 <atualiza_tensao_fase_terra+0x614>)
 8002960:	fb82 1203 	smull	r1, r2, r2, r3
 8002964:	441a      	add	r2, r3
 8002966:	12d2      	asrs	r2, r2, #11
 8002968:	17db      	asrs	r3, r3, #31
 800296a:	1ad2      	subs	r2, r2, r3
 800296c:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	4618      	mov	r0, r3
 8002974:	f7fd fd46 	bl	8000404 <__aeabi_i2d>
 8002978:	4604      	mov	r4, r0
 800297a:	460d      	mov	r5, r1
 800297c:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8002988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800298c:	f7fd fbee 	bl	800016c <__adddf3>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	e9c7 2300 	strd	r2, r3, [r7]
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	4ba2      	ldr	r3, [pc, #648]	; (8002c28 <atualiza_tensao_fase_terra+0x618>)
 800299e:	f507 6100 	add.w	r1, r7, #2048	; 0x800
 80029a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029a6:	f7fd fd97 	bl	80004d8 <__aeabi_dmul>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029b2:	f7fd febb 	bl	800072c <__aeabi_ddiv>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4620      	mov	r0, r4
 80029bc:	4629      	mov	r1, r5
 80029be:	f7fd fd8b 	bl	80004d8 <__aeabi_dmul>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4610      	mov	r0, r2
 80029c8:	4619      	mov	r1, r3
 80029ca:	f7fe f835 	bl	8000a38 <__aeabi_d2iz>
 80029ce:	4601      	mov	r1, r0
 80029d0:	f607 0378 	addw	r3, r7, #2168	; 0x878
 80029d4:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 80029d8:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 80029dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0; i<n_medidas_tensao_fase_terra; i++){
 80029e0:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 80029e4:	3301      	adds	r3, #1
 80029e6:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 80029ea:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 80029ee:	2bf9      	cmp	r3, #249	; 0xf9
 80029f0:	f77f af5c 	ble.w	80028ac <atualiza_tensao_fase_terra+0x29c>
	}
	// faz a medida_anterior ser igual a última medida
	medida_anterior = arr_voltage_fase_terra[n_medidas_tensao_fase_terra-1];
 80029f4:	f607 0378 	addw	r3, r7, #2168	; 0x878
 80029f8:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80029fc:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 8002a00:	f8c7 3868 	str.w	r3, [r7, #2152]	; 0x868

	// varre a array e identifica o primeiro cruzemento por zero para poder filtrar o inicio e o final das medidas
	// garante que todas as medidas estarão em um número de períodos fechado para a tensão
	for(int i=0; i<n_medidas_tensao_fase_terra; i++){
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
 8002a0a:	e05e      	b.n	8002aca <atualiza_tensao_fase_terra+0x4ba>
		if(arr_voltage_fase_terra[i] >= 0 && medida_anterior < 0){
 8002a0c:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8002a10:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8002a14:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 8002a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	db1d      	blt.n	8002a5c <atualiza_tensao_fase_terra+0x44c>
 8002a20:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	da19      	bge.n	8002a5c <atualiza_tensao_fase_terra+0x44c>
			// aconteceu um cruzamento por zero
			n++;
 8002a28:	f8d7 385c 	ldr.w	r3, [r7, #2140]	; 0x85c
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
			if(n==1){
 8002a32:	f8d7 385c 	ldr.w	r3, [r7, #2140]	; 0x85c
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d104      	bne.n	8002a44 <atualiza_tensao_fase_terra+0x434>
				// define o início como a primeira amostras após o primeiro cruzamento por zero
				start_at = i+1;
 8002a3a:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f8c7 3870 	str.w	r3, [r7, #2160]	; 0x870
			}
			if (n==(n_periodos*2)-1){
 8002a44:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	f8d7 285c 	ldr.w	r2, [r7, #2140]	; 0x85c
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d103      	bne.n	8002a5c <atualiza_tensao_fase_terra+0x44c>
				// define a última amostra como a última amostra 1 período a menos do que o que foi medido
				end_at = i;
 8002a54:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8002a58:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
			}
		}
		if(arr_voltage_fase_terra[i] <= 0 && medida_anterior > 0){
 8002a5c:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8002a60:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8002a64:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 8002a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	dc1d      	bgt.n	8002aac <atualiza_tensao_fase_terra+0x49c>
 8002a70:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	dd19      	ble.n	8002aac <atualiza_tensao_fase_terra+0x49c>
			// aconteceu um cruzamento por zero
			n++;
 8002a78:	f8d7 385c 	ldr.w	r3, [r7, #2140]	; 0x85c
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
			if(n==1){
 8002a82:	f8d7 385c 	ldr.w	r3, [r7, #2140]	; 0x85c
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d104      	bne.n	8002a94 <atualiza_tensao_fase_terra+0x484>
				// define o início como a primeira amostras após o primeiro cruzamento por zero
				start_at = i+1;
 8002a8a:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f8c7 3870 	str.w	r3, [r7, #2160]	; 0x870
			}
			if (n==(n_periodos*2)-1){
 8002a94:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	f8d7 285c 	ldr.w	r2, [r7, #2140]	; 0x85c
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d103      	bne.n	8002aac <atualiza_tensao_fase_terra+0x49c>
				// define a última amostra como a última amostra 1 período a menos do que o que foi medido
				end_at = i;
 8002aa4:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8002aa8:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
			}
		}
		// define a medida anterior como a medida atual
		medida_anterior = arr_voltage_fase_terra[i];
 8002aac:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8002ab0:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8002ab4:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 8002ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002abc:	f8c7 3868 	str.w	r3, [r7, #2152]	; 0x868
	for(int i=0; i<n_medidas_tensao_fase_terra; i++){
 8002ac0:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
 8002aca:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8002ace:	2bf9      	cmp	r3, #249	; 0xf9
 8002ad0:	dd9c      	ble.n	8002a0c <atualiza_tensao_fase_terra+0x3fc>
	}
	// declara a array que terá apenas os valores desejados (1 príodo a menos)
	// garante que todas as medidas estarão em um número de períodos fechado para a tensão
	int arr_voltage_fase_terra_filtrado[end_at-start_at];
 8002ad2:	f8d7 2874 	ldr.w	r2, [r7, #2164]	; 0x874
 8002ad6:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8002ada:	1ad1      	subs	r1, r2, r3
 8002adc:	466b      	mov	r3, sp
 8002ade:	461c      	mov	r4, r3
 8002ae0:	1e4b      	subs	r3, r1, #1
 8002ae2:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 8002ae6:	460a      	mov	r2, r1
 8002ae8:	2300      	movs	r3, #0
 8002aea:	613a      	str	r2, [r7, #16]
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8002afa:	4630      	mov	r0, r6
 8002afc:	0143      	lsls	r3, r0, #5
 8002afe:	4628      	mov	r0, r5
 8002b00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b04:	4628      	mov	r0, r5
 8002b06:	0142      	lsls	r2, r0, #5
 8002b08:	460a      	mov	r2, r1
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60ba      	str	r2, [r7, #8]
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8002b1c:	4630      	mov	r0, r6
 8002b1e:	0143      	lsls	r3, r0, #5
 8002b20:	4628      	mov	r0, r5
 8002b22:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b26:	4628      	mov	r0, r5
 8002b28:	0142      	lsls	r2, r0, #5
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	3307      	adds	r3, #7
 8002b30:	08db      	lsrs	r3, r3, #3
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	ebad 0d03 	sub.w	sp, sp, r3
 8002b38:	466b      	mov	r3, sp
 8002b3a:	3303      	adds	r3, #3
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
	int arr_voltage_neutro_terra_filtrado[end_at-start_at];
 8002b44:	f8d7 2874 	ldr.w	r2, [r7, #2164]	; 0x874
 8002b48:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8002b4c:	1ad1      	subs	r1, r2, r3
 8002b4e:	1e4b      	subs	r3, r1, #1
 8002b50:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
 8002b54:	460a      	mov	r2, r1
 8002b56:	2300      	movs	r3, #0
 8002b58:	4692      	mov	sl, r2
 8002b5a:	469b      	mov	fp, r3
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8002b68:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8002b6c:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8002b70:	460a      	mov	r2, r1
 8002b72:	2300      	movs	r3, #0
 8002b74:	4690      	mov	r8, r2
 8002b76:	4699      	mov	r9, r3
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002b84:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002b88:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	3307      	adds	r3, #7
 8002b92:	08db      	lsrs	r3, r3, #3
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	ebad 0d03 	sub.w	sp, sp, r3
 8002b9a:	466b      	mov	r3, sp
 8002b9c:	3303      	adds	r3, #3
 8002b9e:	089b      	lsrs	r3, r3, #2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	f8c7 37f0 	str.w	r3, [r7, #2032]	; 0x7f0
	// define o valor de cada amostra
	for(int i=0;i<(end_at-start_at);i++){
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 8002bac:	e026      	b.n	8002bfc <atualiza_tensao_fase_terra+0x5ec>
		arr_voltage_fase_terra_filtrado[i]=arr_voltage_fase_terra[start_at+i];
 8002bae:	f8d7 2870 	ldr.w	r2, [r7, #2160]	; 0x870
 8002bb2:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8002bb6:	441a      	add	r2, r3
 8002bb8:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8002bbc:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8002bc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bc4:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	; 0x7f8
 8002bc8:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8002bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		arr_voltage_neutro_terra_filtrado[i]=arr_voltage_neutro_terra[start_at+i];
 8002bd0:	f8d7 2870 	ldr.w	r2, [r7, #2160]	; 0x870
 8002bd4:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8002bd8:	441a      	add	r2, r3
 8002bda:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8002bde:	f6a3 035c 	subw	r3, r3, #2140	; 0x85c
 8002be2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002be6:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 8002bea:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8002bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0;i<(end_at-start_at);i++){
 8002bf2:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 8002bfc:	f8d7 2874 	ldr.w	r2, [r7, #2164]	; 0x874
 8002c00:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	dbcf      	blt.n	8002bae <atualiza_tensao_fase_terra+0x59e>
	}
	///////////////////////////////////////////////////////////////////////CÁLCULO RMS //////////////////////////////////////
	// amostra ao quadrado
	int sq_sample = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
	// soma das amostras ao quadrado
	int sum_sqsample = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
	// varre a array para calcular a soma dos valores ao quadrado da tensão da fase
	for(int i=0;i<(end_at-start_at);i++){
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 8002c20:	e020      	b.n	8002c64 <atualiza_tensao_fase_terra+0x654>
 8002c22:	bf00      	nop
 8002c24:	80080081 	.word	0x80080081
 8002c28:	408f4000 	.word	0x408f4000
		sq_sample = arr_voltage_fase_terra_filtrado[i]*arr_voltage_fase_terra_filtrado[i];
 8002c2c:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	; 0x7f8
 8002c30:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8002c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c38:	f8d7 27f8 	ldr.w	r2, [r7, #2040]	; 0x7f8
 8002c3c:	f8d7 1844 	ldr.w	r1, [r7, #2116]	; 0x844
 8002c40:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002c44:	fb02 f303 	mul.w	r3, r2, r3
 8002c48:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
		sum_sqsample += sq_sample;
 8002c4c:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8002c50:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 8002c54:	4413      	add	r3, r2
 8002c56:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
	for(int i=0;i<(end_at-start_at);i++){
 8002c5a:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 8002c64:	f8d7 2874 	ldr.w	r2, [r7, #2164]	; 0x874
 8002c68:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8002c72:	429a      	cmp	r2, r3
 8002c74:	dbda      	blt.n	8002c2c <atualiza_tensao_fase_terra+0x61c>
	}
	// faz a raiz quadrada da média dos valores ao quadrado (cálculo do valor rms, média quadratica)
	if((end_at-start_at) > 0){
 8002c76:	f8d7 2874 	ldr.w	r2, [r7, #2164]	; 0x874
 8002c7a:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	dd1b      	ble.n	8002cbc <atualiza_tensao_fase_terra+0x6ac>
		vfase = sqrt(sum_sqsample/(end_at-start_at));
 8002c84:	f8d7 2874 	ldr.w	r2, [r7, #2164]	; 0x874
 8002c88:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8002c92:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fbb4 	bl	8000404 <__aeabi_i2d>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	f00d fafe 	bl	80102a4 <sqrt>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4610      	mov	r0, r2
 8002cae:	4619      	mov	r1, r3
 8002cb0:	f7fd fec2 	bl	8000a38 <__aeabi_d2iz>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4a31      	ldr	r2, [pc, #196]	; (8002d7c <atualiza_tensao_fase_terra+0x76c>)
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e002      	b.n	8002cc2 <atualiza_tensao_fase_terra+0x6b2>
	}
	else{
		//erro
		vfase = 0;
 8002cbc:	4b2f      	ldr	r3, [pc, #188]	; (8002d7c <atualiza_tensao_fase_terra+0x76c>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
	}
	//reset das variáveis
	sq_sample = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
	sum_sqsample = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
	// varre a array para calcular a soma dos valores ao quadrado da tensão do neutro
	for(int i=0;i<(end_at-start_at);i++){
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
 8002cd4:	e01b      	b.n	8002d0e <atualiza_tensao_fase_terra+0x6fe>
		sq_sample = arr_voltage_neutro_terra_filtrado[i]*arr_voltage_neutro_terra_filtrado[i];
 8002cd6:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 8002cda:	f8d7 2840 	ldr.w	r2, [r7, #2112]	; 0x840
 8002cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce2:	f8d7 27f0 	ldr.w	r2, [r7, #2032]	; 0x7f0
 8002ce6:	f8d7 1840 	ldr.w	r1, [r7, #2112]	; 0x840
 8002cea:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002cee:	fb02 f303 	mul.w	r3, r2, r3
 8002cf2:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
		sum_sqsample += sq_sample;
 8002cf6:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8002cfa:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 8002cfe:	4413      	add	r3, r2
 8002d00:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
	for(int i=0;i<(end_at-start_at);i++){
 8002d04:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8002d08:	3301      	adds	r3, #1
 8002d0a:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
 8002d0e:	f8d7 2874 	ldr.w	r2, [r7, #2164]	; 0x874
 8002d12:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	f8d7 2840 	ldr.w	r2, [r7, #2112]	; 0x840
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	dbda      	blt.n	8002cd6 <atualiza_tensao_fase_terra+0x6c6>
	}
	// faz a raiz quadrada da média dos valores ao quadrado (cálculo do valor rms, média quadratica)
	if((end_at-start_at) > 0){
 8002d20:	f8d7 2874 	ldr.w	r2, [r7, #2164]	; 0x874
 8002d24:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	dd1b      	ble.n	8002d66 <atualiza_tensao_fase_terra+0x756>
		vneutro = sqrt(sum_sqsample/(end_at-start_at));
 8002d2e:	f8d7 2874 	ldr.w	r2, [r7, #2164]	; 0x874
 8002d32:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8002d3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fd fb5f 	bl	8000404 <__aeabi_i2d>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f00d faa9 	bl	80102a4 <sqrt>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4610      	mov	r0, r2
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f7fd fe6d 	bl	8000a38 <__aeabi_d2iz>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <atualiza_tensao_fase_terra+0x770>)
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	e002      	b.n	8002d6c <atualiza_tensao_fase_terra+0x75c>
	}
	else{
		//erro
		vneutro = 0;
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <atualiza_tensao_fase_terra+0x770>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	46a5      	mov	sp, r4
	}
}
 8002d6e:	bf00      	nop
 8002d70:	f607 077c 	addw	r7, r7, #2172	; 0x87c
 8002d74:	46bd      	mov	sp, r7
 8002d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000238 	.word	0x20000238
 8002d80:	20000254 	.word	0x20000254

08002d84 <atualiza_tensao_fase_neutro>:

#define n_medidas_tensao_fase_neutro 500
void atualiza_tensao_fase_neutro(){
 8002d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d88:	f5ad 6d03 	sub.w	sp, sp, #2096	; 0x830
 8002d8c:	af00      	add	r7, sp, #0
	///////////////////////////////////////////////////////////////////////////////AQUISIÇÃO DE MEDIDAS///////////////////////
	// variável que guarda os valores das medidas de tensão instantânea
	int arr_voltage_fase_neutro [n_medidas_tensao_fase_neutro];
	// delay entre cada medida do adc máximo de 65535 us
	int delay_us = 300;
 8002d8e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002d92:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
	// guarda o tempo em us (valor do timer3) do início da medida atual
	int target_time = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
	int start_sample_time = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
	int total_sample_time = (n_medidas_tensao_fase_neutro*delay_us);
 8002da2:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	; 0x7f8
 8002da6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002daa:	fb02 f303 	mul.w	r3, r2, r3
 8002dae:	f8c7 37f0 	str.w	r3, [r7, #2032]	; 0x7f0
	int n_periodos = total_sample_time/16666;
 8002db2:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 8002db6:	4ac9      	ldr	r2, [pc, #804]	; (80030dc <atualiza_tensao_fase_neutro+0x358>)
 8002db8:	fb82 1203 	smull	r1, r2, r2, r3
 8002dbc:	12d2      	asrs	r2, r2, #11
 8002dbe:	17db      	asrs	r3, r3, #31
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
	// inicia o adc 1
	HAL_ADC_Start(&hadc1);
 8002dc6:	48c6      	ldr	r0, [pc, #792]	; (80030e0 <atualiza_tensao_fase_neutro+0x35c>)
 8002dc8:	f005 fc4c 	bl	8008664 <HAL_ADC_Start>
	// seleciona o canal que será medido
	ADC_Select_CH10();
 8002dcc:	f004 fa1c 	bl	8007208 <ADC_Select_CH10>
	// loop para as aquisições de medida de tensão
	for (int i=0; i<n_medidas_tensao_fase_neutro; i++)
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 8002dd6:	e03d      	b.n	8002e54 <atualiza_tensao_fase_neutro+0xd0>
	{
		// aquisição do tempo do inicio da amostra atual
		start_sample_time = __HAL_TIM_GET_COUNTER(&htim3);
 8002dd8:	4bc2      	ldr	r3, [pc, #776]	; (80030e4 <atualiza_tensao_fase_neutro+0x360>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
		// aguarda a converção do adc1 concluir (atrasa o tempo de aquisição)
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002de2:	f04f 31ff 	mov.w	r1, #4294967295
 8002de6:	48be      	ldr	r0, [pc, #760]	; (80030e0 <atualiza_tensao_fase_neutro+0x35c>)
 8002de8:	f005 fd16 	bl	8008818 <HAL_ADC_PollForConversion>
		// medida instantânea
		arr_voltage_fase_neutro[i] = HAL_ADC_GetValue(&hadc1);
 8002dec:	48bc      	ldr	r0, [pc, #752]	; (80030e0 <atualiza_tensao_fase_neutro+0x35c>)
 8002dee:	f005 fe19 	bl	8008a24 <HAL_ADC_GetValue>
 8002df2:	4603      	mov	r3, r0
 8002df4:	4619      	mov	r1, r3
 8002df6:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8002dfa:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 8002dfe:	f8d7 2820 	ldr.w	r2, [r7, #2080]	; 0x820
 8002e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		// calcula o valor do timer para um delay de "delay_us"
		target_time = start_sample_time + delay_us;
 8002e06:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	; 0x7f4
 8002e0a:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	; 0x7f8
 8002e0e:	4413      	add	r3, r2
 8002e10:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
		// caso o valor seja maior que
		if(target_time > 16665){
 8002e14:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8002e18:	f244 1219 	movw	r2, #16665	; 0x4119
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	dd0c      	ble.n	8002e3a <atualiza_tensao_fase_neutro+0xb6>
			target_time -= 16665;
 8002e20:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8002e24:	f5a3 4382 	sub.w	r3, r3, #16640	; 0x4100
 8002e28:	3b19      	subs	r3, #25
 8002e2a:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
			while(__HAL_TIM_GET_COUNTER(&htim3) != 0);
 8002e2e:	bf00      	nop
 8002e30:	4bac      	ldr	r3, [pc, #688]	; (80030e4 <atualiza_tensao_fase_neutro+0x360>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1fa      	bne.n	8002e30 <atualiza_tensao_fase_neutro+0xac>
		}
		while(__HAL_TIM_GET_COUNTER(&htim3) < target_time);
 8002e3a:	bf00      	nop
 8002e3c:	4ba9      	ldr	r3, [pc, #676]	; (80030e4 <atualiza_tensao_fase_neutro+0x360>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e42:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d3f8      	bcc.n	8002e3c <atualiza_tensao_fase_neutro+0xb8>
	for (int i=0; i<n_medidas_tensao_fase_neutro; i++)
 8002e4a:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8002e4e:	3301      	adds	r3, #1
 8002e50:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 8002e54:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8002e58:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e5c:	dbbc      	blt.n	8002dd8 <atualiza_tensao_fase_neutro+0x54>
#endif
	}

	///////////////////////////////////////////////////////////////////////TRATAMENTO DAS AQUISIÇÕESE ///////////////////////
	// declaração de variáveis local
	int medida_anterior = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
	int offset = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
	int start_at = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
	int end_at = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	int n = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	float R71 = 2.4e3;
 8002e7c:	4b9a      	ldr	r3, [pc, #616]	; (80030e8 <atualiza_tensao_fase_neutro+0x364>)
 8002e7e:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
	float R61 = 390e3;
 8002e82:	4b9a      	ldr	r3, [pc, #616]	; (80030ec <atualiza_tensao_fase_neutro+0x368>)
 8002e84:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
	float R62 = 390e3;
 8002e88:	4b98      	ldr	r3, [pc, #608]	; (80030ec <atualiza_tensao_fase_neutro+0x368>)
 8002e8a:	f8c7 37e0 	str.w	r3, [r7, #2016]	; 0x7e0

	// loop para fazer a média de medidas para o offset de tensão (1.65v)
	for (int i=0; i<n_medidas_tensao_fase_neutro; i++)
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
 8002e94:	e01c      	b.n	8002ed0 <atualiza_tensao_fase_neutro+0x14c>
		{
			offset += arr_voltage_fase_neutro[i]*3300/4095;
 8002e96:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8002e9a:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 8002e9e:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 8002ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea6:	f640 42e4 	movw	r2, #3300	; 0xce4
 8002eaa:	fb02 f303 	mul.w	r3, r2, r3
 8002eae:	4a90      	ldr	r2, [pc, #576]	; (80030f0 <atualiza_tensao_fase_neutro+0x36c>)
 8002eb0:	fb82 1203 	smull	r1, r2, r2, r3
 8002eb4:	441a      	add	r2, r3
 8002eb6:	12d2      	asrs	r2, r2, #11
 8002eb8:	17db      	asrs	r3, r3, #31
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	f8d7 2828 	ldr.w	r2, [r7, #2088]	; 0x828
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
	for (int i=0; i<n_medidas_tensao_fase_neutro; i++)
 8002ec6:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
 8002ed0:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8002ed4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ed8:	dbdd      	blt.n	8002e96 <atualiza_tensao_fase_neutro+0x112>
		}
		//faz a média
		offset = offset/n_medidas_tensao_fase_neutro;
 8002eda:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8002ede:	4a85      	ldr	r2, [pc, #532]	; (80030f4 <atualiza_tensao_fase_neutro+0x370>)
 8002ee0:	fb82 1203 	smull	r1, r2, r2, r3
 8002ee4:	1152      	asrs	r2, r2, #5
 8002ee6:	17db      	asrs	r3, r3, #31
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828

	// passa todos os valores para mV e multiplica pelo coeficiente da corrente/tensão
	for(int i=0; i<n_medidas_tensao_fase_neutro; i++){
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8002ef4:	e048      	b.n	8002f88 <atualiza_tensao_fase_neutro+0x204>
		// Fator de conversão da tensão medida para tensão da rede é:
		arr_voltage_fase_neutro[i] = (arr_voltage_fase_neutro[i]*3300/4095 - offset)*((R71+R61+R62)/(R71*1000));
 8002ef6:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8002efa:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 8002efe:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 8002f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f06:	f640 42e4 	movw	r2, #3300	; 0xce4
 8002f0a:	fb02 f303 	mul.w	r3, r2, r3
 8002f0e:	4a78      	ldr	r2, [pc, #480]	; (80030f0 <atualiza_tensao_fase_neutro+0x36c>)
 8002f10:	fb82 1203 	smull	r1, r2, r2, r3
 8002f14:	441a      	add	r2, r3
 8002f16:	12d2      	asrs	r2, r2, #11
 8002f18:	17db      	asrs	r3, r3, #31
 8002f1a:	1ad2      	subs	r2, r2, r3
 8002f1c:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd feda 	bl	8000cdc <__aeabi_i2f>
 8002f28:	4606      	mov	r6, r0
 8002f2a:	f8d7 17e4 	ldr.w	r1, [r7, #2020]	; 0x7e4
 8002f2e:	f8d7 07e8 	ldr.w	r0, [r7, #2024]	; 0x7e8
 8002f32:	f7fd fe1f 	bl	8000b74 <__addsf3>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f8d7 17e0 	ldr.w	r1, [r7, #2016]	; 0x7e0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd fe19 	bl	8000b74 <__addsf3>
 8002f42:	4603      	mov	r3, r0
 8002f44:	469a      	mov	sl, r3
 8002f46:	496c      	ldr	r1, [pc, #432]	; (80030f8 <atualiza_tensao_fase_neutro+0x374>)
 8002f48:	f8d7 07e8 	ldr.w	r0, [r7, #2024]	; 0x7e8
 8002f4c:	f7fd ff1a 	bl	8000d84 <__aeabi_fmul>
 8002f50:	4603      	mov	r3, r0
 8002f52:	4619      	mov	r1, r3
 8002f54:	4650      	mov	r0, sl
 8002f56:	f7fd ffc9 	bl	8000eec <__aeabi_fdiv>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4630      	mov	r0, r6
 8002f60:	f7fd ff10 	bl	8000d84 <__aeabi_fmul>
 8002f64:	4603      	mov	r3, r0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe f8d2 	bl	8001110 <__aeabi_f2iz>
 8002f6c:	4601      	mov	r1, r0
 8002f6e:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8002f72:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 8002f76:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 8002f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0; i<n_medidas_tensao_fase_neutro; i++){
 8002f7e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8002f82:	3301      	adds	r3, #1
 8002f84:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8002f88:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8002f8c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f90:	dbb1      	blt.n	8002ef6 <atualiza_tensao_fase_neutro+0x172>
	}
	// faz a medida_anterior ser igual a última medida
	medida_anterior = arr_voltage_fase_neutro[n_medidas_tensao_fase_neutro-1];
 8002f92:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8002f96:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 8002f9a:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 8002f9e:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824

	// varre a array e identifica o primeiro cruzemento por zero para poder filtrar o inicio e o final das medidas
	// garante que todas as medidas estarão em um número de períodos fechado para a tensão
	for(int i=0; i<n_medidas_tensao_fase_neutro; i++){
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8002fa8:	e05e      	b.n	8003068 <atualiza_tensao_fase_neutro+0x2e4>
		if(arr_voltage_fase_neutro[i] >= 0 && medida_anterior < 0){
 8002faa:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8002fae:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 8002fb2:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8002fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	db1d      	blt.n	8002ffa <atualiza_tensao_fase_neutro+0x276>
 8002fbe:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	da19      	bge.n	8002ffa <atualiza_tensao_fase_neutro+0x276>
			// aconteceu um cruzamento por zero
			n++;
 8002fc6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8002fca:	3301      	adds	r3, #1
 8002fcc:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
			if(n==1){
 8002fd0:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d104      	bne.n	8002fe2 <atualiza_tensao_fase_neutro+0x25e>
				// define o início como a primeira amostras após o primeiro cruzamento por zero
				start_at = i+1;
 8002fd8:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002fdc:	3301      	adds	r3, #1
 8002fde:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
			}
			if (n==(n_periodos*2)-1){
 8002fe2:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d103      	bne.n	8002ffa <atualiza_tensao_fase_neutro+0x276>
				// define a última amostra como a última amostra 1 período a menos do que o que foi medido
				end_at = i;
 8002ff2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002ff6:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
			}
		}
		if(arr_voltage_fase_neutro[i] <= 0 && medida_anterior > 0){
 8002ffa:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8002ffe:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 8003002:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8003006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800300a:	2b00      	cmp	r3, #0
 800300c:	dc1d      	bgt.n	800304a <atualiza_tensao_fase_neutro+0x2c6>
 800300e:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8003012:	2b00      	cmp	r3, #0
 8003014:	dd19      	ble.n	800304a <atualiza_tensao_fase_neutro+0x2c6>
			// aconteceu um cruzamento por zero
			n++;
 8003016:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800301a:	3301      	adds	r3, #1
 800301c:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
			if(n==1){
 8003020:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8003024:	2b01      	cmp	r3, #1
 8003026:	d104      	bne.n	8003032 <atualiza_tensao_fase_neutro+0x2ae>
				// define o início como a primeira amostras após o primeiro cruzamento por zero
				start_at = i+1;
 8003028:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800302c:	3301      	adds	r3, #1
 800302e:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
			}
			if (n==(n_periodos*2)-1){
 8003032:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	3b01      	subs	r3, #1
 800303a:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 800303e:	429a      	cmp	r2, r3
 8003040:	d103      	bne.n	800304a <atualiza_tensao_fase_neutro+0x2c6>
				// define a última amostra como a última amostra 1 período a menos do que o que foi medido
				end_at = i;
 8003042:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8003046:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
			}
		}
		// define a medida anterior como a medida atual
		medida_anterior = arr_voltage_fase_neutro[i];
 800304a:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800304e:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 8003052:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8003056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800305a:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
	for(int i=0; i<n_medidas_tensao_fase_neutro; i++){
 800305e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8003062:	3301      	adds	r3, #1
 8003064:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8003068:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800306c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003070:	db9b      	blt.n	8002faa <atualiza_tensao_fase_neutro+0x226>
	}
	// declara a array que terá apenas os valores desejados (1 príodo a menos)
	// garante que todas as medidas estarão em um número de períodos fechado para a tensão
	int arr_voltage_fase_terra_filtrado[end_at-start_at];
 8003072:	f8d7 2818 	ldr.w	r2, [r7, #2072]	; 0x818
 8003076:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 800307a:	1ad1      	subs	r1, r2, r3
 800307c:	466b      	mov	r3, sp
 800307e:	461e      	mov	r6, r3
 8003080:	1e4b      	subs	r3, r1, #1
 8003082:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8003086:	460a      	mov	r2, r1
 8003088:	2300      	movs	r3, #0
 800308a:	4690      	mov	r8, r2
 800308c:	4699      	mov	r9, r3
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800309a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800309e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80030a2:	460a      	mov	r2, r1
 80030a4:	2300      	movs	r3, #0
 80030a6:	4614      	mov	r4, r2
 80030a8:	461d      	mov	r5, r3
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	016b      	lsls	r3, r5, #5
 80030b4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80030b8:	0162      	lsls	r2, r4, #5
 80030ba:	460b      	mov	r3, r1
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	3307      	adds	r3, #7
 80030c0:	08db      	lsrs	r3, r3, #3
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	ebad 0d03 	sub.w	sp, sp, r3
 80030c8:	466b      	mov	r3, sp
 80030ca:	3303      	adds	r3, #3
 80030cc:	089b      	lsrs	r3, r3, #2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	f8c7 37d8 	str.w	r3, [r7, #2008]	; 0x7d8
	// define o valor de cada amostra
	for(int i=0;i<(end_at-start_at);i++){
 80030d4:	2300      	movs	r3, #0
 80030d6:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 80030da:	e025      	b.n	8003128 <atualiza_tensao_fase_neutro+0x3a4>
 80030dc:	1f7562c5 	.word	0x1f7562c5
 80030e0:	20000310 	.word	0x20000310
 80030e4:	200004b0 	.word	0x200004b0
 80030e8:	45160000 	.word	0x45160000
 80030ec:	48be6e00 	.word	0x48be6e00
 80030f0:	80080081 	.word	0x80080081
 80030f4:	10624dd3 	.word	0x10624dd3
 80030f8:	447a0000 	.word	0x447a0000
		arr_voltage_fase_terra_filtrado[i]=arr_voltage_fase_neutro[start_at+i];
 80030fc:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 8003100:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8003104:	441a      	add	r2, r3
 8003106:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800310a:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 800310e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003112:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8003116:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 800311a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0;i<(end_at-start_at);i++){
 800311e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8003122:	3301      	adds	r3, #1
 8003124:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8003128:	f8d7 2818 	ldr.w	r2, [r7, #2072]	; 0x818
 800312c:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 8003136:	429a      	cmp	r2, r3
 8003138:	dbe0      	blt.n	80030fc <atualiza_tensao_fase_neutro+0x378>
	}
	///////////////////////////////////////////////////////////////////////CÁLCULO RMS //////////////////////////////////////
	// amostra ao quadrado
	int sq_sample = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
	// soma das amostras ao quadrado
	int sum_sqsample = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
	// varre a array para calcular a soma dos valores ao quadrado da tensão da fase
	for(int i=0;i<(end_at-start_at);i++){
 8003146:	2300      	movs	r3, #0
 8003148:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 800314c:	e01b      	b.n	8003186 <atualiza_tensao_fase_neutro+0x402>
		sq_sample = arr_voltage_fase_terra_filtrado[i]*arr_voltage_fase_terra_filtrado[i];
 800314e:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8003152:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	; 0x7fc
 8003156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800315a:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	; 0x7d8
 800315e:	f8d7 17fc 	ldr.w	r1, [r7, #2044]	; 0x7fc
 8003162:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
		sum_sqsample += sq_sample;
 800316e:	f8d7 2800 	ldr.w	r2, [r7, #2048]	; 0x800
 8003172:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8003176:	4413      	add	r3, r2
 8003178:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
	for(int i=0;i<(end_at-start_at);i++){
 800317c:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 8003180:	3301      	adds	r3, #1
 8003182:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 8003186:	f8d7 2818 	ldr.w	r2, [r7, #2072]	; 0x818
 800318a:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	; 0x7fc
 8003194:	429a      	cmp	r2, r3
 8003196:	dbda      	blt.n	800314e <atualiza_tensao_fase_neutro+0x3ca>
	}
	// faz a raiz quadrada da média dos valores ao quadrado (cálculo do valor rms, média quadratica)
	if((end_at-start_at) > 0){
 8003198:	f8d7 2818 	ldr.w	r2, [r7, #2072]	; 0x818
 800319c:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	dd1a      	ble.n	80031dc <atualiza_tensao_fase_neutro+0x458>
		V_fase_neutro = sqrt(sum_sqsample/(end_at-start_at));
 80031a6:	f8d7 2818 	ldr.w	r2, [r7, #2072]	; 0x818
 80031aa:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f8d7 2800 	ldr.w	r2, [r7, #2048]	; 0x800
 80031b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fd f923 	bl	8000404 <__aeabi_i2d>
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4610      	mov	r0, r2
 80031c4:	4619      	mov	r1, r3
 80031c6:	f00d f86d 	bl	80102a4 <sqrt>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4610      	mov	r0, r2
 80031d0:	4619      	mov	r1, r3
 80031d2:	f7fd fc31 	bl	8000a38 <__aeabi_d2iz>
 80031d6:	4603      	mov	r3, r0
 80031d8:	4a04      	ldr	r2, [pc, #16]	; (80031ec <atualiza_tensao_fase_neutro+0x468>)
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	46b5      	mov	sp, r6
	}
	else{
		//erro
	}
}
 80031de:	bf00      	nop
 80031e0:	f507 6703 	add.w	r7, r7, #2096	; 0x830
 80031e4:	46bd      	mov	sp, r7
 80031e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ea:	bf00      	nop
 80031ec:	2000023c 	.word	0x2000023c

080031f0 <atualiza_tensao_fase_neutro_tri>:

void atualiza_tensao_fase_neutro_tri(){
 80031f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f4:	f5ad 5dc0 	sub.w	sp, sp, #6144	; 0x1800
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
	// variável que guarda os valores das medidas de tensão instantânea
	int arr_voltage_fase_neutro [n_medidas_tensao_fase_neutro];
	int arr_voltage_fase2_neutro [n_medidas_tensao_fase_neutro];
	int arr_voltage_fase3_neutro [n_medidas_tensao_fase_neutro];
	// delay entre cada medida do adc máximo de 65535 us
	int delay_us = 300;
 80031fc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003200:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003204:	f102 0208 	add.w	r2, r2, #8
 8003208:	6013      	str	r3, [r2, #0]
	// guarda o tempo em us (valor do timer3) do início da medida atual
	int target_time = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 8003210:	f102 020c 	add.w	r2, r2, #12
 8003214:	6013      	str	r3, [r2, #0]
	int start_sample_time = 0;
 8003216:	2300      	movs	r3, #0
 8003218:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 800321c:	f102 0204 	add.w	r2, r2, #4
 8003220:	6013      	str	r3, [r2, #0]
	int total_sample_time = (n_medidas_tensao_fase_neutro*delay_us);
 8003222:	f507 53be 	add.w	r3, r7, #6080	; 0x17c0
 8003226:	f103 0308 	add.w	r3, r3, #8
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003230:	fb02 f303 	mul.w	r3, r2, r3
 8003234:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003238:	6013      	str	r3, [r2, #0]
	int n_periodos = total_sample_time/16666;
 800323a:	f507 53be 	add.w	r3, r7, #6080	; 0x17c0
 800323e:	6819      	ldr	r1, [r3, #0]
 8003240:	4bc7      	ldr	r3, [pc, #796]	; (8003560 <atualiza_tensao_fase_neutro_tri+0x370>)
 8003242:	fb83 2301 	smull	r2, r3, r3, r1
 8003246:	12da      	asrs	r2, r3, #11
 8003248:	17cb      	asrs	r3, r1, #31
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	f507 52bd 	add.w	r2, r7, #6048	; 0x17a0
 8003250:	f102 021c 	add.w	r2, r2, #28
 8003254:	6013      	str	r3, [r2, #0]
	// inicia o adc 1
	HAL_ADC_Start(&hadc1);
 8003256:	48c3      	ldr	r0, [pc, #780]	; (8003564 <atualiza_tensao_fase_neutro_tri+0x374>)
 8003258:	f005 fa04 	bl	8008664 <HAL_ADC_Start>
	// loop para as aquisições de medida de tensão
	for (int i=0; i<n_medidas_tensao_fase_neutro; i++)
 800325c:	2300      	movs	r3, #0
 800325e:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 8003262:	f102 0210 	add.w	r2, r2, #16
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	e087      	b.n	800337a <atualiza_tensao_fase_neutro_tri+0x18a>
	{
		// aquisição do tempo do inicio da amostra atual
		start_sample_time = __HAL_TIM_GET_COUNTER(&htim3);
 800326a:	4bbf      	ldr	r3, [pc, #764]	; (8003568 <atualiza_tensao_fase_neutro_tri+0x378>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003274:	f102 0204 	add.w	r2, r2, #4
 8003278:	6013      	str	r3, [r2, #0]
		// aguarda a converção do adc1 concluir (atrasa o tempo de aquisição)
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800327a:	f04f 31ff 	mov.w	r1, #4294967295
 800327e:	48b9      	ldr	r0, [pc, #740]	; (8003564 <atualiza_tensao_fase_neutro_tri+0x374>)
 8003280:	f005 faca 	bl	8008818 <HAL_ADC_PollForConversion>
		// seleciona o canal que será medido
		ADC_Select_CH10();
 8003284:	f003 ffc0 	bl	8007208 <ADC_Select_CH10>
		// medida instantânea
		arr_voltage_fase_neutro[i] = HAL_ADC_GetValue(&hadc1);
 8003288:	48b6      	ldr	r0, [pc, #728]	; (8003564 <atualiza_tensao_fase_neutro_tri+0x374>)
 800328a:	f005 fbcb 	bl	8008a24 <HAL_ADC_GetValue>
 800328e:	4603      	mov	r3, r0
 8003290:	4619      	mov	r1, r3
 8003292:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003296:	f103 0310 	add.w	r3, r3, #16
 800329a:	f6a3 024c 	subw	r2, r3, #2124	; 0x84c
 800329e:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 80032a2:	f103 0310 	add.w	r3, r3, #16
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// seleciona o canal que será medido fase 2
		ADC_Select_CH11();
 80032ac:	f003 ffca 	bl	8007244 <ADC_Select_CH11>
		// medida instantânea
		arr_voltage_fase2_neutro[i] = HAL_ADC_GetValue(&hadc1);
 80032b0:	48ac      	ldr	r0, [pc, #688]	; (8003564 <atualiza_tensao_fase_neutro_tri+0x374>)
 80032b2:	f005 fbb7 	bl	8008a24 <HAL_ADC_GetValue>
 80032b6:	4603      	mov	r3, r0
 80032b8:	4619      	mov	r1, r3
 80032ba:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80032be:	461a      	mov	r2, r3
 80032c0:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 80032c4:	f103 0310 	add.w	r3, r3, #16
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	f843 1c1c 	str.w	r1, [r3, #-28]
		// seleciona o canal que será medido fase 3
		ADC_Select_CH12();
 80032d2:	f003 ffd5 	bl	8007280 <ADC_Select_CH12>
		// medida instantânea
		arr_voltage_fase3_neutro[i] = HAL_ADC_GetValue(&hadc1);
 80032d6:	48a3      	ldr	r0, [pc, #652]	; (8003564 <atualiza_tensao_fase_neutro_tri+0x374>)
 80032d8:	f005 fba4 	bl	8008a24 <HAL_ADC_GetValue>
 80032dc:	4603      	mov	r3, r0
 80032de:	4619      	mov	r1, r3
 80032e0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80032e4:	f2a3 72ec 	subw	r2, r3, #2028	; 0x7ec
 80032e8:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 80032ec:	f103 0310 	add.w	r3, r3, #16
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// calcula o valor do timer para um delay de "delay_us"
		target_time = start_sample_time + delay_us;
 80032f6:	f507 53be 	add.w	r3, r7, #6080	; 0x17c0
 80032fa:	f103 0304 	add.w	r3, r3, #4
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	f507 53be 	add.w	r3, r7, #6080	; 0x17c0
 8003304:	f103 0308 	add.w	r3, r3, #8
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4413      	add	r3, r2
 800330c:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 8003310:	f102 020c 	add.w	r2, r2, #12
 8003314:	6013      	str	r3, [r2, #0]
		// caso o valor seja maior que
		if(target_time > 16665){
 8003316:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 800331a:	f103 030c 	add.w	r3, r3, #12
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f244 1219 	movw	r2, #16665	; 0x4119
 8003324:	4293      	cmp	r3, r2
 8003326:	dd12      	ble.n	800334e <atualiza_tensao_fase_neutro_tri+0x15e>
			target_time -= 16665;
 8003328:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 800332c:	f103 030c 	add.w	r3, r3, #12
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f5a3 4382 	sub.w	r3, r3, #16640	; 0x4100
 8003336:	3b19      	subs	r3, #25
 8003338:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 800333c:	f102 020c 	add.w	r2, r2, #12
 8003340:	6013      	str	r3, [r2, #0]
			while(__HAL_TIM_GET_COUNTER(&htim3) != 0);
 8003342:	bf00      	nop
 8003344:	4b88      	ldr	r3, [pc, #544]	; (8003568 <atualiza_tensao_fase_neutro_tri+0x378>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1fa      	bne.n	8003344 <atualiza_tensao_fase_neutro_tri+0x154>
		}
		while(__HAL_TIM_GET_COUNTER(&htim3) < target_time);
 800334e:	bf00      	nop
 8003350:	4b85      	ldr	r3, [pc, #532]	; (8003568 <atualiza_tensao_fase_neutro_tri+0x378>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003356:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 800335a:	f103 030c 	add.w	r3, r3, #12
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d3f5      	bcc.n	8003350 <atualiza_tensao_fase_neutro_tri+0x160>
	for (int i=0; i<n_medidas_tensao_fase_neutro; i++)
 8003364:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 8003368:	f103 0310 	add.w	r3, r3, #16
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3301      	adds	r3, #1
 8003370:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 8003374:	f102 0210 	add.w	r2, r2, #16
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 800337e:	f103 0310 	add.w	r3, r3, #16
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003388:	f6ff af6f 	blt.w	800326a <atualiza_tensao_fase_neutro_tri+0x7a>
#endif
	}

	///////////////////////////////////////////////////////////////////////TRATAMENTO DAS AQUISIÇÕESE ///////////////////////
	// declaração de variáveis local
	int medida_anterior = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 8003392:	f102 0214 	add.w	r2, r2, #20
 8003396:	6013      	str	r3, [r2, #0]
	int offset = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 800339e:	f102 0218 	add.w	r2, r2, #24
 80033a2:	6013      	str	r3, [r2, #0]
	int offset_fase2 = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 80033aa:	f102 021c 	add.w	r2, r2, #28
 80033ae:	6013      	str	r3, [r2, #0]
	int offset_fase3 = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 80033b6:	6013      	str	r3, [r2, #0]
	int start_at = 0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 80033be:	f102 0204 	add.w	r2, r2, #4
 80033c2:	6013      	str	r3, [r2, #0]
	int end_at = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 80033ca:	f102 0208 	add.w	r2, r2, #8
 80033ce:	6013      	str	r3, [r2, #0]
	int n = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 80033d6:	f102 020c 	add.w	r2, r2, #12
 80033da:	6013      	str	r3, [r2, #0]
	float R71 = 2.4e3;
 80033dc:	4b63      	ldr	r3, [pc, #396]	; (800356c <atualiza_tensao_fase_neutro_tri+0x37c>)
 80033de:	f507 52bd 	add.w	r2, r7, #6048	; 0x17a0
 80033e2:	f102 0218 	add.w	r2, r2, #24
 80033e6:	6013      	str	r3, [r2, #0]
	float R61 = 390e3;
 80033e8:	4b61      	ldr	r3, [pc, #388]	; (8003570 <atualiza_tensao_fase_neutro_tri+0x380>)
 80033ea:	f507 52bd 	add.w	r2, r7, #6048	; 0x17a0
 80033ee:	f102 0214 	add.w	r2, r2, #20
 80033f2:	6013      	str	r3, [r2, #0]
	float R62 = 390e3;
 80033f4:	4b5e      	ldr	r3, [pc, #376]	; (8003570 <atualiza_tensao_fase_neutro_tri+0x380>)
 80033f6:	f507 52bd 	add.w	r2, r7, #6048	; 0x17a0
 80033fa:	f102 0210 	add.w	r2, r2, #16
 80033fe:	6013      	str	r3, [r2, #0]

	// loop para fazer a média de medidas para o offset de tensão (1.65v)
	for (int i=0; i<n_medidas_tensao_fase_neutro; i++)
 8003400:	2300      	movs	r3, #0
 8003402:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 8003406:	f102 0208 	add.w	r2, r2, #8
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	e06c      	b.n	80034e8 <atualiza_tensao_fase_neutro_tri+0x2f8>
		{
			offset += arr_voltage_fase_neutro[i]*3300/4095;
 800340e:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003412:	f103 0310 	add.w	r3, r3, #16
 8003416:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 800341a:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 800341e:	f102 0208 	add.w	r2, r2, #8
 8003422:	6812      	ldr	r2, [r2, #0]
 8003424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003428:	f640 42e4 	movw	r2, #3300	; 0xce4
 800342c:	fb03 f202 	mul.w	r2, r3, r2
 8003430:	4b50      	ldr	r3, [pc, #320]	; (8003574 <atualiza_tensao_fase_neutro_tri+0x384>)
 8003432:	fb83 1302 	smull	r1, r3, r3, r2
 8003436:	4413      	add	r3, r2
 8003438:	12d9      	asrs	r1, r3, #11
 800343a:	17d3      	asrs	r3, r2, #31
 800343c:	1acb      	subs	r3, r1, r3
 800343e:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 8003442:	f102 0218 	add.w	r2, r2, #24
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	4413      	add	r3, r2
 800344a:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 800344e:	f102 0218 	add.w	r2, r2, #24
 8003452:	6013      	str	r3, [r2, #0]
			offset_fase2 += arr_voltage_fase2_neutro[i]*3300/4095;
 8003454:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8003458:	461a      	mov	r2, r3
 800345a:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 800345e:	f103 0308 	add.w	r3, r3, #8
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800346c:	f640 42e4 	movw	r2, #3300	; 0xce4
 8003470:	fb03 f202 	mul.w	r2, r3, r2
 8003474:	4b3f      	ldr	r3, [pc, #252]	; (8003574 <atualiza_tensao_fase_neutro_tri+0x384>)
 8003476:	fb83 1302 	smull	r1, r3, r3, r2
 800347a:	4413      	add	r3, r2
 800347c:	12d9      	asrs	r1, r3, #11
 800347e:	17d3      	asrs	r3, r2, #31
 8003480:	1acb      	subs	r3, r1, r3
 8003482:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 8003486:	f102 021c 	add.w	r2, r2, #28
 800348a:	6812      	ldr	r2, [r2, #0]
 800348c:	4413      	add	r3, r2
 800348e:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 8003492:	f102 021c 	add.w	r2, r2, #28
 8003496:	6013      	str	r3, [r2, #0]
			offset_fase3 += arr_voltage_fase3_neutro[i]*3300/4095;
 8003498:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800349c:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 80034a0:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 80034a4:	f102 0208 	add.w	r2, r2, #8
 80034a8:	6812      	ldr	r2, [r2, #0]
 80034aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ae:	f640 42e4 	movw	r2, #3300	; 0xce4
 80034b2:	fb03 f202 	mul.w	r2, r3, r2
 80034b6:	4b2f      	ldr	r3, [pc, #188]	; (8003574 <atualiza_tensao_fase_neutro_tri+0x384>)
 80034b8:	fb83 1302 	smull	r1, r3, r3, r2
 80034bc:	4413      	add	r3, r2
 80034be:	12d9      	asrs	r1, r3, #11
 80034c0:	17d3      	asrs	r3, r2, #31
 80034c2:	1acb      	subs	r3, r1, r3
 80034c4:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 80034c8:	6812      	ldr	r2, [r2, #0]
 80034ca:	4413      	add	r3, r2
 80034cc:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 80034d0:	6013      	str	r3, [r2, #0]
	for (int i=0; i<n_medidas_tensao_fase_neutro; i++)
 80034d2:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 80034d6:	f103 0308 	add.w	r3, r3, #8
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3301      	adds	r3, #1
 80034de:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 80034e2:	f102 0208 	add.w	r2, r2, #8
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 80034ec:	f103 0308 	add.w	r3, r3, #8
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80034f6:	db8a      	blt.n	800340e <atualiza_tensao_fase_neutro_tri+0x21e>
		}
		//faz a média
		offset = offset/n_medidas_tensao_fase_neutro;
 80034f8:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 80034fc:	f103 0318 	add.w	r3, r3, #24
 8003500:	6819      	ldr	r1, [r3, #0]
 8003502:	4b1d      	ldr	r3, [pc, #116]	; (8003578 <atualiza_tensao_fase_neutro_tri+0x388>)
 8003504:	fb83 2301 	smull	r2, r3, r3, r1
 8003508:	115a      	asrs	r2, r3, #5
 800350a:	17cb      	asrs	r3, r1, #31
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 8003512:	f102 0218 	add.w	r2, r2, #24
 8003516:	6013      	str	r3, [r2, #0]
		offset_fase2 = offset_fase2/n_medidas_tensao_fase_neutro;
 8003518:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 800351c:	f103 031c 	add.w	r3, r3, #28
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	4b15      	ldr	r3, [pc, #84]	; (8003578 <atualiza_tensao_fase_neutro_tri+0x388>)
 8003524:	fb83 2301 	smull	r2, r3, r3, r1
 8003528:	115a      	asrs	r2, r3, #5
 800352a:	17cb      	asrs	r3, r1, #31
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 8003532:	f102 021c 	add.w	r2, r2, #28
 8003536:	6013      	str	r3, [r2, #0]
		offset_fase3 = offset_fase3/n_medidas_tensao_fase_neutro;
 8003538:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 800353c:	6819      	ldr	r1, [r3, #0]
 800353e:	4b0e      	ldr	r3, [pc, #56]	; (8003578 <atualiza_tensao_fase_neutro_tri+0x388>)
 8003540:	fb83 2301 	smull	r2, r3, r3, r1
 8003544:	115a      	asrs	r2, r3, #5
 8003546:	17cb      	asrs	r3, r1, #31
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 800354e:	6013      	str	r3, [r2, #0]


	// passa todos os valores para mV e multiplica pelo coeficiente da corrente/tensão
	for(int i=0; i<n_medidas_tensao_fase_neutro; i++){
 8003550:	2300      	movs	r3, #0
 8003552:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 8003556:	f102 0204 	add.w	r2, r2, #4
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	e128      	b.n	80037b0 <atualiza_tensao_fase_neutro_tri+0x5c0>
 800355e:	bf00      	nop
 8003560:	1f7562c5 	.word	0x1f7562c5
 8003564:	20000310 	.word	0x20000310
 8003568:	200004b0 	.word	0x200004b0
 800356c:	45160000 	.word	0x45160000
 8003570:	48be6e00 	.word	0x48be6e00
 8003574:	80080081 	.word	0x80080081
 8003578:	10624dd3 	.word	0x10624dd3
		// Fator de conversão da tensão medida para tensão da rede é:
		arr_voltage_fase_neutro[i] = (arr_voltage_fase_neutro[i]*3300/4095 - offset)*((R71+R61+R62)/(R71*1000));
 800357c:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003580:	f103 0310 	add.w	r3, r3, #16
 8003584:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 8003588:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 800358c:	f102 0204 	add.w	r2, r2, #4
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003596:	f640 42e4 	movw	r2, #3300	; 0xce4
 800359a:	fb03 f202 	mul.w	r2, r3, r2
 800359e:	4b92      	ldr	r3, [pc, #584]	; (80037e8 <atualiza_tensao_fase_neutro_tri+0x5f8>)
 80035a0:	fb83 1302 	smull	r1, r3, r3, r2
 80035a4:	4413      	add	r3, r2
 80035a6:	12d9      	asrs	r1, r3, #11
 80035a8:	17d3      	asrs	r3, r2, #31
 80035aa:	1aca      	subs	r2, r1, r3
 80035ac:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 80035b0:	f103 0318 	add.w	r3, r3, #24
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fd fb8f 	bl	8000cdc <__aeabi_i2f>
 80035be:	4605      	mov	r5, r0
 80035c0:	f507 53bd 	add.w	r3, r7, #6048	; 0x17a0
 80035c4:	f103 0314 	add.w	r3, r3, #20
 80035c8:	6819      	ldr	r1, [r3, #0]
 80035ca:	f507 53bd 	add.w	r3, r7, #6048	; 0x17a0
 80035ce:	f103 0318 	add.w	r3, r3, #24
 80035d2:	6818      	ldr	r0, [r3, #0]
 80035d4:	f7fd face 	bl	8000b74 <__addsf3>
 80035d8:	4603      	mov	r3, r0
 80035da:	f507 52bd 	add.w	r2, r7, #6048	; 0x17a0
 80035de:	f102 0210 	add.w	r2, r2, #16
 80035e2:	6811      	ldr	r1, [r2, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fd fac5 	bl	8000b74 <__addsf3>
 80035ea:	4603      	mov	r3, r0
 80035ec:	461c      	mov	r4, r3
 80035ee:	497f      	ldr	r1, [pc, #508]	; (80037ec <atualiza_tensao_fase_neutro_tri+0x5fc>)
 80035f0:	f507 53bd 	add.w	r3, r7, #6048	; 0x17a0
 80035f4:	f103 0318 	add.w	r3, r3, #24
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	f7fd fbc3 	bl	8000d84 <__aeabi_fmul>
 80035fe:	4603      	mov	r3, r0
 8003600:	4619      	mov	r1, r3
 8003602:	4620      	mov	r0, r4
 8003604:	f7fd fc72 	bl	8000eec <__aeabi_fdiv>
 8003608:	4603      	mov	r3, r0
 800360a:	4619      	mov	r1, r3
 800360c:	4628      	mov	r0, r5
 800360e:	f7fd fbb9 	bl	8000d84 <__aeabi_fmul>
 8003612:	4603      	mov	r3, r0
 8003614:	4618      	mov	r0, r3
 8003616:	f7fd fd7b 	bl	8001110 <__aeabi_f2iz>
 800361a:	4601      	mov	r1, r0
 800361c:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003620:	f103 0310 	add.w	r3, r3, #16
 8003624:	f6a3 024c 	subw	r2, r3, #2124	; 0x84c
 8003628:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 800362c:	f103 0304 	add.w	r3, r3, #4
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		arr_voltage_fase2_neutro[i] = (arr_voltage_fase2_neutro[i]*3300/4095 - offset_fase2)*((R71+R61+R62)/(R71*1000));
 8003636:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800363a:	461a      	mov	r2, r3
 800363c:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 8003640:	f103 0304 	add.w	r3, r3, #4
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800364e:	f640 42e4 	movw	r2, #3300	; 0xce4
 8003652:	fb03 f202 	mul.w	r2, r3, r2
 8003656:	4b64      	ldr	r3, [pc, #400]	; (80037e8 <atualiza_tensao_fase_neutro_tri+0x5f8>)
 8003658:	fb83 1302 	smull	r1, r3, r3, r2
 800365c:	4413      	add	r3, r2
 800365e:	12d9      	asrs	r1, r3, #11
 8003660:	17d3      	asrs	r3, r2, #31
 8003662:	1aca      	subs	r2, r1, r3
 8003664:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 8003668:	f103 031c 	add.w	r3, r3, #28
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	4618      	mov	r0, r3
 8003672:	f7fd fb33 	bl	8000cdc <__aeabi_i2f>
 8003676:	4605      	mov	r5, r0
 8003678:	f507 53bd 	add.w	r3, r7, #6048	; 0x17a0
 800367c:	f103 0314 	add.w	r3, r3, #20
 8003680:	6819      	ldr	r1, [r3, #0]
 8003682:	f507 53bd 	add.w	r3, r7, #6048	; 0x17a0
 8003686:	f103 0318 	add.w	r3, r3, #24
 800368a:	6818      	ldr	r0, [r3, #0]
 800368c:	f7fd fa72 	bl	8000b74 <__addsf3>
 8003690:	4603      	mov	r3, r0
 8003692:	f507 52bd 	add.w	r2, r7, #6048	; 0x17a0
 8003696:	f102 0210 	add.w	r2, r2, #16
 800369a:	6811      	ldr	r1, [r2, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7fd fa69 	bl	8000b74 <__addsf3>
 80036a2:	4603      	mov	r3, r0
 80036a4:	461c      	mov	r4, r3
 80036a6:	4951      	ldr	r1, [pc, #324]	; (80037ec <atualiza_tensao_fase_neutro_tri+0x5fc>)
 80036a8:	f507 53bd 	add.w	r3, r7, #6048	; 0x17a0
 80036ac:	f103 0318 	add.w	r3, r3, #24
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	f7fd fb67 	bl	8000d84 <__aeabi_fmul>
 80036b6:	4603      	mov	r3, r0
 80036b8:	4619      	mov	r1, r3
 80036ba:	4620      	mov	r0, r4
 80036bc:	f7fd fc16 	bl	8000eec <__aeabi_fdiv>
 80036c0:	4603      	mov	r3, r0
 80036c2:	4619      	mov	r1, r3
 80036c4:	4628      	mov	r0, r5
 80036c6:	f7fd fb5d 	bl	8000d84 <__aeabi_fmul>
 80036ca:	4603      	mov	r3, r0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fd fd1f 	bl	8001110 <__aeabi_f2iz>
 80036d2:	4601      	mov	r1, r0
 80036d4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80036d8:	461a      	mov	r2, r3
 80036da:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 80036de:	f103 0304 	add.w	r3, r3, #4
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	f843 1c1c 	str.w	r1, [r3, #-28]
		arr_voltage_fase3_neutro[i] = (arr_voltage_fase3_neutro[i]*3300/4095 - offset_fase3)*((R71+R61+R62)/(R71*1000));
 80036ec:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80036f0:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 80036f4:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 80036f8:	f102 0204 	add.w	r2, r2, #4
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003702:	f640 42e4 	movw	r2, #3300	; 0xce4
 8003706:	fb03 f202 	mul.w	r2, r3, r2
 800370a:	4b37      	ldr	r3, [pc, #220]	; (80037e8 <atualiza_tensao_fase_neutro_tri+0x5f8>)
 800370c:	fb83 1302 	smull	r1, r3, r3, r2
 8003710:	4413      	add	r3, r2
 8003712:	12d9      	asrs	r1, r3, #11
 8003714:	17d3      	asrs	r3, r2, #31
 8003716:	1aca      	subs	r2, r1, r3
 8003718:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	4618      	mov	r0, r3
 8003722:	f7fd fadb 	bl	8000cdc <__aeabi_i2f>
 8003726:	4605      	mov	r5, r0
 8003728:	f507 53bd 	add.w	r3, r7, #6048	; 0x17a0
 800372c:	f103 0314 	add.w	r3, r3, #20
 8003730:	6819      	ldr	r1, [r3, #0]
 8003732:	f507 53bd 	add.w	r3, r7, #6048	; 0x17a0
 8003736:	f103 0318 	add.w	r3, r3, #24
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	f7fd fa1a 	bl	8000b74 <__addsf3>
 8003740:	4603      	mov	r3, r0
 8003742:	f507 52bd 	add.w	r2, r7, #6048	; 0x17a0
 8003746:	f102 0210 	add.w	r2, r2, #16
 800374a:	6811      	ldr	r1, [r2, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f7fd fa11 	bl	8000b74 <__addsf3>
 8003752:	4603      	mov	r3, r0
 8003754:	461c      	mov	r4, r3
 8003756:	4925      	ldr	r1, [pc, #148]	; (80037ec <atualiza_tensao_fase_neutro_tri+0x5fc>)
 8003758:	f507 53bd 	add.w	r3, r7, #6048	; 0x17a0
 800375c:	f103 0318 	add.w	r3, r3, #24
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	f7fd fb0f 	bl	8000d84 <__aeabi_fmul>
 8003766:	4603      	mov	r3, r0
 8003768:	4619      	mov	r1, r3
 800376a:	4620      	mov	r0, r4
 800376c:	f7fd fbbe 	bl	8000eec <__aeabi_fdiv>
 8003770:	4603      	mov	r3, r0
 8003772:	4619      	mov	r1, r3
 8003774:	4628      	mov	r0, r5
 8003776:	f7fd fb05 	bl	8000d84 <__aeabi_fmul>
 800377a:	4603      	mov	r3, r0
 800377c:	4618      	mov	r0, r3
 800377e:	f7fd fcc7 	bl	8001110 <__aeabi_f2iz>
 8003782:	4601      	mov	r1, r0
 8003784:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8003788:	f2a3 72ec 	subw	r2, r3, #2028	; 0x7ec
 800378c:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 8003790:	f103 0304 	add.w	r3, r3, #4
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i<n_medidas_tensao_fase_neutro; i++){
 800379a:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 800379e:	f103 0304 	add.w	r3, r3, #4
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3301      	adds	r3, #1
 80037a6:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 80037aa:	f102 0204 	add.w	r2, r2, #4
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 80037b4:	f103 0304 	add.w	r3, r3, #4
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80037be:	f6ff aedd 	blt.w	800357c <atualiza_tensao_fase_neutro_tri+0x38c>
	}
	// faz a medida_anterior ser igual a última medida
	medida_anterior = arr_voltage_fase_neutro[n_medidas_tensao_fase_neutro-1];
 80037c2:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 80037c6:	f103 0310 	add.w	r3, r3, #16
 80037ca:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 80037ce:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 80037d2:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 80037d6:	f102 0214 	add.w	r2, r2, #20
 80037da:	6013      	str	r3, [r2, #0]

	// varre a array e identifica o primeiro cruzemento por zero para poder filtrar o inicio e o final das medidas
	// garante que todas as medidas estarão em um número de períodos fechado para a tensão
	for(int i=0; i<n_medidas_tensao_fase_neutro; i++){
 80037dc:	2300      	movs	r3, #0
 80037de:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	e0a5      	b.n	8003932 <atualiza_tensao_fase_neutro_tri+0x742>
 80037e6:	bf00      	nop
 80037e8:	80080081 	.word	0x80080081
 80037ec:	447a0000 	.word	0x447a0000
		if(arr_voltage_fase_neutro[i] >= 0 && medida_anterior < 0){
 80037f0:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 80037f4:	f103 0310 	add.w	r3, r3, #16
 80037f8:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 80037fc:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 8003800:	6812      	ldr	r2, [r2, #0]
 8003802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003806:	2b00      	cmp	r3, #0
 8003808:	db37      	blt.n	800387a <atualiza_tensao_fase_neutro_tri+0x68a>
 800380a:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 800380e:	f103 0314 	add.w	r3, r3, #20
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	da30      	bge.n	800387a <atualiza_tensao_fase_neutro_tri+0x68a>
			// aconteceu um cruzamento por zero
			n++;
 8003818:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 800381c:	f103 030c 	add.w	r3, r3, #12
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	3301      	adds	r3, #1
 8003824:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8003828:	f102 020c 	add.w	r2, r2, #12
 800382c:	6013      	str	r3, [r2, #0]
			if(n==1){
 800382e:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003832:	f103 030c 	add.w	r3, r3, #12
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d108      	bne.n	800384e <atualiza_tensao_fase_neutro_tri+0x65e>
				// define o início como a primeira amostras após o primeiro cruzamento por zero
				start_at = i+1;
 800383c:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3301      	adds	r3, #1
 8003844:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8003848:	f102 0204 	add.w	r2, r2, #4
 800384c:	6013      	str	r3, [r2, #0]
			}
			if (n==(n_periodos*2)-1){
 800384e:	f507 53bd 	add.w	r3, r7, #6048	; 0x17a0
 8003852:	f103 031c 	add.w	r3, r3, #28
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	3b01      	subs	r3, #1
 800385c:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8003860:	f102 020c 	add.w	r2, r2, #12
 8003864:	6812      	ldr	r2, [r2, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d107      	bne.n	800387a <atualiza_tensao_fase_neutro_tri+0x68a>
				// define a última amostra como a última amostra 1 período a menos do que o que foi medido
				end_at = i;
 800386a:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8003874:	f102 0208 	add.w	r2, r2, #8
 8003878:	6013      	str	r3, [r2, #0]
			}
		}
		if(arr_voltage_fase_neutro[i] <= 0 && medida_anterior > 0){
 800387a:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 800387e:	f103 0310 	add.w	r3, r3, #16
 8003882:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 8003886:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003890:	2b00      	cmp	r3, #0
 8003892:	dc37      	bgt.n	8003904 <atualiza_tensao_fase_neutro_tri+0x714>
 8003894:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 8003898:	f103 0314 	add.w	r3, r3, #20
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	dd30      	ble.n	8003904 <atualiza_tensao_fase_neutro_tri+0x714>
			// aconteceu um cruzamento por zero
			n++;
 80038a2:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 80038a6:	f103 030c 	add.w	r3, r3, #12
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3301      	adds	r3, #1
 80038ae:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 80038b2:	f102 020c 	add.w	r2, r2, #12
 80038b6:	6013      	str	r3, [r2, #0]
			if(n==1){
 80038b8:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 80038bc:	f103 030c 	add.w	r3, r3, #12
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d108      	bne.n	80038d8 <atualiza_tensao_fase_neutro_tri+0x6e8>
				// define o início como a primeira amostras após o primeiro cruzamento por zero
				start_at = i+1;
 80038c6:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3301      	adds	r3, #1
 80038ce:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 80038d2:	f102 0204 	add.w	r2, r2, #4
 80038d6:	6013      	str	r3, [r2, #0]
			}
			if (n==(n_periodos*2)-1){
 80038d8:	f507 53bd 	add.w	r3, r7, #6048	; 0x17a0
 80038dc:	f103 031c 	add.w	r3, r3, #28
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	3b01      	subs	r3, #1
 80038e6:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 80038ea:	f102 020c 	add.w	r2, r2, #12
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d107      	bne.n	8003904 <atualiza_tensao_fase_neutro_tri+0x714>
				// define a última amostra como a última amostra 1 período a menos do que o que foi medido
				end_at = i;
 80038f4:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 80038fe:	f102 0208 	add.w	r2, r2, #8
 8003902:	6013      	str	r3, [r2, #0]
			}
		}
		// define a medida anterior como a medida atual
		medida_anterior = arr_voltage_fase_neutro[i];
 8003904:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003908:	f103 0310 	add.w	r3, r3, #16
 800390c:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 8003910:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800391a:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 800391e:	f102 0214 	add.w	r2, r2, #20
 8003922:	6013      	str	r3, [r2, #0]
	for(int i=0; i<n_medidas_tensao_fase_neutro; i++){
 8003924:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3301      	adds	r3, #1
 800392c:	f507 52bf 	add.w	r2, r7, #6112	; 0x17e0
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	f507 53bf 	add.w	r3, r7, #6112	; 0x17e0
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800393c:	f6ff af58 	blt.w	80037f0 <atualiza_tensao_fase_neutro_tri+0x600>
	}
	// declara a array que terá apenas os valores desejados (1 príodo a menos)
	// garante que todas as medidas estarão em um número de períodos fechado para a tensão
	int arr_voltage_fase_terra_filtrado[end_at-start_at];
 8003940:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003944:	f103 0308 	add.w	r3, r3, #8
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 800394e:	f103 0304 	add.w	r3, r3, #4
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	1ad1      	subs	r1, r2, r3
 8003956:	466b      	mov	r3, sp
 8003958:	461c      	mov	r4, r3
 800395a:	1e4b      	subs	r3, r1, #1
 800395c:	f507 52bd 	add.w	r2, r7, #6048	; 0x17a0
 8003960:	f102 020c 	add.w	r2, r2, #12
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	460a      	mov	r2, r1
 8003968:	2300      	movs	r3, #0
 800396a:	4690      	mov	r8, r2
 800396c:	4699      	mov	r9, r3
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800397a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800397e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003982:	460a      	mov	r2, r1
 8003984:	2300      	movs	r3, #0
 8003986:	61ba      	str	r2, [r7, #24]
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003996:	4648      	mov	r0, r9
 8003998:	0143      	lsls	r3, r0, #5
 800399a:	4640      	mov	r0, r8
 800399c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039a0:	4640      	mov	r0, r8
 80039a2:	0142      	lsls	r2, r0, #5
 80039a4:	460b      	mov	r3, r1
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	3307      	adds	r3, #7
 80039aa:	08db      	lsrs	r3, r3, #3
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	ebad 0d03 	sub.w	sp, sp, r3
 80039b2:	466b      	mov	r3, sp
 80039b4:	3303      	adds	r3, #3
 80039b6:	089b      	lsrs	r3, r3, #2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	f507 52bd 	add.w	r2, r7, #6048	; 0x17a0
 80039be:	f102 0208 	add.w	r2, r2, #8
 80039c2:	6013      	str	r3, [r2, #0]
	int arr_voltage_fase2_terra_filtrado[end_at-start_at];
 80039c4:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 80039c8:	f103 0308 	add.w	r3, r3, #8
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 80039d2:	f103 0304 	add.w	r3, r3, #4
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	1ad1      	subs	r1, r2, r3
 80039da:	1e4b      	subs	r3, r1, #1
 80039dc:	f507 52bd 	add.w	r2, r7, #6048	; 0x17a0
 80039e0:	f102 0204 	add.w	r2, r2, #4
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	460a      	mov	r2, r1
 80039e8:	2300      	movs	r3, #0
 80039ea:	613a      	str	r2, [r7, #16]
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80039fa:	4648      	mov	r0, r9
 80039fc:	0143      	lsls	r3, r0, #5
 80039fe:	4640      	mov	r0, r8
 8003a00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a04:	4640      	mov	r0, r8
 8003a06:	0142      	lsls	r2, r0, #5
 8003a08:	460a      	mov	r2, r1
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60ba      	str	r2, [r7, #8]
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003a1c:	4648      	mov	r0, r9
 8003a1e:	0143      	lsls	r3, r0, #5
 8003a20:	4640      	mov	r0, r8
 8003a22:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a26:	4640      	mov	r0, r8
 8003a28:	0142      	lsls	r2, r0, #5
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	3307      	adds	r3, #7
 8003a30:	08db      	lsrs	r3, r3, #3
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	ebad 0d03 	sub.w	sp, sp, r3
 8003a38:	466b      	mov	r3, sp
 8003a3a:	3303      	adds	r3, #3
 8003a3c:	089b      	lsrs	r3, r3, #2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	f507 52bd 	add.w	r2, r7, #6048	; 0x17a0
 8003a44:	6013      	str	r3, [r2, #0]
	int arr_voltage_fase3_terra_filtrado[end_at-start_at];
 8003a46:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003a4a:	f103 0308 	add.w	r3, r3, #8
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003a54:	f103 0304 	add.w	r3, r3, #4
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	1ad1      	subs	r1, r2, r3
 8003a5c:	1e4b      	subs	r3, r1, #1
 8003a5e:	f507 52bc 	add.w	r2, r7, #6016	; 0x1780
 8003a62:	f102 021c 	add.w	r2, r2, #28
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	460a      	mov	r2, r1
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	603a      	str	r2, [r7, #0]
 8003a6e:	607b      	str	r3, [r7, #4]
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003a7c:	4648      	mov	r0, r9
 8003a7e:	0143      	lsls	r3, r0, #5
 8003a80:	4640      	mov	r0, r8
 8003a82:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a86:	4640      	mov	r0, r8
 8003a88:	0142      	lsls	r2, r0, #5
 8003a8a:	460a      	mov	r2, r1
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	4692      	mov	sl, r2
 8003a90:	469b      	mov	fp, r3
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8003a9e:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8003aa2:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	3307      	adds	r3, #7
 8003aac:	08db      	lsrs	r3, r3, #3
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	ebad 0d03 	sub.w	sp, sp, r3
 8003ab4:	466b      	mov	r3, sp
 8003ab6:	3303      	adds	r3, #3
 8003ab8:	089b      	lsrs	r3, r3, #2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	f507 52bc 	add.w	r2, r7, #6016	; 0x1780
 8003ac0:	f102 0218 	add.w	r2, r2, #24
 8003ac4:	6013      	str	r3, [r2, #0]
	// define o valor de cada amostra
	for(int i=0;i<(end_at-start_at);i++){
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003acc:	f102 021c 	add.w	r2, r2, #28
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	e061      	b.n	8003b98 <atualiza_tensao_fase_neutro_tri+0x9a8>
		arr_voltage_fase_terra_filtrado[i]=arr_voltage_fase_neutro[start_at+i];
 8003ad4:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003ad8:	f103 0304 	add.w	r3, r3, #4
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	f507 53be 	add.w	r3, r7, #6080	; 0x17c0
 8003ae2:	f103 031c 	add.w	r3, r3, #28
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	441a      	add	r2, r3
 8003aea:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003aee:	f103 0310 	add.w	r3, r3, #16
 8003af2:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 8003af6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003afa:	f507 53bd 	add.w	r3, r7, #6048	; 0x17a0
 8003afe:	f103 0308 	add.w	r3, r3, #8
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003b08:	f102 021c 	add.w	r2, r2, #28
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		arr_voltage_fase2_terra_filtrado[i]=arr_voltage_fase2_neutro[start_at+i];
 8003b12:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003b16:	f103 0304 	add.w	r3, r3, #4
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	f507 53be 	add.w	r3, r7, #6080	; 0x17c0
 8003b20:	f103 031c 	add.w	r3, r3, #28
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4413      	add	r3, r2
 8003b28:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 8003b34:	f507 53bd 	add.w	r3, r7, #6048	; 0x17a0
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003b3e:	f102 021c 	add.w	r2, r2, #28
 8003b42:	6812      	ldr	r2, [r2, #0]
 8003b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		arr_voltage_fase3_terra_filtrado[i]=arr_voltage_fase3_neutro[start_at+i];
 8003b48:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003b4c:	f103 0304 	add.w	r3, r3, #4
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	f507 53be 	add.w	r3, r7, #6080	; 0x17c0
 8003b56:	f103 031c 	add.w	r3, r3, #28
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	441a      	add	r2, r3
 8003b5e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8003b62:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 8003b66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b6a:	f507 53bc 	add.w	r3, r7, #6016	; 0x1780
 8003b6e:	f103 0318 	add.w	r3, r3, #24
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003b78:	f102 021c 	add.w	r2, r2, #28
 8003b7c:	6812      	ldr	r2, [r2, #0]
 8003b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0;i<(end_at-start_at);i++){
 8003b82:	f507 53be 	add.w	r3, r7, #6080	; 0x17c0
 8003b86:	f103 031c 	add.w	r3, r3, #28
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003b92:	f102 021c 	add.w	r2, r2, #28
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003b9c:	f103 0308 	add.w	r3, r3, #8
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003ba6:	f103 0304 	add.w	r3, r3, #4
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003bb2:	f102 021c 	add.w	r2, r2, #28
 8003bb6:	6812      	ldr	r2, [r2, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	db8b      	blt.n	8003ad4 <atualiza_tensao_fase_neutro_tri+0x8e4>
	}
	///////////////////////////////////////////////////////////////////////CÁLCULO RMS //////////////////////////////////////
	// amostra ao quadrado
	int sq_sample = 0;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f507 52bc 	add.w	r2, r7, #6016	; 0x1780
 8003bc2:	f102 0214 	add.w	r2, r2, #20
 8003bc6:	6013      	str	r3, [r2, #0]
	// soma das amostras ao quadrado
	int sum_sqsample = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003bce:	f102 0218 	add.w	r2, r2, #24
 8003bd2:	6013      	str	r3, [r2, #0]
	// varre a array para calcular a soma dos valores ao quadrado da tensão da fase
	for(int i=0;i<(end_at-start_at);i++){
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003bda:	f102 0214 	add.w	r2, r2, #20
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	e039      	b.n	8003c56 <atualiza_tensao_fase_neutro_tri+0xa66>
		sq_sample = arr_voltage_fase_terra_filtrado[i]*arr_voltage_fase_terra_filtrado[i];
 8003be2:	f507 53bd 	add.w	r3, r7, #6048	; 0x17a0
 8003be6:	f103 0308 	add.w	r3, r3, #8
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003bf0:	f102 0214 	add.w	r2, r2, #20
 8003bf4:	6812      	ldr	r2, [r2, #0]
 8003bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bfa:	f507 52bd 	add.w	r2, r7, #6048	; 0x17a0
 8003bfe:	f102 0208 	add.w	r2, r2, #8
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	f507 51be 	add.w	r1, r7, #6080	; 0x17c0
 8003c08:	f101 0114 	add.w	r1, r1, #20
 8003c0c:	6809      	ldr	r1, [r1, #0]
 8003c0e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003c12:	fb02 f303 	mul.w	r3, r2, r3
 8003c16:	f507 52bc 	add.w	r2, r7, #6016	; 0x1780
 8003c1a:	f102 0214 	add.w	r2, r2, #20
 8003c1e:	6013      	str	r3, [r2, #0]
		sum_sqsample += sq_sample;
 8003c20:	f507 53be 	add.w	r3, r7, #6080	; 0x17c0
 8003c24:	f103 0318 	add.w	r3, r3, #24
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	f507 53bc 	add.w	r3, r7, #6016	; 0x1780
 8003c2e:	f103 0314 	add.w	r3, r3, #20
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4413      	add	r3, r2
 8003c36:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003c3a:	f102 0218 	add.w	r2, r2, #24
 8003c3e:	6013      	str	r3, [r2, #0]
	for(int i=0;i<(end_at-start_at);i++){
 8003c40:	f507 53be 	add.w	r3, r7, #6080	; 0x17c0
 8003c44:	f103 0314 	add.w	r3, r3, #20
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003c50:	f102 0214 	add.w	r2, r2, #20
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003c5a:	f103 0308 	add.w	r3, r3, #8
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003c64:	f103 0304 	add.w	r3, r3, #4
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003c70:	f102 0214 	add.w	r2, r2, #20
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	dbb3      	blt.n	8003be2 <atualiza_tensao_fase_neutro_tri+0x9f2>
	}
	// faz a raiz quadrada da média dos valores ao quadrado (cálculo do valor rms, média quadratica)
	if((end_at-start_at) > 0){
 8003c7a:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003c7e:	f103 0308 	add.w	r3, r3, #8
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003c88:	f103 0304 	add.w	r3, r3, #4
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	dd23      	ble.n	8003cdc <atualiza_tensao_fase_neutro_tri+0xaec>
		V_fase_neutro = sqrt(sum_sqsample/(end_at-start_at));
 8003c94:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003c98:	f103 0308 	add.w	r3, r3, #8
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003ca2:	f103 0304 	add.w	r3, r3, #4
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003cae:	f102 0218 	add.w	r2, r2, #24
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fc fba3 	bl	8000404 <__aeabi_i2d>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	f00c faed 	bl	80102a4 <sqrt>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4610      	mov	r0, r2
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	f7fc feb1 	bl	8000a38 <__aeabi_d2iz>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	4aa3      	ldr	r2, [pc, #652]	; (8003f68 <atualiza_tensao_fase_neutro_tri+0xd78>)
 8003cda:	6013      	str	r3, [r2, #0]
	else{
		//erro
	}
	//fase2
	// amostra ao quadrado
	sq_sample = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f507 52bc 	add.w	r2, r7, #6016	; 0x1780
 8003ce2:	f102 0214 	add.w	r2, r2, #20
 8003ce6:	6013      	str	r3, [r2, #0]
	// soma das amostras ao quadrado
	sum_sqsample = 0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003cee:	f102 0218 	add.w	r2, r2, #24
 8003cf2:	6013      	str	r3, [r2, #0]
	// varre a array para calcular a soma dos valores ao quadrado da tensão da fase
	for(int i=0;i<(end_at-start_at);i++){
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003cfa:	f102 0210 	add.w	r2, r2, #16
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	e035      	b.n	8003d6e <atualiza_tensao_fase_neutro_tri+0xb7e>
		sq_sample = arr_voltage_fase2_terra_filtrado[i]*arr_voltage_fase2_terra_filtrado[i];
 8003d02:	f507 53bd 	add.w	r3, r7, #6048	; 0x17a0
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003d0c:	f102 0210 	add.w	r2, r2, #16
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d16:	f507 52bd 	add.w	r2, r7, #6048	; 0x17a0
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	f507 51be 	add.w	r1, r7, #6080	; 0x17c0
 8003d20:	f101 0110 	add.w	r1, r1, #16
 8003d24:	6809      	ldr	r1, [r1, #0]
 8003d26:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	f507 52bc 	add.w	r2, r7, #6016	; 0x1780
 8003d32:	f102 0214 	add.w	r2, r2, #20
 8003d36:	6013      	str	r3, [r2, #0]
		sum_sqsample += sq_sample;
 8003d38:	f507 53be 	add.w	r3, r7, #6080	; 0x17c0
 8003d3c:	f103 0318 	add.w	r3, r3, #24
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	f507 53bc 	add.w	r3, r7, #6016	; 0x1780
 8003d46:	f103 0314 	add.w	r3, r3, #20
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003d52:	f102 0218 	add.w	r2, r2, #24
 8003d56:	6013      	str	r3, [r2, #0]
	for(int i=0;i<(end_at-start_at);i++){
 8003d58:	f507 53be 	add.w	r3, r7, #6080	; 0x17c0
 8003d5c:	f103 0310 	add.w	r3, r3, #16
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3301      	adds	r3, #1
 8003d64:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003d68:	f102 0210 	add.w	r2, r2, #16
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003d72:	f103 0308 	add.w	r3, r3, #8
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003d7c:	f103 0304 	add.w	r3, r3, #4
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003d88:	f102 0210 	add.w	r2, r2, #16
 8003d8c:	6812      	ldr	r2, [r2, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	dbb7      	blt.n	8003d02 <atualiza_tensao_fase_neutro_tri+0xb12>
	}
	// faz a raiz quadrada da média dos valores ao quadrado (cálculo do valor rms, média quadratica)
	if((end_at-start_at) > 0){
 8003d92:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003d96:	f103 0308 	add.w	r3, r3, #8
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003da0:	f103 0304 	add.w	r3, r3, #4
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	dd23      	ble.n	8003df4 <atualiza_tensao_fase_neutro_tri+0xc04>
		V_fase2_neutro = sqrt(sum_sqsample/(end_at-start_at));
 8003dac:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003db0:	f103 0308 	add.w	r3, r3, #8
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003dba:	f103 0304 	add.w	r3, r3, #4
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003dc6:	f102 0218 	add.w	r2, r2, #24
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fc fb17 	bl	8000404 <__aeabi_i2d>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4610      	mov	r0, r2
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f00c fa61 	bl	80102a4 <sqrt>
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	4610      	mov	r0, r2
 8003de8:	4619      	mov	r1, r3
 8003dea:	f7fc fe25 	bl	8000a38 <__aeabi_d2iz>
 8003dee:	4603      	mov	r3, r0
 8003df0:	4a5e      	ldr	r2, [pc, #376]	; (8003f6c <atualiza_tensao_fase_neutro_tri+0xd7c>)
 8003df2:	6013      	str	r3, [r2, #0]
	else{
		//erro
	}
	//fase3
	// amostra ao quadrado
	sq_sample = 0;
 8003df4:	2300      	movs	r3, #0
 8003df6:	f507 52bc 	add.w	r2, r7, #6016	; 0x1780
 8003dfa:	f102 0214 	add.w	r2, r2, #20
 8003dfe:	6013      	str	r3, [r2, #0]
	// soma das amostras ao quadrado
	sum_sqsample = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003e06:	f102 0218 	add.w	r2, r2, #24
 8003e0a:	6013      	str	r3, [r2, #0]
	// varre a array para calcular a soma dos valores ao quadrado da tensão da fase
	for(int i=0;i<(end_at-start_at);i++){
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003e12:	f102 020c 	add.w	r2, r2, #12
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	e039      	b.n	8003e8e <atualiza_tensao_fase_neutro_tri+0xc9e>
		sq_sample = arr_voltage_fase3_terra_filtrado[i]*arr_voltage_fase3_terra_filtrado[i];
 8003e1a:	f507 53bc 	add.w	r3, r7, #6016	; 0x1780
 8003e1e:	f103 0318 	add.w	r3, r3, #24
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003e28:	f102 020c 	add.w	r2, r2, #12
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e32:	f507 52bc 	add.w	r2, r7, #6016	; 0x1780
 8003e36:	f102 0218 	add.w	r2, r2, #24
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	f507 51be 	add.w	r1, r7, #6080	; 0x17c0
 8003e40:	f101 010c 	add.w	r1, r1, #12
 8003e44:	6809      	ldr	r1, [r1, #0]
 8003e46:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003e4a:	fb02 f303 	mul.w	r3, r2, r3
 8003e4e:	f507 52bc 	add.w	r2, r7, #6016	; 0x1780
 8003e52:	f102 0214 	add.w	r2, r2, #20
 8003e56:	6013      	str	r3, [r2, #0]
		sum_sqsample += sq_sample;
 8003e58:	f507 53be 	add.w	r3, r7, #6080	; 0x17c0
 8003e5c:	f103 0318 	add.w	r3, r3, #24
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	f507 53bc 	add.w	r3, r7, #6016	; 0x1780
 8003e66:	f103 0314 	add.w	r3, r3, #20
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003e72:	f102 0218 	add.w	r2, r2, #24
 8003e76:	6013      	str	r3, [r2, #0]
	for(int i=0;i<(end_at-start_at);i++){
 8003e78:	f507 53be 	add.w	r3, r7, #6080	; 0x17c0
 8003e7c:	f103 030c 	add.w	r3, r3, #12
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3301      	adds	r3, #1
 8003e84:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003e88:	f102 020c 	add.w	r2, r2, #12
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003e92:	f103 0308 	add.w	r3, r3, #8
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003e9c:	f103 0304 	add.w	r3, r3, #4
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003ea8:	f102 020c 	add.w	r2, r2, #12
 8003eac:	6812      	ldr	r2, [r2, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	dbb3      	blt.n	8003e1a <atualiza_tensao_fase_neutro_tri+0xc2a>
	}
	// faz a raiz quadrada da média dos valores ao quadrado (cálculo do valor rms, média quadratica)
	if((end_at-start_at) > 0){
 8003eb2:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003eb6:	f103 0308 	add.w	r3, r3, #8
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003ec0:	f103 0304 	add.w	r3, r3, #4
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	dd23      	ble.n	8003f14 <atualiza_tensao_fase_neutro_tri+0xd24>
		V_fase3_neutro = sqrt(sum_sqsample/(end_at-start_at));
 8003ecc:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003ed0:	f103 0308 	add.w	r3, r3, #8
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8003eda:	f103 0304 	add.w	r3, r3, #4
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f507 52be 	add.w	r2, r7, #6080	; 0x17c0
 8003ee6:	f102 0218 	add.w	r2, r2, #24
 8003eea:	6812      	ldr	r2, [r2, #0]
 8003eec:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fc fa87 	bl	8000404 <__aeabi_i2d>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4610      	mov	r0, r2
 8003efc:	4619      	mov	r1, r3
 8003efe:	f00c f9d1 	bl	80102a4 <sqrt>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4610      	mov	r0, r2
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f7fc fd95 	bl	8000a38 <__aeabi_d2iz>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4a17      	ldr	r2, [pc, #92]	; (8003f70 <atualiza_tensao_fase_neutro_tri+0xd80>)
 8003f12:	6013      	str	r3, [r2, #0]
	}
	else{
		//erro
	}
	//condição para determinar se fase 1 está presente
	if(V_fase_neutro > tensao_fase_minimo){
 8003f14:	4b14      	ldr	r3, [pc, #80]	; (8003f68 <atualiza_tensao_fase_neutro_tri+0xd78>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b32      	cmp	r3, #50	; 0x32
 8003f1a:	dd03      	ble.n	8003f24 <atualiza_tensao_fase_neutro_tri+0xd34>
		fase1 = 1;
 8003f1c:	4b15      	ldr	r3, [pc, #84]	; (8003f74 <atualiza_tensao_fase_neutro_tri+0xd84>)
 8003f1e:	2201      	movs	r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	e002      	b.n	8003f2a <atualiza_tensao_fase_neutro_tri+0xd3a>
	}else{
		fase1 = 0;
 8003f24:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <atualiza_tensao_fase_neutro_tri+0xd84>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
	}
	//condição para determinar se fase 2 está presente
	if(V_fase2_neutro > tensao_fase_minimo){
 8003f2a:	4b10      	ldr	r3, [pc, #64]	; (8003f6c <atualiza_tensao_fase_neutro_tri+0xd7c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b32      	cmp	r3, #50	; 0x32
 8003f30:	dd03      	ble.n	8003f3a <atualiza_tensao_fase_neutro_tri+0xd4a>
		fase2 = 1;
 8003f32:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <atualiza_tensao_fase_neutro_tri+0xd88>)
 8003f34:	2201      	movs	r2, #1
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	e002      	b.n	8003f40 <atualiza_tensao_fase_neutro_tri+0xd50>
	}else{
		fase2 = 0;
 8003f3a:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <atualiza_tensao_fase_neutro_tri+0xd88>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
	}
	//condição para determinar se fase 3 está presente
	if(V_fase3_neutro > tensao_fase_minimo){
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <atualiza_tensao_fase_neutro_tri+0xd80>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b32      	cmp	r3, #50	; 0x32
 8003f46:	dd03      	ble.n	8003f50 <atualiza_tensao_fase_neutro_tri+0xd60>
		fase3 = 1;
 8003f48:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <atualiza_tensao_fase_neutro_tri+0xd8c>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	e002      	b.n	8003f56 <atualiza_tensao_fase_neutro_tri+0xd66>
	}else{
		fase3 = 0;
 8003f50:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <atualiza_tensao_fase_neutro_tri+0xd8c>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	46a5      	mov	sp, r4
	}
}
 8003f58:	bf00      	nop
 8003f5a:	f507 57c0 	add.w	r7, r7, #6144	; 0x1800
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f66:	bf00      	nop
 8003f68:	2000023c 	.word	0x2000023c
 8003f6c:	20000240 	.word	0x20000240
 8003f70:	20000244 	.word	0x20000244
 8003f74:	20000248 	.word	0x20000248
 8003f78:	2000024c 	.word	0x2000024c
 8003f7c:	20000250 	.word	0x20000250

08003f80 <ativarele>:

int time = 0;
void ativarele(){
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
	int start_time = HAL_GetTick();
 8003f86:	f004 fa67 	bl	8008458 <HAL_GetTick>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	60fb      	str	r3, [r7, #12]
	int zerocrossing_flag;

	if(Trifasico == 0){
 8003f8e:	4baa      	ldr	r3, [pc, #680]	; (8004238 <ativarele+0x2b8>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d121      	bne.n	8003fda <ativarele+0x5a>
		//detecta o estado atual do zerocrossing fase 1
		zerocrossing_flag = HAL_GPIO_ReadPin(ZC1_GPIO_Port, ZC1_Pin);
 8003f96:	2101      	movs	r1, #1
 8003f98:	48a8      	ldr	r0, [pc, #672]	; (800423c <ativarele+0x2bc>)
 8003f9a:	f005 fefb 	bl	8009d94 <HAL_GPIO_ReadPin>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	60bb      	str	r3, [r7, #8]
		//espera o zerocrossing ocorrer
		while(zerocrossing_flag == HAL_GPIO_ReadPin(ZC1_GPIO_Port, ZC1_Pin) && (HAL_GetTick()-start_time) < 50);
 8003fa2:	bf00      	nop
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	48a5      	ldr	r0, [pc, #660]	; (800423c <ativarele+0x2bc>)
 8003fa8:	f005 fef4 	bl	8009d94 <HAL_GPIO_ReadPin>
 8003fac:	4603      	mov	r3, r0
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d106      	bne.n	8003fc4 <ativarele+0x44>
 8003fb6:	f004 fa4f 	bl	8008458 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b31      	cmp	r3, #49	; 0x31
 8003fc2:	d9ef      	bls.n	8003fa4 <ativarele+0x24>
		//ativa relé da fase 1
		HAL_GPIO_WritePin(RELE_F1_GPIO_Port, RELE_F1_Pin, 1);
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	2108      	movs	r1, #8
 8003fc8:	489d      	ldr	r0, [pc, #628]	; (8004240 <ativarele+0x2c0>)
 8003fca:	f005 fefa 	bl	8009dc2 <HAL_GPIO_WritePin>
		//ativa relé do Neutro
		HAL_GPIO_WritePin(RELE_N_GPIO_Port, RELE_N_Pin, 1);
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003fd4:	489b      	ldr	r0, [pc, #620]	; (8004244 <ativarele+0x2c4>)
 8003fd6:	f005 fef4 	bl	8009dc2 <HAL_GPIO_WritePin>
	}

	if(Trifasico == 1 && segundo_zerocrossing == 2){
 8003fda:	4b97      	ldr	r3, [pc, #604]	; (8004238 <ativarele+0x2b8>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	f040 8095 	bne.w	800410e <ativarele+0x18e>
 8003fe4:	4b98      	ldr	r3, [pc, #608]	; (8004248 <ativarele+0x2c8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	f040 8090 	bne.w	800410e <ativarele+0x18e>
		char falg_fase1_ativada = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	71fb      	strb	r3, [r7, #7]
		char flag_fase2_ativada = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	71bb      	strb	r3, [r7, #6]
		char flag_fase3_ativada = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	717b      	strb	r3, [r7, #5]
		char flag_neutro_ativado = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	713b      	strb	r3, [r7, #4]
		int target_time = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]

		//adiquire o tempo para o timeout do zerocrossing fase 1
		start_time = HAL_GetTick();
 8004002:	f004 fa29 	bl	8008458 <HAL_GetTick>
 8004006:	4603      	mov	r3, r0
 8004008:	60fb      	str	r3, [r7, #12]
		//detecta o estado atual do zerocrossing fase 1
		zerocrossing_flag = HAL_GPIO_ReadPin(ZC1_GPIO_Port, ZC1_Pin);
 800400a:	2101      	movs	r1, #1
 800400c:	488b      	ldr	r0, [pc, #556]	; (800423c <ativarele+0x2bc>)
 800400e:	f005 fec1 	bl	8009d94 <HAL_GPIO_ReadPin>
 8004012:	4603      	mov	r3, r0
 8004014:	60bb      	str	r3, [r7, #8]
		//espera o zerocrossing ocorrer
		while(zerocrossing_flag == HAL_GPIO_ReadPin(ZC1_GPIO_Port, ZC1_Pin) && (HAL_GetTick()-start_time) < 50);
 8004016:	bf00      	nop
 8004018:	2101      	movs	r1, #1
 800401a:	4888      	ldr	r0, [pc, #544]	; (800423c <ativarele+0x2bc>)
 800401c:	f005 feba 	bl	8009d94 <HAL_GPIO_ReadPin>
 8004020:	4603      	mov	r3, r0
 8004022:	461a      	mov	r2, r3
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4293      	cmp	r3, r2
 8004028:	d106      	bne.n	8004038 <ativarele+0xb8>
 800402a:	f004 fa15 	bl	8008458 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b31      	cmp	r3, #49	; 0x31
 8004036:	d9ef      	bls.n	8004018 <ativarele+0x98>
		//adiquire o valor de contagem do timer 3
		start_time = __HAL_TIM_GET_COUNTER(&htim3);
 8004038:	4b84      	ldr	r3, [pc, #528]	; (800424c <ativarele+0x2cc>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	60fb      	str	r3, [r7, #12]
		//soma a contagem do timer 3 com o delay de 2.777 ms
		target_time = start_time + 2777;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f603 23d9 	addw	r3, r3, #2777	; 0xad9
 8004046:	617b      	str	r3, [r7, #20]
		//ativa relé da fase 1
		HAL_GPIO_WritePin(RELE_F1_GPIO_Port, RELE_F1_Pin, 1);
 8004048:	2201      	movs	r2, #1
 800404a:	2108      	movs	r1, #8
 800404c:	487c      	ldr	r0, [pc, #496]	; (8004240 <ativarele+0x2c0>)
 800404e:	f005 feb8 	bl	8009dc2 <HAL_GPIO_WritePin>
		//ativa a flag da fase 1 ativada
		falg_fase1_ativada = 1;
 8004052:	2301      	movs	r3, #1
 8004054:	71fb      	strb	r3, [r7, #7]
		//ativa relé do Neutro
		HAL_GPIO_WritePin(RELE_N_GPIO_Port, RELE_N_Pin, 1);
 8004056:	2201      	movs	r2, #1
 8004058:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800405c:	4879      	ldr	r0, [pc, #484]	; (8004244 <ativarele+0x2c4>)
 800405e:	f005 feb0 	bl	8009dc2 <HAL_GPIO_WritePin>
		//ativa a flag de neutro ativado
		flag_neutro_ativado = 1;
 8004062:	2301      	movs	r3, #1
 8004064:	713b      	strb	r3, [r7, #4]
		//condição para delay utilizando o timer 3
		if(target_time > 16665){
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f244 1219 	movw	r2, #16665	; 0x4119
 800406c:	4293      	cmp	r3, r2
 800406e:	dd0a      	ble.n	8004086 <ativarele+0x106>
			target_time -= 16665;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f5a3 4382 	sub.w	r3, r3, #16640	; 0x4100
 8004076:	3b19      	subs	r3, #25
 8004078:	617b      	str	r3, [r7, #20]
			//espera até a contagem do timer 3 chegar a zero
			while(__HAL_TIM_GET_COUNTER(&htim3) != 0);
 800407a:	bf00      	nop
 800407c:	4b73      	ldr	r3, [pc, #460]	; (800424c <ativarele+0x2cc>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1fa      	bne.n	800407c <ativarele+0xfc>
		}
		//espera até a contagem do timer 3 chegar ao valor de target_tmie
		while(__HAL_TIM_GET_COUNTER(&htim3) < target_time);
 8004086:	bf00      	nop
 8004088:	4b70      	ldr	r3, [pc, #448]	; (800424c <ativarele+0x2cc>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	429a      	cmp	r2, r3
 8004092:	d3f9      	bcc.n	8004088 <ativarele+0x108>
		//adiquire o valor de contagem do timer 3
		start_time = __HAL_TIM_GET_COUNTER(&htim3);
 8004094:	4b6d      	ldr	r3, [pc, #436]	; (800424c <ativarele+0x2cc>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	60fb      	str	r3, [r7, #12]
		//soma a contagem do timer 3 com o delay de 2.777 ms
		target_time = start_time + 2777;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f603 23d9 	addw	r3, r3, #2777	; 0xad9
 80040a2:	617b      	str	r3, [r7, #20]
		//ativa relé da fase 2
		HAL_GPIO_WritePin(RELE_F2_GPIO_Port, RELE_F2_Pin, 1);
 80040a4:	2201      	movs	r2, #1
 80040a6:	2104      	movs	r1, #4
 80040a8:	4869      	ldr	r0, [pc, #420]	; (8004250 <ativarele+0x2d0>)
 80040aa:	f005 fe8a 	bl	8009dc2 <HAL_GPIO_WritePin>
		//ativa a flag de fase 2 ativada
		flag_fase2_ativada = 1;
 80040ae:	2301      	movs	r3, #1
 80040b0:	71bb      	strb	r3, [r7, #6]
		//condição para delay utilizando o timer 3
		if(target_time > 16665){
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f244 1219 	movw	r2, #16665	; 0x4119
 80040b8:	4293      	cmp	r3, r2
 80040ba:	dd0a      	ble.n	80040d2 <ativarele+0x152>
			target_time -= 16665;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f5a3 4382 	sub.w	r3, r3, #16640	; 0x4100
 80040c2:	3b19      	subs	r3, #25
 80040c4:	617b      	str	r3, [r7, #20]
			//espera até a contagem do timer 3 chegar a zero
			while(__HAL_TIM_GET_COUNTER(&htim3) != 0);
 80040c6:	bf00      	nop
 80040c8:	4b60      	ldr	r3, [pc, #384]	; (800424c <ativarele+0x2cc>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1fa      	bne.n	80040c8 <ativarele+0x148>
		}
		//espera até a contagem do timer 3 chegar ao valor de target_tmie
		while(__HAL_TIM_GET_COUNTER(&htim3) < target_time);
 80040d2:	bf00      	nop
 80040d4:	4b5d      	ldr	r3, [pc, #372]	; (800424c <ativarele+0x2cc>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d3f9      	bcc.n	80040d4 <ativarele+0x154>
		//ativa relé da fase 3
		HAL_GPIO_WritePin(RELE_F3_GPIO_Port, RELE_F3_Pin, 1);
 80040e0:	2201      	movs	r2, #1
 80040e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040e6:	4857      	ldr	r0, [pc, #348]	; (8004244 <ativarele+0x2c4>)
 80040e8:	f005 fe6b 	bl	8009dc2 <HAL_GPIO_WritePin>
		//ativa a flag de fase 3 ativada
		flag_fase3_ativada = 1;
 80040ec:	2301      	movs	r3, #1
 80040ee:	717b      	strb	r3, [r7, #5]
		//caso alguma fase n tenha sido ativada acontece um erro
		if(falg_fase1_ativada == 0 || flag_fase2_ativada == 0 || flag_fase3_ativada == 0 || flag_neutro_ativado == 0){
 80040f0:	79fb      	ldrb	r3, [r7, #7]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <ativarele+0x188>
 80040f6:	79bb      	ldrb	r3, [r7, #6]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <ativarele+0x188>
 80040fc:	797b      	ldrb	r3, [r7, #5]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <ativarele+0x188>
 8004102:	793b      	ldrb	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d102      	bne.n	800410e <ativarele+0x18e>
			//flag_timeout = 1;
			hold_state_erro_ativarele = 1;
 8004108:	4b52      	ldr	r3, [pc, #328]	; (8004254 <ativarele+0x2d4>)
 800410a:	2201      	movs	r2, #1
 800410c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(Trifasico == 1 && segundo_zerocrossing == 3){
 800410e:	4b4a      	ldr	r3, [pc, #296]	; (8004238 <ativarele+0x2b8>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	f040 80a6 	bne.w	8004264 <ativarele+0x2e4>
 8004118:	4b4b      	ldr	r3, [pc, #300]	; (8004248 <ativarele+0x2c8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b03      	cmp	r3, #3
 800411e:	f040 80a1 	bne.w	8004264 <ativarele+0x2e4>
		char falg_fase1_ativada = 0;
 8004122:	2300      	movs	r3, #0
 8004124:	70fb      	strb	r3, [r7, #3]
		char flag_fase2_ativada = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	70bb      	strb	r3, [r7, #2]
		char flag_fase3_ativada = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	707b      	strb	r3, [r7, #1]
		char flag_neutro_ativado = 0;
 800412e:	2300      	movs	r3, #0
 8004130:	703b      	strb	r3, [r7, #0]
		int target_time = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	613b      	str	r3, [r7, #16]

		//adiquire o tempo para o timeout do zerocrossing fase 1
		start_time = HAL_GetTick();
 8004136:	f004 f98f 	bl	8008458 <HAL_GetTick>
 800413a:	4603      	mov	r3, r0
 800413c:	60fb      	str	r3, [r7, #12]
		//detecta o estado atual do zerocrossing fase 1
		zerocrossing_flag = HAL_GPIO_ReadPin(ZC1_GPIO_Port, ZC1_Pin);
 800413e:	2101      	movs	r1, #1
 8004140:	483e      	ldr	r0, [pc, #248]	; (800423c <ativarele+0x2bc>)
 8004142:	f005 fe27 	bl	8009d94 <HAL_GPIO_ReadPin>
 8004146:	4603      	mov	r3, r0
 8004148:	60bb      	str	r3, [r7, #8]
		//espera o zerocrossing ocorrer
		while(zerocrossing_flag == HAL_GPIO_ReadPin(ZC1_GPIO_Port, ZC1_Pin) && (HAL_GetTick()-start_time) < 50);
 800414a:	bf00      	nop
 800414c:	2101      	movs	r1, #1
 800414e:	483b      	ldr	r0, [pc, #236]	; (800423c <ativarele+0x2bc>)
 8004150:	f005 fe20 	bl	8009d94 <HAL_GPIO_ReadPin>
 8004154:	4603      	mov	r3, r0
 8004156:	461a      	mov	r2, r3
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4293      	cmp	r3, r2
 800415c:	d106      	bne.n	800416c <ativarele+0x1ec>
 800415e:	f004 f97b 	bl	8008458 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b31      	cmp	r3, #49	; 0x31
 800416a:	d9ef      	bls.n	800414c <ativarele+0x1cc>
		//adiquire o valor de contagem do timer 3
		start_time = __HAL_TIM_GET_COUNTER(&htim3);
 800416c:	4b37      	ldr	r3, [pc, #220]	; (800424c <ativarele+0x2cc>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	60fb      	str	r3, [r7, #12]
		//soma a contagem do timer 3 com o delay de 2.777 ms
		target_time = start_time + 2777;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f603 23d9 	addw	r3, r3, #2777	; 0xad9
 800417a:	613b      	str	r3, [r7, #16]
		//ativa relé da fase 1
		HAL_GPIO_WritePin(RELE_F1_GPIO_Port, RELE_F1_Pin, 1);
 800417c:	2201      	movs	r2, #1
 800417e:	2108      	movs	r1, #8
 8004180:	482f      	ldr	r0, [pc, #188]	; (8004240 <ativarele+0x2c0>)
 8004182:	f005 fe1e 	bl	8009dc2 <HAL_GPIO_WritePin>
		//ativa a flag da fase 1 ativada
		falg_fase1_ativada = 1;
 8004186:	2301      	movs	r3, #1
 8004188:	70fb      	strb	r3, [r7, #3]
		//ativa relé do Neutro
		HAL_GPIO_WritePin(RELE_N_GPIO_Port, RELE_N_Pin, 1);
 800418a:	2201      	movs	r2, #1
 800418c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004190:	482c      	ldr	r0, [pc, #176]	; (8004244 <ativarele+0x2c4>)
 8004192:	f005 fe16 	bl	8009dc2 <HAL_GPIO_WritePin>
		//ativa a flag de neutro ativado
		flag_neutro_ativado = 1;
 8004196:	2301      	movs	r3, #1
 8004198:	703b      	strb	r3, [r7, #0]
		//condição para delay utilizando o timer 3
		if(target_time > 16665){
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f244 1219 	movw	r2, #16665	; 0x4119
 80041a0:	4293      	cmp	r3, r2
 80041a2:	dd0a      	ble.n	80041ba <ativarele+0x23a>
			target_time -= 16665;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f5a3 4382 	sub.w	r3, r3, #16640	; 0x4100
 80041aa:	3b19      	subs	r3, #25
 80041ac:	613b      	str	r3, [r7, #16]
			//espera até a contagem do timer 3 chegar a zero
			while(__HAL_TIM_GET_COUNTER(&htim3) != 0);
 80041ae:	bf00      	nop
 80041b0:	4b26      	ldr	r3, [pc, #152]	; (800424c <ativarele+0x2cc>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1fa      	bne.n	80041b0 <ativarele+0x230>
		}
		//espera até a contagem do timer 3 chegar ao valor de target_tmie
		while(__HAL_TIM_GET_COUNTER(&htim3) < target_time);
 80041ba:	bf00      	nop
 80041bc:	4b23      	ldr	r3, [pc, #140]	; (800424c <ativarele+0x2cc>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d3f9      	bcc.n	80041bc <ativarele+0x23c>
		//adiquire o valor de contagem do timer 3
		start_time = __HAL_TIM_GET_COUNTER(&htim3);
 80041c8:	4b20      	ldr	r3, [pc, #128]	; (800424c <ativarele+0x2cc>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	60fb      	str	r3, [r7, #12]
		//soma a contagem do timer 3 com o delay de 2.777 ms
		target_time = start_time + 2777;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f603 23d9 	addw	r3, r3, #2777	; 0xad9
 80041d6:	613b      	str	r3, [r7, #16]
		//ativa relé da fase 2
		HAL_GPIO_WritePin(RELE_F3_GPIO_Port, RELE_F3_Pin, 1);
 80041d8:	2201      	movs	r2, #1
 80041da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80041de:	4819      	ldr	r0, [pc, #100]	; (8004244 <ativarele+0x2c4>)
 80041e0:	f005 fdef 	bl	8009dc2 <HAL_GPIO_WritePin>
		//ativa a flag de fase 2 ativada
		flag_fase2_ativada = 1;
 80041e4:	2301      	movs	r3, #1
 80041e6:	70bb      	strb	r3, [r7, #2]
		//condição para delay utilizando o timer 3
		if(target_time > 16665){
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f244 1219 	movw	r2, #16665	; 0x4119
 80041ee:	4293      	cmp	r3, r2
 80041f0:	dd0a      	ble.n	8004208 <ativarele+0x288>
			target_time -= 16665;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f5a3 4382 	sub.w	r3, r3, #16640	; 0x4100
 80041f8:	3b19      	subs	r3, #25
 80041fa:	613b      	str	r3, [r7, #16]
			//espera até a contagem do timer 3 chegar a zero
			while(__HAL_TIM_GET_COUNTER(&htim3) != 0);
 80041fc:	bf00      	nop
 80041fe:	4b13      	ldr	r3, [pc, #76]	; (800424c <ativarele+0x2cc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1fa      	bne.n	80041fe <ativarele+0x27e>
		}
		//espera até a contagem do timer 3 chegar ao valor de target_tmie
		while(__HAL_TIM_GET_COUNTER(&htim3) < target_time);
 8004208:	bf00      	nop
 800420a:	4b10      	ldr	r3, [pc, #64]	; (800424c <ativarele+0x2cc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	429a      	cmp	r2, r3
 8004214:	d3f9      	bcc.n	800420a <ativarele+0x28a>
		//ativa relé da fase 3
		HAL_GPIO_WritePin(RELE_F2_GPIO_Port, RELE_F2_Pin, 1);
 8004216:	2201      	movs	r2, #1
 8004218:	2104      	movs	r1, #4
 800421a:	480d      	ldr	r0, [pc, #52]	; (8004250 <ativarele+0x2d0>)
 800421c:	f005 fdd1 	bl	8009dc2 <HAL_GPIO_WritePin>
		//ativa a flag de fase 3 ativada
		flag_fase3_ativada = 1;
 8004220:	2301      	movs	r3, #1
 8004222:	707b      	strb	r3, [r7, #1]
		//caso alguma fase n tenha sido ativada acontece um erro
		if(falg_fase1_ativada == 0 || flag_fase2_ativada == 0 || flag_fase3_ativada == 0 || flag_neutro_ativado == 0){
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d019      	beq.n	800425e <ativarele+0x2de>
 800422a:	78bb      	ldrb	r3, [r7, #2]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d016      	beq.n	800425e <ativarele+0x2de>
 8004230:	787b      	ldrb	r3, [r7, #1]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d013      	beq.n	800425e <ativarele+0x2de>
 8004236:	e00f      	b.n	8004258 <ativarele+0x2d8>
 8004238:	20000234 	.word	0x20000234
 800423c:	40010800 	.word	0x40010800
 8004240:	40010c00 	.word	0x40010c00
 8004244:	40011000 	.word	0x40011000
 8004248:	20000260 	.word	0x20000260
 800424c:	200004b0 	.word	0x200004b0
 8004250:	40011400 	.word	0x40011400
 8004254:	20000276 	.word	0x20000276
 8004258:	783b      	ldrb	r3, [r7, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d102      	bne.n	8004264 <ativarele+0x2e4>
			//flag_timeout = 1;
			hold_state_erro_ativarele = 1;
 800425e:	4b03      	ldr	r3, [pc, #12]	; (800426c <ativarele+0x2ec>)
 8004260:	2201      	movs	r2, #1
 8004262:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8004264:	bf00      	nop
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20000276 	.word	0x20000276

08004270 <desativarele>:

void desativarele(){
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
	int start_time = HAL_GetTick();
 8004276:	f004 f8ef 	bl	8008458 <HAL_GetTick>
 800427a:	4603      	mov	r3, r0
 800427c:	60fb      	str	r3, [r7, #12]
	int zerocrossing_flag;

	if(Trifasico == 0){
 800427e:	4baa      	ldr	r3, [pc, #680]	; (8004528 <desativarele+0x2b8>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d121      	bne.n	80042ca <desativarele+0x5a>
		//detecta o estado atual do zerocrossing fase 1
		zerocrossing_flag = HAL_GPIO_ReadPin(ZC1_GPIO_Port, ZC1_Pin);
 8004286:	2101      	movs	r1, #1
 8004288:	48a8      	ldr	r0, [pc, #672]	; (800452c <desativarele+0x2bc>)
 800428a:	f005 fd83 	bl	8009d94 <HAL_GPIO_ReadPin>
 800428e:	4603      	mov	r3, r0
 8004290:	60bb      	str	r3, [r7, #8]
		//espera o zerocrossing ocorrer
		while(zerocrossing_flag == HAL_GPIO_ReadPin(ZC1_GPIO_Port, ZC1_Pin) && (HAL_GetTick()-start_time) < 50);
 8004292:	bf00      	nop
 8004294:	2101      	movs	r1, #1
 8004296:	48a5      	ldr	r0, [pc, #660]	; (800452c <desativarele+0x2bc>)
 8004298:	f005 fd7c 	bl	8009d94 <HAL_GPIO_ReadPin>
 800429c:	4603      	mov	r3, r0
 800429e:	461a      	mov	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d106      	bne.n	80042b4 <desativarele+0x44>
 80042a6:	f004 f8d7 	bl	8008458 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b31      	cmp	r3, #49	; 0x31
 80042b2:	d9ef      	bls.n	8004294 <desativarele+0x24>
		//desativa relé da fase 1
		HAL_GPIO_WritePin(RELE_F1_GPIO_Port, RELE_F1_Pin, 0);
 80042b4:	2200      	movs	r2, #0
 80042b6:	2108      	movs	r1, #8
 80042b8:	489d      	ldr	r0, [pc, #628]	; (8004530 <desativarele+0x2c0>)
 80042ba:	f005 fd82 	bl	8009dc2 <HAL_GPIO_WritePin>
		//desativa relé do Neutro
		HAL_GPIO_WritePin(RELE_N_GPIO_Port, RELE_N_Pin, 0);
 80042be:	2200      	movs	r2, #0
 80042c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80042c4:	489b      	ldr	r0, [pc, #620]	; (8004534 <desativarele+0x2c4>)
 80042c6:	f005 fd7c 	bl	8009dc2 <HAL_GPIO_WritePin>
	}

	if(Trifasico == 1 && segundo_zerocrossing == 2){
 80042ca:	4b97      	ldr	r3, [pc, #604]	; (8004528 <desativarele+0x2b8>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	f040 8095 	bne.w	80043fe <desativarele+0x18e>
 80042d4:	4b98      	ldr	r3, [pc, #608]	; (8004538 <desativarele+0x2c8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b02      	cmp	r3, #2
 80042da:	f040 8090 	bne.w	80043fe <desativarele+0x18e>
		char falg_fase1_desativada = 0;
 80042de:	2300      	movs	r3, #0
 80042e0:	71fb      	strb	r3, [r7, #7]
		char flag_fase2_desativada = 0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	71bb      	strb	r3, [r7, #6]
		char flag_fase3_desativada = 0;
 80042e6:	2300      	movs	r3, #0
 80042e8:	717b      	strb	r3, [r7, #5]
		char flag_neutro_desativado = 0;
 80042ea:	2300      	movs	r3, #0
 80042ec:	713b      	strb	r3, [r7, #4]
		int target_time = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]

		//adiquire o tempo para o timeout do zerocrossing fase 1
		start_time = HAL_GetTick();
 80042f2:	f004 f8b1 	bl	8008458 <HAL_GetTick>
 80042f6:	4603      	mov	r3, r0
 80042f8:	60fb      	str	r3, [r7, #12]
		//detecta o estado atual do zerocrossing fase 1
		zerocrossing_flag = HAL_GPIO_ReadPin(ZC1_GPIO_Port, ZC1_Pin);
 80042fa:	2101      	movs	r1, #1
 80042fc:	488b      	ldr	r0, [pc, #556]	; (800452c <desativarele+0x2bc>)
 80042fe:	f005 fd49 	bl	8009d94 <HAL_GPIO_ReadPin>
 8004302:	4603      	mov	r3, r0
 8004304:	60bb      	str	r3, [r7, #8]
		//espera o zerocrossing ocorrer
		while(zerocrossing_flag == HAL_GPIO_ReadPin(ZC1_GPIO_Port, ZC1_Pin) && (HAL_GetTick()-start_time) < 50);
 8004306:	bf00      	nop
 8004308:	2101      	movs	r1, #1
 800430a:	4888      	ldr	r0, [pc, #544]	; (800452c <desativarele+0x2bc>)
 800430c:	f005 fd42 	bl	8009d94 <HAL_GPIO_ReadPin>
 8004310:	4603      	mov	r3, r0
 8004312:	461a      	mov	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4293      	cmp	r3, r2
 8004318:	d106      	bne.n	8004328 <desativarele+0xb8>
 800431a:	f004 f89d 	bl	8008458 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b31      	cmp	r3, #49	; 0x31
 8004326:	d9ef      	bls.n	8004308 <desativarele+0x98>
		//adiquire o valor de contagem do timer 3
		start_time = __HAL_TIM_GET_COUNTER(&htim3);
 8004328:	4b84      	ldr	r3, [pc, #528]	; (800453c <desativarele+0x2cc>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	60fb      	str	r3, [r7, #12]
		//soma a contagem do timer 3 com o delay de 2.777 ms
		target_time = start_time + 2777;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f603 23d9 	addw	r3, r3, #2777	; 0xad9
 8004336:	617b      	str	r3, [r7, #20]
		//desativa relé da fase 1
		HAL_GPIO_WritePin(RELE_F1_GPIO_Port, RELE_F1_Pin, 0);
 8004338:	2200      	movs	r2, #0
 800433a:	2108      	movs	r1, #8
 800433c:	487c      	ldr	r0, [pc, #496]	; (8004530 <desativarele+0x2c0>)
 800433e:	f005 fd40 	bl	8009dc2 <HAL_GPIO_WritePin>
		//flag da fase 1 desativado
		falg_fase1_desativada = 1;
 8004342:	2301      	movs	r3, #1
 8004344:	71fb      	strb	r3, [r7, #7]
		//desativa relé do Neutro
		HAL_GPIO_WritePin(RELE_N_GPIO_Port, RELE_N_Pin, 0);
 8004346:	2200      	movs	r2, #0
 8004348:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800434c:	4879      	ldr	r0, [pc, #484]	; (8004534 <desativarele+0x2c4>)
 800434e:	f005 fd38 	bl	8009dc2 <HAL_GPIO_WritePin>
		//flag de neutro desativado
		flag_neutro_desativado = 1;
 8004352:	2301      	movs	r3, #1
 8004354:	713b      	strb	r3, [r7, #4]
		//condição para delay utilizando o timer 3
		if(target_time > 16665){
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f244 1219 	movw	r2, #16665	; 0x4119
 800435c:	4293      	cmp	r3, r2
 800435e:	dd0a      	ble.n	8004376 <desativarele+0x106>
			target_time -= 16665;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f5a3 4382 	sub.w	r3, r3, #16640	; 0x4100
 8004366:	3b19      	subs	r3, #25
 8004368:	617b      	str	r3, [r7, #20]
			//espera até a contagem do timer 3 chegar a zero
			while(__HAL_TIM_GET_COUNTER(&htim3) != 0);
 800436a:	bf00      	nop
 800436c:	4b73      	ldr	r3, [pc, #460]	; (800453c <desativarele+0x2cc>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1fa      	bne.n	800436c <desativarele+0xfc>
		}
		//espera até a contagem do timer 3 chegar ao valor de target_tmie
		while(__HAL_TIM_GET_COUNTER(&htim3) < target_time);
 8004376:	bf00      	nop
 8004378:	4b70      	ldr	r3, [pc, #448]	; (800453c <desativarele+0x2cc>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	429a      	cmp	r2, r3
 8004382:	d3f9      	bcc.n	8004378 <desativarele+0x108>
		//adiquire o valor de contagem do timer 3
		start_time = __HAL_TIM_GET_COUNTER(&htim3);
 8004384:	4b6d      	ldr	r3, [pc, #436]	; (800453c <desativarele+0x2cc>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	60fb      	str	r3, [r7, #12]
		//soma a contagem do timer 3 com o delay de 2.777 ms
		target_time = start_time + 2777;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f603 23d9 	addw	r3, r3, #2777	; 0xad9
 8004392:	617b      	str	r3, [r7, #20]
		//desativa relé da fase 2
		HAL_GPIO_WritePin(RELE_F2_GPIO_Port, RELE_F2_Pin, 0);
 8004394:	2200      	movs	r2, #0
 8004396:	2104      	movs	r1, #4
 8004398:	4869      	ldr	r0, [pc, #420]	; (8004540 <desativarele+0x2d0>)
 800439a:	f005 fd12 	bl	8009dc2 <HAL_GPIO_WritePin>
		//flag de fase 2 desativada
		flag_fase2_desativada = 1;
 800439e:	2301      	movs	r3, #1
 80043a0:	71bb      	strb	r3, [r7, #6]
		//condição para delay utilizando o timer 3
		if(target_time > 16665){
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f244 1219 	movw	r2, #16665	; 0x4119
 80043a8:	4293      	cmp	r3, r2
 80043aa:	dd0a      	ble.n	80043c2 <desativarele+0x152>
			target_time -= 16665;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f5a3 4382 	sub.w	r3, r3, #16640	; 0x4100
 80043b2:	3b19      	subs	r3, #25
 80043b4:	617b      	str	r3, [r7, #20]
			//espera até a contagem do timer 3 chegar a zero
			while(__HAL_TIM_GET_COUNTER(&htim3) != 0);
 80043b6:	bf00      	nop
 80043b8:	4b60      	ldr	r3, [pc, #384]	; (800453c <desativarele+0x2cc>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1fa      	bne.n	80043b8 <desativarele+0x148>
		}
		//espera até a contagem do timer 3 chegar ao valor de target_tmie
		while(__HAL_TIM_GET_COUNTER(&htim3) < target_time);
 80043c2:	bf00      	nop
 80043c4:	4b5d      	ldr	r3, [pc, #372]	; (800453c <desativarele+0x2cc>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d3f9      	bcc.n	80043c4 <desativarele+0x154>
		//desativa relé da fase 3
		HAL_GPIO_WritePin(RELE_F3_GPIO_Port, RELE_F3_Pin, 0);
 80043d0:	2200      	movs	r2, #0
 80043d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80043d6:	4857      	ldr	r0, [pc, #348]	; (8004534 <desativarele+0x2c4>)
 80043d8:	f005 fcf3 	bl	8009dc2 <HAL_GPIO_WritePin>
		//flag de fase 3 desativada
		flag_fase3_desativada = 1;
 80043dc:	2301      	movs	r3, #1
 80043de:	717b      	strb	r3, [r7, #5]
		//caso alguma fase n tenha sido ativada acontece um erro
		if(falg_fase1_desativada == 0 || flag_fase2_desativada == 0 || flag_fase3_desativada == 0 || flag_neutro_desativado == 0){
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d008      	beq.n	80043f8 <desativarele+0x188>
 80043e6:	79bb      	ldrb	r3, [r7, #6]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d005      	beq.n	80043f8 <desativarele+0x188>
 80043ec:	797b      	ldrb	r3, [r7, #5]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <desativarele+0x188>
 80043f2:	793b      	ldrb	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d102      	bne.n	80043fe <desativarele+0x18e>
			//flag_timeout = 1;
			hold_state_erro_ativarele = 1;
 80043f8:	4b52      	ldr	r3, [pc, #328]	; (8004544 <desativarele+0x2d4>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	701a      	strb	r2, [r3, #0]
		}
	}

	if(Trifasico == 1 && segundo_zerocrossing == 3){
 80043fe:	4b4a      	ldr	r3, [pc, #296]	; (8004528 <desativarele+0x2b8>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b01      	cmp	r3, #1
 8004404:	f040 80a6 	bne.w	8004554 <desativarele+0x2e4>
 8004408:	4b4b      	ldr	r3, [pc, #300]	; (8004538 <desativarele+0x2c8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b03      	cmp	r3, #3
 800440e:	f040 80a1 	bne.w	8004554 <desativarele+0x2e4>
		char falg_fase1_ativada = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	70fb      	strb	r3, [r7, #3]
		char flag_fase2_ativada = 0;
 8004416:	2300      	movs	r3, #0
 8004418:	70bb      	strb	r3, [r7, #2]
		char flag_fase3_ativada = 0;
 800441a:	2300      	movs	r3, #0
 800441c:	707b      	strb	r3, [r7, #1]
		char flag_neutro_ativado = 0;
 800441e:	2300      	movs	r3, #0
 8004420:	703b      	strb	r3, [r7, #0]
		int target_time = 0;
 8004422:	2300      	movs	r3, #0
 8004424:	613b      	str	r3, [r7, #16]

		//adiquire o tempo para o timeout do zerocrossing fase 1
		start_time = HAL_GetTick();
 8004426:	f004 f817 	bl	8008458 <HAL_GetTick>
 800442a:	4603      	mov	r3, r0
 800442c:	60fb      	str	r3, [r7, #12]
		//detecta o estado atual do zerocrossing fase 1
		zerocrossing_flag = HAL_GPIO_ReadPin(ZC1_GPIO_Port, ZC1_Pin);
 800442e:	2101      	movs	r1, #1
 8004430:	483e      	ldr	r0, [pc, #248]	; (800452c <desativarele+0x2bc>)
 8004432:	f005 fcaf 	bl	8009d94 <HAL_GPIO_ReadPin>
 8004436:	4603      	mov	r3, r0
 8004438:	60bb      	str	r3, [r7, #8]
		//espera o zerocrossing ocorrer
		while(zerocrossing_flag == HAL_GPIO_ReadPin(ZC1_GPIO_Port, ZC1_Pin) && (HAL_GetTick()-start_time) < 50);
 800443a:	bf00      	nop
 800443c:	2101      	movs	r1, #1
 800443e:	483b      	ldr	r0, [pc, #236]	; (800452c <desativarele+0x2bc>)
 8004440:	f005 fca8 	bl	8009d94 <HAL_GPIO_ReadPin>
 8004444:	4603      	mov	r3, r0
 8004446:	461a      	mov	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4293      	cmp	r3, r2
 800444c:	d106      	bne.n	800445c <desativarele+0x1ec>
 800444e:	f004 f803 	bl	8008458 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b31      	cmp	r3, #49	; 0x31
 800445a:	d9ef      	bls.n	800443c <desativarele+0x1cc>
		//adiquire o valor de contagem do timer 3
		start_time = __HAL_TIM_GET_COUNTER(&htim3);
 800445c:	4b37      	ldr	r3, [pc, #220]	; (800453c <desativarele+0x2cc>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	60fb      	str	r3, [r7, #12]
		//soma a contagem do timer 3 com o delay de 2.777 ms
		target_time = start_time + 2777;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f603 23d9 	addw	r3, r3, #2777	; 0xad9
 800446a:	613b      	str	r3, [r7, #16]
		//desativa relé da fase 1
		HAL_GPIO_WritePin(RELE_F1_GPIO_Port, RELE_F1_Pin, 0);
 800446c:	2200      	movs	r2, #0
 800446e:	2108      	movs	r1, #8
 8004470:	482f      	ldr	r0, [pc, #188]	; (8004530 <desativarele+0x2c0>)
 8004472:	f005 fca6 	bl	8009dc2 <HAL_GPIO_WritePin>
		//flag da fase 1 desativada
		falg_fase1_ativada = 1;
 8004476:	2301      	movs	r3, #1
 8004478:	70fb      	strb	r3, [r7, #3]
		//desativa relé do Neutro
		HAL_GPIO_WritePin(RELE_N_GPIO_Port, RELE_N_Pin, 0);
 800447a:	2200      	movs	r2, #0
 800447c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004480:	482c      	ldr	r0, [pc, #176]	; (8004534 <desativarele+0x2c4>)
 8004482:	f005 fc9e 	bl	8009dc2 <HAL_GPIO_WritePin>
		//flag de neutro desativado
		flag_neutro_ativado = 1;
 8004486:	2301      	movs	r3, #1
 8004488:	703b      	strb	r3, [r7, #0]
		//condição para delay utilizando o timer 3
		if(target_time > 16665){
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f244 1219 	movw	r2, #16665	; 0x4119
 8004490:	4293      	cmp	r3, r2
 8004492:	dd0a      	ble.n	80044aa <desativarele+0x23a>
			target_time -= 16665;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f5a3 4382 	sub.w	r3, r3, #16640	; 0x4100
 800449a:	3b19      	subs	r3, #25
 800449c:	613b      	str	r3, [r7, #16]
			//espera até a contagem do timer 3 chegar a zero
			while(__HAL_TIM_GET_COUNTER(&htim3) != 0);
 800449e:	bf00      	nop
 80044a0:	4b26      	ldr	r3, [pc, #152]	; (800453c <desativarele+0x2cc>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1fa      	bne.n	80044a0 <desativarele+0x230>
		}
		//espera até a contagem do timer 3 chegar ao valor de target_tmie
		while(__HAL_TIM_GET_COUNTER(&htim3) < target_time);
 80044aa:	bf00      	nop
 80044ac:	4b23      	ldr	r3, [pc, #140]	; (800453c <desativarele+0x2cc>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d3f9      	bcc.n	80044ac <desativarele+0x23c>
		//adiquire o valor de contagem do timer 3
		start_time = __HAL_TIM_GET_COUNTER(&htim3);
 80044b8:	4b20      	ldr	r3, [pc, #128]	; (800453c <desativarele+0x2cc>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	60fb      	str	r3, [r7, #12]
		//soma a contagem do timer 3 com o delay de 2.777 ms
		target_time = start_time + 2777;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f603 23d9 	addw	r3, r3, #2777	; 0xad9
 80044c6:	613b      	str	r3, [r7, #16]
		//desativa relé da fase 2
		HAL_GPIO_WritePin(RELE_F3_GPIO_Port, RELE_F3_Pin, 0);
 80044c8:	2200      	movs	r2, #0
 80044ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044ce:	4819      	ldr	r0, [pc, #100]	; (8004534 <desativarele+0x2c4>)
 80044d0:	f005 fc77 	bl	8009dc2 <HAL_GPIO_WritePin>
		//ativa a flag de fase 2 ativada
		flag_fase2_ativada = 1;
 80044d4:	2301      	movs	r3, #1
 80044d6:	70bb      	strb	r3, [r7, #2]
		//condição para delay utilizando o timer 3
		if(target_time > 16665){
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f244 1219 	movw	r2, #16665	; 0x4119
 80044de:	4293      	cmp	r3, r2
 80044e0:	dd0a      	ble.n	80044f8 <desativarele+0x288>
			target_time -= 16665;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f5a3 4382 	sub.w	r3, r3, #16640	; 0x4100
 80044e8:	3b19      	subs	r3, #25
 80044ea:	613b      	str	r3, [r7, #16]
			//espera até a contagem do timer 3 chegar a zero
			while(__HAL_TIM_GET_COUNTER(&htim3) != 0);
 80044ec:	bf00      	nop
 80044ee:	4b13      	ldr	r3, [pc, #76]	; (800453c <desativarele+0x2cc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1fa      	bne.n	80044ee <desativarele+0x27e>
		}
		//espera até a contagem do timer 3 chegar ao valor de target_tmie
		while(__HAL_TIM_GET_COUNTER(&htim3) < target_time);
 80044f8:	bf00      	nop
 80044fa:	4b10      	ldr	r3, [pc, #64]	; (800453c <desativarele+0x2cc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	429a      	cmp	r2, r3
 8004504:	d3f9      	bcc.n	80044fa <desativarele+0x28a>
		//desativa relé da fase 3
		HAL_GPIO_WritePin(RELE_F2_GPIO_Port, RELE_F2_Pin, 0);
 8004506:	2200      	movs	r2, #0
 8004508:	2104      	movs	r1, #4
 800450a:	480d      	ldr	r0, [pc, #52]	; (8004540 <desativarele+0x2d0>)
 800450c:	f005 fc59 	bl	8009dc2 <HAL_GPIO_WritePin>
		//flag de fase 3 desativada
		flag_fase3_ativada = 1;
 8004510:	2301      	movs	r3, #1
 8004512:	707b      	strb	r3, [r7, #1]
		//caso alguma fase n tenha sido ativada acontece um erro
		if(falg_fase1_ativada == 0 || flag_fase2_ativada == 0 || flag_fase3_ativada == 0 || flag_neutro_ativado == 0){
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d019      	beq.n	800454e <desativarele+0x2de>
 800451a:	78bb      	ldrb	r3, [r7, #2]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d016      	beq.n	800454e <desativarele+0x2de>
 8004520:	787b      	ldrb	r3, [r7, #1]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d013      	beq.n	800454e <desativarele+0x2de>
 8004526:	e00f      	b.n	8004548 <desativarele+0x2d8>
 8004528:	20000234 	.word	0x20000234
 800452c:	40010800 	.word	0x40010800
 8004530:	40010c00 	.word	0x40010c00
 8004534:	40011000 	.word	0x40011000
 8004538:	20000260 	.word	0x20000260
 800453c:	200004b0 	.word	0x200004b0
 8004540:	40011400 	.word	0x40011400
 8004544:	20000276 	.word	0x20000276
 8004548:	783b      	ldrb	r3, [r7, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d102      	bne.n	8004554 <desativarele+0x2e4>
			//flag_timeout = 1;
			hold_state_erro_desativarele = 1;
 800454e:	4b03      	ldr	r3, [pc, #12]	; (800455c <desativarele+0x2ec>)
 8004550:	2201      	movs	r2, #1
 8004552:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8004554:	bf00      	nop
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	20000277 	.word	0x20000277

08004560 <atualiza_temperatura>:
		//HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
	}
}*/

void atualiza_temperatura()
{
 8004560:	b5b0      	push	{r4, r5, r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
	temp_antes = temp;
 8004566:	4b94      	ldr	r3, [pc, #592]	; (80047b8 <atualiza_temperatura+0x258>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a94      	ldr	r2, [pc, #592]	; (80047bc <atualiza_temperatura+0x25c>)
 800456c:	6013      	str	r3, [r2, #0]
	//Nominal resistance at 25⁰C
	float nominal_resistance = 10000.0;
 800456e:	4b94      	ldr	r3, [pc, #592]	; (80047c0 <atualiza_temperatura+0x260>)
 8004570:	617b      	str	r3, [r7, #20]
	// temperature for nominal resistance (almost always 25⁰ C)
	float nominal_temeprature = 25.0;
 8004572:	4b94      	ldr	r3, [pc, #592]	; (80047c4 <atualiza_temperatura+0x264>)
 8004574:	613b      	str	r3, [r7, #16]
	// The beta coefficient or the B value of the thermistor (usually 3000-4000) check the datasheet for the accurate value.
	float beta = 3950.0;
 8004576:	4b94      	ldr	r3, [pc, #592]	; (80047c8 <atualiza_temperatura+0x268>)
 8004578:	60fb      	str	r3, [r7, #12]
	int sample = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	61fb      	str	r3, [r7, #28]
	int media = 0;
 800457e:	2300      	movs	r3, #0
 8004580:	60bb      	str	r3, [r7, #8]
	int r = 0;
 8004582:	2300      	movs	r3, #0
 8004584:	607b      	str	r3, [r7, #4]
	for(int i=0; i<5; i++)
 8004586:	2300      	movs	r3, #0
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	e016      	b.n	80045ba <atualiza_temperatura+0x5a>
	{
		ADC_Select_CH1();
 800458c:	f002 fda6 	bl	80070dc <ADC_Select_CH1>
		HAL_ADC_Start(&hadc1);
 8004590:	488e      	ldr	r0, [pc, #568]	; (80047cc <atualiza_temperatura+0x26c>)
 8004592:	f004 f867 	bl	8008664 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8004596:	f04f 31ff 	mov.w	r1, #4294967295
 800459a:	488c      	ldr	r0, [pc, #560]	; (80047cc <atualiza_temperatura+0x26c>)
 800459c:	f004 f93c 	bl	8008818 <HAL_ADC_PollForConversion>
		sample += HAL_ADC_GetValue(&hadc1);
 80045a0:	488a      	ldr	r0, [pc, #552]	; (80047cc <atualiza_temperatura+0x26c>)
 80045a2:	f004 fa3f 	bl	8008a24 <HAL_ADC_GetValue>
 80045a6:	4602      	mov	r2, r0
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	4413      	add	r3, r2
 80045ac:	61fb      	str	r3, [r7, #28]
		HAL_ADC_Stop(&hadc1);
 80045ae:	4887      	ldr	r0, [pc, #540]	; (80047cc <atualiza_temperatura+0x26c>)
 80045b0:	f004 f906 	bl	80087c0 <HAL_ADC_Stop>
	for(int i=0; i<5; i++)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	3301      	adds	r3, #1
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b04      	cmp	r3, #4
 80045be:	dde5      	ble.n	800458c <atualiza_temperatura+0x2c>
	}
	media = sample/5;
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	4a83      	ldr	r2, [pc, #524]	; (80047d0 <atualiza_temperatura+0x270>)
 80045c4:	fb82 1203 	smull	r1, r2, r2, r3
 80045c8:	1052      	asrs	r2, r2, #1
 80045ca:	17db      	asrs	r3, r3, #31
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	60bb      	str	r3, [r7, #8]
	r = ((4095*10000)/media)-10000;
 80045d0:	4a80      	ldr	r2, [pc, #512]	; (80047d4 <atualiza_temperatura+0x274>)
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80045d8:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 80045dc:	3b10      	subs	r3, #16
 80045de:	607b      	str	r3, [r7, #4]
	temp = r/nominal_resistance;
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7fc fb7b 	bl	8000cdc <__aeabi_i2f>
 80045e6:	4603      	mov	r3, r0
 80045e8:	6979      	ldr	r1, [r7, #20]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fc fc7e 	bl	8000eec <__aeabi_fdiv>
 80045f0:	4603      	mov	r3, r0
 80045f2:	461a      	mov	r2, r3
 80045f4:	4b70      	ldr	r3, [pc, #448]	; (80047b8 <atualiza_temperatura+0x258>)
 80045f6:	601a      	str	r2, [r3, #0]
	temp = log(temp);
 80045f8:	4b6f      	ldr	r3, [pc, #444]	; (80047b8 <atualiza_temperatura+0x258>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fb ff13 	bl	8000428 <__aeabi_f2d>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	4610      	mov	r0, r2
 8004608:	4619      	mov	r1, r3
 800460a:	f00b fe19 	bl	8010240 <log>
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	4610      	mov	r0, r2
 8004614:	4619      	mov	r1, r3
 8004616:	f7fc fa57 	bl	8000ac8 <__aeabi_d2f>
 800461a:	4603      	mov	r3, r0
 800461c:	4a66      	ldr	r2, [pc, #408]	; (80047b8 <atualiza_temperatura+0x258>)
 800461e:	6013      	str	r3, [r2, #0]
	temp /= beta;
 8004620:	4b65      	ldr	r3, [pc, #404]	; (80047b8 <atualiza_temperatura+0x258>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68f9      	ldr	r1, [r7, #12]
 8004626:	4618      	mov	r0, r3
 8004628:	f7fc fc60 	bl	8000eec <__aeabi_fdiv>
 800462c:	4603      	mov	r3, r0
 800462e:	461a      	mov	r2, r3
 8004630:	4b61      	ldr	r3, [pc, #388]	; (80047b8 <atualiza_temperatura+0x258>)
 8004632:	601a      	str	r2, [r3, #0]
	temp += 1.0 / (nominal_temeprature + 273.15);
 8004634:	4b60      	ldr	r3, [pc, #384]	; (80047b8 <atualiza_temperatura+0x258>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f7fb fef5 	bl	8000428 <__aeabi_f2d>
 800463e:	4604      	mov	r4, r0
 8004640:	460d      	mov	r5, r1
 8004642:	6938      	ldr	r0, [r7, #16]
 8004644:	f7fb fef0 	bl	8000428 <__aeabi_f2d>
 8004648:	a359      	add	r3, pc, #356	; (adr r3, 80047b0 <atualiza_temperatura+0x250>)
 800464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464e:	f7fb fd8d 	bl	800016c <__adddf3>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	f04f 0000 	mov.w	r0, #0
 800465a:	495f      	ldr	r1, [pc, #380]	; (80047d8 <atualiza_temperatura+0x278>)
 800465c:	f7fc f866 	bl	800072c <__aeabi_ddiv>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	4620      	mov	r0, r4
 8004666:	4629      	mov	r1, r5
 8004668:	f7fb fd80 	bl	800016c <__adddf3>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4610      	mov	r0, r2
 8004672:	4619      	mov	r1, r3
 8004674:	f7fc fa28 	bl	8000ac8 <__aeabi_d2f>
 8004678:	4603      	mov	r3, r0
 800467a:	4a4f      	ldr	r2, [pc, #316]	; (80047b8 <atualiza_temperatura+0x258>)
 800467c:	6013      	str	r3, [r2, #0]
	temp = 1.0 / temp;
 800467e:	4b4e      	ldr	r3, [pc, #312]	; (80047b8 <atualiza_temperatura+0x258>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4619      	mov	r1, r3
 8004684:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004688:	f7fc fc30 	bl	8000eec <__aeabi_fdiv>
 800468c:	4603      	mov	r3, r0
 800468e:	461a      	mov	r2, r3
 8004690:	4b49      	ldr	r3, [pc, #292]	; (80047b8 <atualiza_temperatura+0x258>)
 8004692:	601a      	str	r2, [r3, #0]
	temp -= 273.15;
 8004694:	4b48      	ldr	r3, [pc, #288]	; (80047b8 <atualiza_temperatura+0x258>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f7fb fec5 	bl	8000428 <__aeabi_f2d>
 800469e:	a344      	add	r3, pc, #272	; (adr r3, 80047b0 <atualiza_temperatura+0x250>)
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	f7fb fd60 	bl	8000168 <__aeabi_dsub>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4610      	mov	r0, r2
 80046ae:	4619      	mov	r1, r3
 80046b0:	f7fc fa0a 	bl	8000ac8 <__aeabi_d2f>
 80046b4:	4603      	mov	r3, r0
 80046b6:	4a40      	ldr	r2, [pc, #256]	; (80047b8 <atualiza_temperatura+0x258>)
 80046b8:	6013      	str	r3, [r2, #0]
	temp = temp;
 80046ba:	4b3f      	ldr	r3, [pc, #252]	; (80047b8 <atualiza_temperatura+0x258>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a3e      	ldr	r2, [pc, #248]	; (80047b8 <atualiza_temperatura+0x258>)
 80046c0:	6013      	str	r3, [r2, #0]


	if(temp_antes < 70 && temp > 70){
 80046c2:	4b3e      	ldr	r3, [pc, #248]	; (80047bc <atualiza_temperatura+0x25c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4945      	ldr	r1, [pc, #276]	; (80047dc <atualiza_temperatura+0x27c>)
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fc fcf9 	bl	80010c0 <__aeabi_fcmplt>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d013      	beq.n	80046fc <atualiza_temperatura+0x19c>
 80046d4:	4b38      	ldr	r3, [pc, #224]	; (80047b8 <atualiza_temperatura+0x258>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4940      	ldr	r1, [pc, #256]	; (80047dc <atualiza_temperatura+0x27c>)
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fc fd0e 	bl	80010fc <__aeabi_fcmpgt>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <atualiza_temperatura+0x19c>
		// temperatura passou de 70 C (excuta apenas no cruzamento)
		Flag_temp_70 = 1;
 80046e6:	4b3e      	ldr	r3, [pc, #248]	; (80047e0 <atualiza_temperatura+0x280>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	701a      	strb	r2, [r3, #0]
		//
		corrente_temp_alta = corrente/2;
 80046ec:	4b3d      	ldr	r3, [pc, #244]	; (80047e4 <atualiza_temperatura+0x284>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	0fda      	lsrs	r2, r3, #31
 80046f2:	4413      	add	r3, r2
 80046f4:	105b      	asrs	r3, r3, #1
 80046f6:	461a      	mov	r2, r3
 80046f8:	4b3b      	ldr	r3, [pc, #236]	; (80047e8 <atualiza_temperatura+0x288>)
 80046fa:	601a      	str	r2, [r3, #0]
	}
	if(temp_antes < 85 && temp > 85){
 80046fc:	4b2f      	ldr	r3, [pc, #188]	; (80047bc <atualiza_temperatura+0x25c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	493a      	ldr	r1, [pc, #232]	; (80047ec <atualiza_temperatura+0x28c>)
 8004702:	4618      	mov	r0, r3
 8004704:	f7fc fcdc 	bl	80010c0 <__aeabi_fcmplt>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00e      	beq.n	800472c <atualiza_temperatura+0x1cc>
 800470e:	4b2a      	ldr	r3, [pc, #168]	; (80047b8 <atualiza_temperatura+0x258>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4936      	ldr	r1, [pc, #216]	; (80047ec <atualiza_temperatura+0x28c>)
 8004714:	4618      	mov	r0, r3
 8004716:	f7fc fcf1 	bl	80010fc <__aeabi_fcmpgt>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <atualiza_temperatura+0x1cc>
		// temperatura passou de 85 C (executa apenas no cruzamento)
		Flag_temp_85 = 1;
 8004720:	4b33      	ldr	r3, [pc, #204]	; (80047f0 <atualiza_temperatura+0x290>)
 8004722:	2201      	movs	r2, #1
 8004724:	701a      	strb	r2, [r3, #0]
		// tranca o carregador em estádo erro até que essa flag seja desligada
		hold_state_erro_temp = 1;
 8004726:	4b33      	ldr	r3, [pc, #204]	; (80047f4 <atualiza_temperatura+0x294>)
 8004728:	2201      	movs	r2, #1
 800472a:	701a      	strb	r2, [r3, #0]
	}
	if(temp_antes > 67 && temp < 67){
 800472c:	4b23      	ldr	r3, [pc, #140]	; (80047bc <atualiza_temperatura+0x25c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4931      	ldr	r1, [pc, #196]	; (80047f8 <atualiza_temperatura+0x298>)
 8004732:	4618      	mov	r0, r3
 8004734:	f7fc fce2 	bl	80010fc <__aeabi_fcmpgt>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00b      	beq.n	8004756 <atualiza_temperatura+0x1f6>
 800473e:	4b1e      	ldr	r3, [pc, #120]	; (80047b8 <atualiza_temperatura+0x258>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	492d      	ldr	r1, [pc, #180]	; (80047f8 <atualiza_temperatura+0x298>)
 8004744:	4618      	mov	r0, r3
 8004746:	f7fc fcbb 	bl	80010c0 <__aeabi_fcmplt>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <atualiza_temperatura+0x1f6>
		// temperatura menor que 65 C (executa apenas no cruzamento)
		Flag_temp_70 = 0;
 8004750:	4b23      	ldr	r3, [pc, #140]	; (80047e0 <atualiza_temperatura+0x280>)
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]
	}
	if(temp_antes > 82 && temp < 82){
 8004756:	4b19      	ldr	r3, [pc, #100]	; (80047bc <atualiza_temperatura+0x25c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4928      	ldr	r1, [pc, #160]	; (80047fc <atualiza_temperatura+0x29c>)
 800475c:	4618      	mov	r0, r3
 800475e:	f7fc fccd 	bl	80010fc <__aeabi_fcmpgt>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00e      	beq.n	8004786 <atualiza_temperatura+0x226>
 8004768:	4b13      	ldr	r3, [pc, #76]	; (80047b8 <atualiza_temperatura+0x258>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4923      	ldr	r1, [pc, #140]	; (80047fc <atualiza_temperatura+0x29c>)
 800476e:	4618      	mov	r0, r3
 8004770:	f7fc fca6 	bl	80010c0 <__aeabi_fcmplt>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d005      	beq.n	8004786 <atualiza_temperatura+0x226>
		// temperatura menor que 85 C (executa apenas no cruzamento)
		Flag_temp_85 = 0;
 800477a:	4b1d      	ldr	r3, [pc, #116]	; (80047f0 <atualiza_temperatura+0x290>)
 800477c:	2200      	movs	r2, #0
 800477e:	701a      	strb	r2, [r3, #0]
		// desliga a flag de erro de temperatura
		hold_state_erro_temp = 0;
 8004780:	4b1c      	ldr	r3, [pc, #112]	; (80047f4 <atualiza_temperatura+0x294>)
 8004782:	2200      	movs	r2, #0
 8004784:	701a      	strb	r2, [r3, #0]
	}

	if(temp>=OVERTEMP)
 8004786:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <atualiza_temperatura+0x258>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	491d      	ldr	r1, [pc, #116]	; (8004800 <atualiza_temperatura+0x2a0>)
 800478c:	4618      	mov	r0, r3
 800478e:	f7fc fcab 	bl	80010e8 <__aeabi_fcmpge>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d100      	bne.n	800479a <atualiza_temperatura+0x23a>
		bitset(Erros,ERRO_OVERTEMP);

	//sprintf(buffer, "          TEMPERATURA: %.2f C\r\n", temp);
	//HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
}
 8004798:	e006      	b.n	80047a8 <atualiza_temperatura+0x248>
		bitset(Erros,ERRO_OVERTEMP);
 800479a:	4b1a      	ldr	r3, [pc, #104]	; (8004804 <atualiza_temperatura+0x2a4>)
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	4b17      	ldr	r3, [pc, #92]	; (8004804 <atualiza_temperatura+0x2a4>)
 80047a6:	801a      	strh	r2, [r3, #0]
}
 80047a8:	bf00      	nop
 80047aa:	3720      	adds	r7, #32
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bdb0      	pop	{r4, r5, r7, pc}
 80047b0:	66666666 	.word	0x66666666
 80047b4:	40711266 	.word	0x40711266
 80047b8:	200005a8 	.word	0x200005a8
 80047bc:	200005ac 	.word	0x200005ac
 80047c0:	461c4000 	.word	0x461c4000
 80047c4:	41c80000 	.word	0x41c80000
 80047c8:	4576e000 	.word	0x4576e000
 80047cc:	20000310 	.word	0x20000310
 80047d0:	66666667 	.word	0x66666667
 80047d4:	0270d8f0 	.word	0x0270d8f0
 80047d8:	3ff00000 	.word	0x3ff00000
 80047dc:	428c0000 	.word	0x428c0000
 80047e0:	200005d0 	.word	0x200005d0
 80047e4:	20000030 	.word	0x20000030
 80047e8:	2000059c 	.word	0x2000059c
 80047ec:	42aa0000 	.word	0x42aa0000
 80047f0:	200005d1 	.word	0x200005d1
 80047f4:	20000274 	.word	0x20000274
 80047f8:	42860000 	.word	0x42860000
 80047fc:	42a40000 	.word	0x42a40000
 8004800:	42960000 	.word	0x42960000
 8004804:	200005bc 	.word	0x200005bc

08004808 <reconhecimento_terra_neutro>:

void reconhecimento_terra_neutro(){
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
	atualiza_tensao_fase_terra();
 800480e:	f7fd feff 	bl	8002610 <atualiza_tensao_fase_terra>

	int VALOR_MINIMO_NEUTRO= 75;
 8004812:	234b      	movs	r3, #75	; 0x4b
 8004814:	607b      	str	r3, [r7, #4]
	if(vneutro > VALOR_MINIMO_NEUTRO)
 8004816:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <reconhecimento_terra_neutro+0x38>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	429a      	cmp	r2, r3
 800481e:	da02      	bge.n	8004826 <reconhecimento_terra_neutro+0x1e>
	{
		neutroPresente = 0;
 8004820:	4b08      	ldr	r3, [pc, #32]	; (8004844 <reconhecimento_terra_neutro+0x3c>)
 8004822:	2200      	movs	r2, #0
 8004824:	701a      	strb	r2, [r3, #0]
	}
	if(vneutro <= VALOR_MINIMO_NEUTRO){
 8004826:	4b06      	ldr	r3, [pc, #24]	; (8004840 <reconhecimento_terra_neutro+0x38>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	429a      	cmp	r2, r3
 800482e:	db02      	blt.n	8004836 <reconhecimento_terra_neutro+0x2e>
		neutroPresente = 1;
 8004830:	4b04      	ldr	r3, [pc, #16]	; (8004844 <reconhecimento_terra_neutro+0x3c>)
 8004832:	2201      	movs	r2, #1
 8004834:	701a      	strb	r2, [r3, #0]
	}
}
 8004836:	bf00      	nop
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20000254 	.word	0x20000254
 8004844:	2000002c 	.word	0x2000002c

08004848 <detecta_mono_tri>:
		corrente_max = 8;
	}
	corrente = corrente_max;
}
#endif
void detecta_mono_tri(){
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
	//medida de tensão das fases
	atualiza_tensao_fase_neutro_tri();
 800484c:	f7fe fcd0 	bl	80031f0 <atualiza_tensao_fase_neutro_tri>
	//condição para determinar se é monofásico ou trifásico
	if(fase1 == 1 && fase2 == 1 && fase3 == 1){
 8004850:	4b84      	ldr	r3, [pc, #528]	; (8004a64 <detecta_mono_tri+0x21c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d11f      	bne.n	8004898 <detecta_mono_tri+0x50>
 8004858:	4b83      	ldr	r3, [pc, #524]	; (8004a68 <detecta_mono_tri+0x220>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d11b      	bne.n	8004898 <detecta_mono_tri+0x50>
 8004860:	4b82      	ldr	r3, [pc, #520]	; (8004a6c <detecta_mono_tri+0x224>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d117      	bne.n	8004898 <detecta_mono_tri+0x50>
		HAL_Delay(1);
 8004868:	2001      	movs	r0, #1
 800486a:	f003 fdff 	bl	800846c <HAL_Delay>
		atualiza_tensao_fase_neutro_tri();
 800486e:	f7fe fcbf 	bl	80031f0 <atualiza_tensao_fase_neutro_tri>
		//condição para determinar se é monofásico ou trifásico
		if(fase1 == 1 && fase2 == 1 && fase3 == 1){
 8004872:	4b7c      	ldr	r3, [pc, #496]	; (8004a64 <detecta_mono_tri+0x21c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d10b      	bne.n	8004892 <detecta_mono_tri+0x4a>
 800487a:	4b7b      	ldr	r3, [pc, #492]	; (8004a68 <detecta_mono_tri+0x220>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d107      	bne.n	8004892 <detecta_mono_tri+0x4a>
 8004882:	4b7a      	ldr	r3, [pc, #488]	; (8004a6c <detecta_mono_tri+0x224>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d103      	bne.n	8004892 <detecta_mono_tri+0x4a>
			Trifasico = 1;
 800488a:	4b79      	ldr	r3, [pc, #484]	; (8004a70 <detecta_mono_tri+0x228>)
 800488c:	2201      	movs	r2, #1
 800488e:	701a      	strb	r2, [r3, #0]
 8004890:	e002      	b.n	8004898 <detecta_mono_tri+0x50>
		}else{
			hold_state_erro_conexao_fase = 1;
 8004892:	4b78      	ldr	r3, [pc, #480]	; (8004a74 <detecta_mono_tri+0x22c>)
 8004894:	2201      	movs	r2, #1
 8004896:	701a      	strb	r2, [r3, #0]
		}
	}
	if(fase1 == 1 && fase2 == 0 && fase3 == 0){
 8004898:	4b72      	ldr	r3, [pc, #456]	; (8004a64 <detecta_mono_tri+0x21c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d11f      	bne.n	80048e0 <detecta_mono_tri+0x98>
 80048a0:	4b71      	ldr	r3, [pc, #452]	; (8004a68 <detecta_mono_tri+0x220>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d11b      	bne.n	80048e0 <detecta_mono_tri+0x98>
 80048a8:	4b70      	ldr	r3, [pc, #448]	; (8004a6c <detecta_mono_tri+0x224>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d117      	bne.n	80048e0 <detecta_mono_tri+0x98>
		HAL_Delay(1);
 80048b0:	2001      	movs	r0, #1
 80048b2:	f003 fddb 	bl	800846c <HAL_Delay>
		atualiza_tensao_fase_neutro_tri();
 80048b6:	f7fe fc9b 	bl	80031f0 <atualiza_tensao_fase_neutro_tri>
		//condição para determinar se é monofásico ou trifásico
		if(fase1 == 1 && fase2 == 0 && fase3 == 0){
 80048ba:	4b6a      	ldr	r3, [pc, #424]	; (8004a64 <detecta_mono_tri+0x21c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d10b      	bne.n	80048da <detecta_mono_tri+0x92>
 80048c2:	4b69      	ldr	r3, [pc, #420]	; (8004a68 <detecta_mono_tri+0x220>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d107      	bne.n	80048da <detecta_mono_tri+0x92>
 80048ca:	4b68      	ldr	r3, [pc, #416]	; (8004a6c <detecta_mono_tri+0x224>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d103      	bne.n	80048da <detecta_mono_tri+0x92>
			Trifasico = 0;
 80048d2:	4b67      	ldr	r3, [pc, #412]	; (8004a70 <detecta_mono_tri+0x228>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	701a      	strb	r2, [r3, #0]
 80048d8:	e002      	b.n	80048e0 <detecta_mono_tri+0x98>
		}else{
			hold_state_erro_conexao_fase = 1;
 80048da:	4b66      	ldr	r3, [pc, #408]	; (8004a74 <detecta_mono_tri+0x22c>)
 80048dc:	2201      	movs	r2, #1
 80048de:	701a      	strb	r2, [r3, #0]
		}
	}
	if(fase1 ==1 && (fase2 ^ fase3)){
 80048e0:	4b60      	ldr	r3, [pc, #384]	; (8004a64 <detecta_mono_tri+0x21c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d15e      	bne.n	80049a6 <detecta_mono_tri+0x15e>
 80048e8:	4b5f      	ldr	r3, [pc, #380]	; (8004a68 <detecta_mono_tri+0x220>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	4b5f      	ldr	r3, [pc, #380]	; (8004a6c <detecta_mono_tri+0x224>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d058      	beq.n	80049a6 <detecta_mono_tri+0x15e>
		HAL_Delay(1);
 80048f4:	2001      	movs	r0, #1
 80048f6:	f003 fdb9 	bl	800846c <HAL_Delay>
		atualiza_tensao_fase_neutro_tri();
 80048fa:	f7fe fc79 	bl	80031f0 <atualiza_tensao_fase_neutro_tri>
		//condição para determinar se é monofásico ou trifásico
		if(fase1 == 1 && fase2 == 1 && fase3 == 1){
 80048fe:	4b59      	ldr	r3, [pc, #356]	; (8004a64 <detecta_mono_tri+0x21c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d11b      	bne.n	800493e <detecta_mono_tri+0xf6>
 8004906:	4b58      	ldr	r3, [pc, #352]	; (8004a68 <detecta_mono_tri+0x220>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d117      	bne.n	800493e <detecta_mono_tri+0xf6>
 800490e:	4b57      	ldr	r3, [pc, #348]	; (8004a6c <detecta_mono_tri+0x224>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d113      	bne.n	800493e <detecta_mono_tri+0xf6>
			HAL_Delay(1);
 8004916:	2001      	movs	r0, #1
 8004918:	f003 fda8 	bl	800846c <HAL_Delay>
			atualiza_tensao_fase_neutro_tri();
 800491c:	f7fe fc68 	bl	80031f0 <atualiza_tensao_fase_neutro_tri>
			if(fase1 == 1 && fase2 == 1 && fase3 == 1){
 8004920:	4b50      	ldr	r3, [pc, #320]	; (8004a64 <detecta_mono_tri+0x21c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d10a      	bne.n	800493e <detecta_mono_tri+0xf6>
 8004928:	4b4f      	ldr	r3, [pc, #316]	; (8004a68 <detecta_mono_tri+0x220>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d106      	bne.n	800493e <detecta_mono_tri+0xf6>
 8004930:	4b4e      	ldr	r3, [pc, #312]	; (8004a6c <detecta_mono_tri+0x224>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d102      	bne.n	800493e <detecta_mono_tri+0xf6>
				Trifasico = 1;
 8004938:	4b4d      	ldr	r3, [pc, #308]	; (8004a70 <detecta_mono_tri+0x228>)
 800493a:	2201      	movs	r2, #1
 800493c:	701a      	strb	r2, [r3, #0]
			}
		}
		if(fase1 == 1 && fase2 == 0 && fase3 == 0){
 800493e:	4b49      	ldr	r3, [pc, #292]	; (8004a64 <detecta_mono_tri+0x21c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d11b      	bne.n	800497e <detecta_mono_tri+0x136>
 8004946:	4b48      	ldr	r3, [pc, #288]	; (8004a68 <detecta_mono_tri+0x220>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d117      	bne.n	800497e <detecta_mono_tri+0x136>
 800494e:	4b47      	ldr	r3, [pc, #284]	; (8004a6c <detecta_mono_tri+0x224>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d113      	bne.n	800497e <detecta_mono_tri+0x136>
			HAL_Delay(1);
 8004956:	2001      	movs	r0, #1
 8004958:	f003 fd88 	bl	800846c <HAL_Delay>
			atualiza_tensao_fase_neutro_tri();
 800495c:	f7fe fc48 	bl	80031f0 <atualiza_tensao_fase_neutro_tri>
			if(fase1 == 1 && fase2 == 0 && fase3 == 0){
 8004960:	4b40      	ldr	r3, [pc, #256]	; (8004a64 <detecta_mono_tri+0x21c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d10a      	bne.n	800497e <detecta_mono_tri+0x136>
 8004968:	4b3f      	ldr	r3, [pc, #252]	; (8004a68 <detecta_mono_tri+0x220>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d106      	bne.n	800497e <detecta_mono_tri+0x136>
 8004970:	4b3e      	ldr	r3, [pc, #248]	; (8004a6c <detecta_mono_tri+0x224>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d102      	bne.n	800497e <detecta_mono_tri+0x136>
				Trifasico = 0;
 8004978:	4b3d      	ldr	r3, [pc, #244]	; (8004a70 <detecta_mono_tri+0x228>)
 800497a:	2200      	movs	r2, #0
 800497c:	701a      	strb	r2, [r3, #0]
			}
		}
		if(fase1 ==1 && (fase2 ^ fase3)){
 800497e:	4b39      	ldr	r3, [pc, #228]	; (8004a64 <detecta_mono_tri+0x21c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d108      	bne.n	8004998 <detecta_mono_tri+0x150>
 8004986:	4b38      	ldr	r3, [pc, #224]	; (8004a68 <detecta_mono_tri+0x220>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	4b38      	ldr	r3, [pc, #224]	; (8004a6c <detecta_mono_tri+0x224>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d002      	beq.n	8004998 <detecta_mono_tri+0x150>
			//erro
			hold_state_erro_conexao_fase = 1;
 8004992:	4b38      	ldr	r3, [pc, #224]	; (8004a74 <detecta_mono_tri+0x22c>)
 8004994:	2201      	movs	r2, #1
 8004996:	701a      	strb	r2, [r3, #0]
		}
		if(fase1 == 0){
 8004998:	4b32      	ldr	r3, [pc, #200]	; (8004a64 <detecta_mono_tri+0x21c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d102      	bne.n	80049a6 <detecta_mono_tri+0x15e>
			//erro
			hold_state_erro_conexao_fase = 1;
 80049a0:	4b34      	ldr	r3, [pc, #208]	; (8004a74 <detecta_mono_tri+0x22c>)
 80049a2:	2201      	movs	r2, #1
 80049a4:	701a      	strb	r2, [r3, #0]
		}
	}
	if(fase1 == 0){
 80049a6:	4b2f      	ldr	r3, [pc, #188]	; (8004a64 <detecta_mono_tri+0x21c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d158      	bne.n	8004a60 <detecta_mono_tri+0x218>
		HAL_Delay(1);
 80049ae:	2001      	movs	r0, #1
 80049b0:	f003 fd5c 	bl	800846c <HAL_Delay>
		atualiza_tensao_fase_neutro_tri();
 80049b4:	f7fe fc1c 	bl	80031f0 <atualiza_tensao_fase_neutro_tri>
		//condição para determinar se é monofásico ou trifásico
		if(fase1 == 1 && fase2 == 1 && fase3 == 1){
 80049b8:	4b2a      	ldr	r3, [pc, #168]	; (8004a64 <detecta_mono_tri+0x21c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d11b      	bne.n	80049f8 <detecta_mono_tri+0x1b0>
 80049c0:	4b29      	ldr	r3, [pc, #164]	; (8004a68 <detecta_mono_tri+0x220>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d117      	bne.n	80049f8 <detecta_mono_tri+0x1b0>
 80049c8:	4b28      	ldr	r3, [pc, #160]	; (8004a6c <detecta_mono_tri+0x224>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d113      	bne.n	80049f8 <detecta_mono_tri+0x1b0>
			HAL_Delay(1);
 80049d0:	2001      	movs	r0, #1
 80049d2:	f003 fd4b 	bl	800846c <HAL_Delay>
			atualiza_tensao_fase_neutro_tri();
 80049d6:	f7fe fc0b 	bl	80031f0 <atualiza_tensao_fase_neutro_tri>
			if(fase1 == 1 && fase2 == 1 && fase3 == 1){
 80049da:	4b22      	ldr	r3, [pc, #136]	; (8004a64 <detecta_mono_tri+0x21c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d10a      	bne.n	80049f8 <detecta_mono_tri+0x1b0>
 80049e2:	4b21      	ldr	r3, [pc, #132]	; (8004a68 <detecta_mono_tri+0x220>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d106      	bne.n	80049f8 <detecta_mono_tri+0x1b0>
 80049ea:	4b20      	ldr	r3, [pc, #128]	; (8004a6c <detecta_mono_tri+0x224>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d102      	bne.n	80049f8 <detecta_mono_tri+0x1b0>
				Trifasico = 1;
 80049f2:	4b1f      	ldr	r3, [pc, #124]	; (8004a70 <detecta_mono_tri+0x228>)
 80049f4:	2201      	movs	r2, #1
 80049f6:	701a      	strb	r2, [r3, #0]
			}
		}
		if(fase1 == 1 && fase2 == 0 && fase3 == 0){
 80049f8:	4b1a      	ldr	r3, [pc, #104]	; (8004a64 <detecta_mono_tri+0x21c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d11b      	bne.n	8004a38 <detecta_mono_tri+0x1f0>
 8004a00:	4b19      	ldr	r3, [pc, #100]	; (8004a68 <detecta_mono_tri+0x220>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d117      	bne.n	8004a38 <detecta_mono_tri+0x1f0>
 8004a08:	4b18      	ldr	r3, [pc, #96]	; (8004a6c <detecta_mono_tri+0x224>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d113      	bne.n	8004a38 <detecta_mono_tri+0x1f0>
			HAL_Delay(1);
 8004a10:	2001      	movs	r0, #1
 8004a12:	f003 fd2b 	bl	800846c <HAL_Delay>
			atualiza_tensao_fase_neutro_tri();
 8004a16:	f7fe fbeb 	bl	80031f0 <atualiza_tensao_fase_neutro_tri>
			if(fase1 == 1 && fase2 == 0 && fase3 == 0){
 8004a1a:	4b12      	ldr	r3, [pc, #72]	; (8004a64 <detecta_mono_tri+0x21c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d10a      	bne.n	8004a38 <detecta_mono_tri+0x1f0>
 8004a22:	4b11      	ldr	r3, [pc, #68]	; (8004a68 <detecta_mono_tri+0x220>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <detecta_mono_tri+0x1f0>
 8004a2a:	4b10      	ldr	r3, [pc, #64]	; (8004a6c <detecta_mono_tri+0x224>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d102      	bne.n	8004a38 <detecta_mono_tri+0x1f0>
				Trifasico = 0;
 8004a32:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <detecta_mono_tri+0x228>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	701a      	strb	r2, [r3, #0]
			}
		}
		if(fase1 ==1 && (fase2 ^ fase3)){
 8004a38:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <detecta_mono_tri+0x21c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d108      	bne.n	8004a52 <detecta_mono_tri+0x20a>
 8004a40:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <detecta_mono_tri+0x220>)
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <detecta_mono_tri+0x224>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d002      	beq.n	8004a52 <detecta_mono_tri+0x20a>
			//erro
			hold_state_erro_conexao_fase = 1;
 8004a4c:	4b09      	ldr	r3, [pc, #36]	; (8004a74 <detecta_mono_tri+0x22c>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	701a      	strb	r2, [r3, #0]
		}
		if(fase1 == 0){
 8004a52:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <detecta_mono_tri+0x21c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d102      	bne.n	8004a60 <detecta_mono_tri+0x218>
			//erro
			hold_state_erro_conexao_fase = 1;
 8004a5a:	4b06      	ldr	r3, [pc, #24]	; (8004a74 <detecta_mono_tri+0x22c>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8004a60:	bf00      	nop
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	20000248 	.word	0x20000248
 8004a68:	2000024c 	.word	0x2000024c
 8004a6c:	20000250 	.word	0x20000250
 8004a70:	20000234 	.word	0x20000234
 8004a74:	20000279 	.word	0x20000279

08004a78 <detecta_orderm_fases>:

void detecta_orderm_fases(){
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b088      	sub	sp, #32
 8004a7c:	af00      	add	r7, sp, #0
	int zerocrossing_flag1;
	int zerocrossing_flag2;
	int zerocrossing_flag3;

	//marca o tempo inicial
	start_time = HAL_GetTick();
 8004a7e:	f003 fceb 	bl	8008458 <HAL_GetTick>
 8004a82:	4603      	mov	r3, r0
 8004a84:	61fb      	str	r3, [r7, #28]
	//le o estado atual do zerocrossing da fase 1 ref
	zerocrossing_flag1 = HAL_GPIO_ReadPin(ZC1_GPIO_Port, ZC1_Pin);
 8004a86:	2101      	movs	r1, #1
 8004a88:	484f      	ldr	r0, [pc, #316]	; (8004bc8 <detecta_orderm_fases+0x150>)
 8004a8a:	f005 f983 	bl	8009d94 <HAL_GPIO_ReadPin>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	61bb      	str	r3, [r7, #24]
	//espera o zerocrossing ocorrer na fase 1
	while(zerocrossing_flag1 == HAL_GPIO_ReadPin(ZC1_GPIO_Port, ZC1_Pin) && (HAL_GetTick()-start_time) < 50);
 8004a92:	bf00      	nop
 8004a94:	2101      	movs	r1, #1
 8004a96:	484c      	ldr	r0, [pc, #304]	; (8004bc8 <detecta_orderm_fases+0x150>)
 8004a98:	f005 f97c 	bl	8009d94 <HAL_GPIO_ReadPin>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d106      	bne.n	8004ab4 <detecta_orderm_fases+0x3c>
 8004aa6:	f003 fcd7 	bl	8008458 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b31      	cmp	r3, #49	; 0x31
 8004ab2:	d9ef      	bls.n	8004a94 <detecta_orderm_fases+0x1c>
	//marca o tempo em que ocorreu o zerocrossing da fase 1
	tempo_fase1 = HAL_GetTick();
 8004ab4:	f003 fcd0 	bl	8008458 <HAL_GetTick>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	617b      	str	r3, [r7, #20]
	//le o estado atual do zerocrossing da fase 2
	zerocrossing_flag2 = HAL_GPIO_ReadPin(ZC2_GPIO_Port, ZC2_Pin);
 8004abc:	2101      	movs	r1, #1
 8004abe:	4843      	ldr	r0, [pc, #268]	; (8004bcc <detecta_orderm_fases+0x154>)
 8004ac0:	f005 f968 	bl	8009d94 <HAL_GPIO_ReadPin>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	613b      	str	r3, [r7, #16]
	//marca o tempo inicial
	start_time = HAL_GetTick();
 8004ac8:	f003 fcc6 	bl	8008458 <HAL_GetTick>
 8004acc:	4603      	mov	r3, r0
 8004ace:	61fb      	str	r3, [r7, #28]
	//espera ocorrer o zerocrossing da próxima fase 2
	while(zerocrossing_flag2 == HAL_GPIO_ReadPin(ZC2_GPIO_Port, ZC2_Pin) && (HAL_GetTick()-start_time) < 50);
 8004ad0:	bf00      	nop
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	483d      	ldr	r0, [pc, #244]	; (8004bcc <detecta_orderm_fases+0x154>)
 8004ad6:	f005 f95d 	bl	8009d94 <HAL_GPIO_ReadPin>
 8004ada:	4603      	mov	r3, r0
 8004adc:	461a      	mov	r2, r3
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d106      	bne.n	8004af2 <detecta_orderm_fases+0x7a>
 8004ae4:	f003 fcb8 	bl	8008458 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b31      	cmp	r3, #49	; 0x31
 8004af0:	d9ef      	bls.n	8004ad2 <detecta_orderm_fases+0x5a>
	//marca o tempo em que ocorreu o zerocrossing da fase 2
	tempo_fase2 = HAL_GetTick() - tempo_fase1;
 8004af2:	f003 fcb1 	bl	8008458 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	60fb      	str	r3, [r7, #12]


	//marca o tempo inicial
	start_time = HAL_GetTick();
 8004afe:	f003 fcab 	bl	8008458 <HAL_GetTick>
 8004b02:	4603      	mov	r3, r0
 8004b04:	61fb      	str	r3, [r7, #28]
	//le o estado atual do zerocrossing da fase 1 ref
	zerocrossing_flag1 = HAL_GPIO_ReadPin(ZC1_GPIO_Port, ZC1_Pin);
 8004b06:	2101      	movs	r1, #1
 8004b08:	482f      	ldr	r0, [pc, #188]	; (8004bc8 <detecta_orderm_fases+0x150>)
 8004b0a:	f005 f943 	bl	8009d94 <HAL_GPIO_ReadPin>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	61bb      	str	r3, [r7, #24]
	//espera o zerocrossing ocorrer na fase 1
	while(zerocrossing_flag1 == HAL_GPIO_ReadPin(ZC1_GPIO_Port, ZC1_Pin) && (HAL_GetTick()-start_time) < 50);
 8004b12:	bf00      	nop
 8004b14:	2101      	movs	r1, #1
 8004b16:	482c      	ldr	r0, [pc, #176]	; (8004bc8 <detecta_orderm_fases+0x150>)
 8004b18:	f005 f93c 	bl	8009d94 <HAL_GPIO_ReadPin>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	461a      	mov	r2, r3
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d106      	bne.n	8004b34 <detecta_orderm_fases+0xbc>
 8004b26:	f003 fc97 	bl	8008458 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b31      	cmp	r3, #49	; 0x31
 8004b32:	d9ef      	bls.n	8004b14 <detecta_orderm_fases+0x9c>
	//marca o tempo em que ocorreu o zerocrossing da fase 1
	tempo_fase1 = HAL_GetTick();
 8004b34:	f003 fc90 	bl	8008458 <HAL_GetTick>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	617b      	str	r3, [r7, #20]
	//le o estado atual do zerocrossing da fase 3
	zerocrossing_flag3 = HAL_GPIO_ReadPin(ZC3_GPIO_Port, ZC3_Pin);
 8004b3c:	2102      	movs	r1, #2
 8004b3e:	4823      	ldr	r0, [pc, #140]	; (8004bcc <detecta_orderm_fases+0x154>)
 8004b40:	f005 f928 	bl	8009d94 <HAL_GPIO_ReadPin>
 8004b44:	4603      	mov	r3, r0
 8004b46:	60bb      	str	r3, [r7, #8]
	//marca o tempo inicial
	start_time = HAL_GetTick();
 8004b48:	f003 fc86 	bl	8008458 <HAL_GetTick>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	61fb      	str	r3, [r7, #28]
	//espera ocorrer o zerocrossing da fase 3
	while(zerocrossing_flag3 == HAL_GPIO_ReadPin(ZC3_GPIO_Port, ZC3_Pin) && (HAL_GetTick()-start_time) < 50);
 8004b50:	bf00      	nop
 8004b52:	2102      	movs	r1, #2
 8004b54:	481d      	ldr	r0, [pc, #116]	; (8004bcc <detecta_orderm_fases+0x154>)
 8004b56:	f005 f91d 	bl	8009d94 <HAL_GPIO_ReadPin>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d106      	bne.n	8004b72 <detecta_orderm_fases+0xfa>
 8004b64:	f003 fc78 	bl	8008458 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b31      	cmp	r3, #49	; 0x31
 8004b70:	d9ef      	bls.n	8004b52 <detecta_orderm_fases+0xda>
	//marca o tempo em que ocorreu o zerocrossing da fase 3
	tempo_fase3 = HAL_GetTick() - tempo_fase1;
 8004b72:	f003 fc71 	bl	8008458 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	607b      	str	r3, [r7, #4]

	if(tempo_fase2 < tempo_fase3){
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	da08      	bge.n	8004b98 <detecta_orderm_fases+0x120>
		segundo_zerocrossing = 2;
 8004b86:	4b12      	ldr	r3, [pc, #72]	; (8004bd0 <detecta_orderm_fases+0x158>)
 8004b88:	2202      	movs	r2, #2
 8004b8a:	601a      	str	r2, [r3, #0]
		terceiro_zerocrossing = 3;
 8004b8c:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <detecta_orderm_fases+0x15c>)
 8004b8e:	2203      	movs	r2, #3
 8004b90:	601a      	str	r2, [r3, #0]
		hold_state_erro_detectar_ordem_fases = 0;
 8004b92:	4b11      	ldr	r3, [pc, #68]	; (8004bd8 <detecta_orderm_fases+0x160>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	701a      	strb	r2, [r3, #0]
	}
	if(tempo_fase3 < tempo_fase2){
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	da08      	bge.n	8004bb2 <detecta_orderm_fases+0x13a>
		segundo_zerocrossing = 3;
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <detecta_orderm_fases+0x158>)
 8004ba2:	2203      	movs	r2, #3
 8004ba4:	601a      	str	r2, [r3, #0]
		terceiro_zerocrossing = 2;
 8004ba6:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <detecta_orderm_fases+0x15c>)
 8004ba8:	2202      	movs	r2, #2
 8004baa:	601a      	str	r2, [r3, #0]
		hold_state_erro_detectar_ordem_fases = 0;
 8004bac:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <detecta_orderm_fases+0x160>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	701a      	strb	r2, [r3, #0]
	}
	if(tempo_fase2 == tempo_fase3){
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d102      	bne.n	8004bc0 <detecta_orderm_fases+0x148>
		hold_state_erro_detectar_ordem_fases = 1;
 8004bba:	4b07      	ldr	r3, [pc, #28]	; (8004bd8 <detecta_orderm_fases+0x160>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	701a      	strb	r2, [r3, #0]
	}
}
 8004bc0:	bf00      	nop
 8004bc2:	3720      	adds	r7, #32
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40010800 	.word	0x40010800
 8004bcc:	40010c00 	.word	0x40010c00
 8004bd0:	20000260 	.word	0x20000260
 8004bd4:	20000264 	.word	0x20000264
 8004bd8:	20000278 	.word	0x20000278

08004bdc <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	e016      	b.n	8004c18 <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	029b      	lsls	r3, r3, #10
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d20b      	bcs.n	8004c12 <GetPage+0x36>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004c00:	029b      	lsls	r3, r3, #10
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d304      	bcc.n	8004c12 <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004c0e:	029b      	lsls	r3, r3, #10
 8004c10:	e006      	b.n	8004c20 <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	3301      	adds	r3, #1
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c1c:	dde5      	ble.n	8004bea <GetPage+0xe>
	  }
  }

  return 0;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr
	...

08004c2c <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8004c2c:	b5b0      	push	{r4, r5, r7, lr}
 8004c2e:	b08a      	sub	sp, #40	; 0x28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	4613      	mov	r3, r2
 8004c38:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8004c3e:	f004 fd8b 	bl	8009758 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f7ff ffca 	bl	8004bdc <GetPage>
 8004c48:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8004c4a:	88fb      	ldrh	r3, [r7, #6]
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	461a      	mov	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8004c56:	69f8      	ldr	r0, [r7, #28]
 8004c58:	f7ff ffc0 	bl	8004bdc <GetPage>
 8004c5c:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8004c5e:	4b20      	ldr	r3, [pc, #128]	; (8004ce0 <Flash_Write_Data+0xb4>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8004c64:	4a1e      	ldr	r2, [pc, #120]	; (8004ce0 <Flash_Write_Data+0xb4>)
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	0a9b      	lsrs	r3, r3, #10
 8004c72:	3301      	adds	r3, #1
 8004c74:	4a1a      	ldr	r2, [pc, #104]	; (8004ce0 <Flash_Write_Data+0xb4>)
 8004c76:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8004c78:	f107 0314 	add.w	r3, r7, #20
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4818      	ldr	r0, [pc, #96]	; (8004ce0 <Flash_Write_Data+0xb4>)
 8004c80:	f004 fe5c 	bl	800993c <HAL_FLASHEx_Erase>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d01f      	beq.n	8004cca <Flash_Write_Data+0x9e>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8004c8a:	f004 fd9b 	bl	80097c4 <HAL_FLASH_GetError>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	e022      	b.n	8004cd8 <Flash_Write_Data+0xac>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	4413      	add	r3, r2
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	461c      	mov	r4, r3
 8004ca0:	4615      	mov	r5, r2
 8004ca2:	4622      	mov	r2, r4
 8004ca4:	462b      	mov	r3, r5
 8004ca6:	68f9      	ldr	r1, [r7, #12]
 8004ca8:	2002      	movs	r0, #2
 8004caa:	f004 fce5 	bl	8009678 <HAL_FLASH_Program>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d106      	bne.n	8004cc2 <Flash_Write_Data+0x96>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc0:	e003      	b.n	8004cca <Flash_Write_Data+0x9e>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8004cc2:	f004 fd7f 	bl	80097c4 <HAL_FLASH_GetError>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	e006      	b.n	8004cd8 <Flash_Write_Data+0xac>
	   while (sofar<numberofwords)
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	dbdf      	blt.n	8004c92 <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8004cd2:	f004 fd67 	bl	80097a4 <HAL_FLASH_Lock>

	   return 0;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3728      	adds	r7, #40	; 0x28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bdb0      	pop	{r4, r5, r7, pc}
 8004ce0:	20000288 	.word	0x20000288

08004ce4 <WriteChar>:
//       SPI_WRITE16(y2);
//       writeCommand(GC9A01A_RAMWR); // Write to RAM
//     }

}
void WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8004ce4:	b082      	sub	sp, #8
 8004ce6:	b590      	push	{r4, r7, lr}
 8004ce8:	b089      	sub	sp, #36	; 0x24
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	637b      	str	r3, [r7, #52]	; 0x34
 8004cee:	4603      	mov	r3, r0
 8004cf0:	80fb      	strh	r3, [r7, #6]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	80bb      	strh	r3, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    //SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
    LCD_SetPos(x, y, x+font.width-1, y+font.height-1);
 8004cfa:	88f8      	ldrh	r0, [r7, #6]
 8004cfc:	88b9      	ldrh	r1, [r7, #4]
 8004cfe:	88fb      	ldrh	r3, [r7, #6]
 8004d00:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8004d04:	4413      	add	r3, r2
 8004d06:	3b01      	subs	r3, #1
 8004d08:	461c      	mov	r4, r3
 8004d0a:	88bb      	ldrh	r3, [r7, #4]
 8004d0c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8004d10:	4413      	add	r3, r2
 8004d12:	3b01      	subs	r3, #1
 8004d14:	4622      	mov	r2, r4
 8004d16:	f000 fc36 	bl	8005586 <LCD_SetPos>
    for(i = 0; i < font.height; i++) {
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61fb      	str	r3, [r7, #28]
 8004d1e:	e043      	b.n	8004da8 <WriteChar+0xc4>
        b = font.data[(ch - 32) * font.height + i];
 8004d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	3b20      	subs	r3, #32
 8004d26:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8004d2a:	fb01 f303 	mul.w	r3, r1, r3
 8004d2e:	4619      	mov	r1, r3
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	440b      	add	r3, r1
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	4413      	add	r3, r2
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61bb      	str	r3, [r7, #24]
 8004d40:	e029      	b.n	8004d96 <WriteChar+0xb2>
            if((b << j) & 0x8000)  {
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00e      	beq.n	8004d70 <WriteChar+0x8c>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8004d52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004d54:	0a1b      	lsrs	r3, r3, #8
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	743b      	strb	r3, [r7, #16]
 8004d5c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	747b      	strb	r3, [r7, #17]
                Write_Bytes(data, sizeof(data));
 8004d62:	f107 0310 	add.w	r3, r7, #16
 8004d66:	2102      	movs	r1, #2
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 f8cd 	bl	8004f08 <Write_Bytes>
 8004d6e:	e00f      	b.n	8004d90 <WriteChar+0xac>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8004d70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d74:	0a1b      	lsrs	r3, r3, #8
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	733b      	strb	r3, [r7, #12]
 8004d7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	737b      	strb	r3, [r7, #13]
                Write_Bytes(data, sizeof(data));
 8004d84:	f107 030c 	add.w	r3, r7, #12
 8004d88:	2102      	movs	r1, #2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 f8bc 	bl	8004f08 <Write_Bytes>
        for(j = 0; j < font.width; j++) {
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	3301      	adds	r3, #1
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d3cf      	bcc.n	8004d42 <WriteChar+0x5e>
    for(i = 0; i < font.height; i++) {
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	3301      	adds	r3, #1
 8004da6:	61fb      	str	r3, [r7, #28]
 8004da8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004dac:	461a      	mov	r2, r3
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d3b5      	bcc.n	8004d20 <WriteChar+0x3c>
            }
        }
    }
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop
 8004db8:	3724      	adds	r7, #36	; 0x24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004dc0:	b002      	add	sp, #8
 8004dc2:	4770      	bx	lr

08004dc4 <WriteString>:
void WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b088      	sub	sp, #32
 8004dca:	af04      	add	r7, sp, #16
 8004dcc:	603a      	str	r2, [r7, #0]
 8004dce:	61fb      	str	r3, [r7, #28]
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	80fb      	strh	r3, [r7, #6]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	80bb      	strh	r3, [r7, #4]
	LCD_CS_0;
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004dde:	4825      	ldr	r0, [pc, #148]	; (8004e74 <WriteString+0xb0>)
 8004de0:	f004 ffef 	bl	8009dc2 <HAL_GPIO_WritePin>
	uint8_t _width=240;
 8004de4:	23f0      	movs	r3, #240	; 0xf0
 8004de6:	73fb      	strb	r3, [r7, #15]
	uint8_t _height=240;
 8004de8:	23f0      	movs	r3, #240	; 0xf0
 8004dea:	73bb      	strb	r3, [r7, #14]

    while(*str) {
 8004dec:	e02f      	b.n	8004e4e <WriteString+0x8a>
        if(x + font.width >= _width) {
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	7f3a      	ldrb	r2, [r7, #28]
 8004df2:	441a      	add	r2, r3
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	db14      	blt.n	8004e24 <WriteString+0x60>
            x = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8004dfe:	7f7b      	ldrb	r3, [r7, #29]
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	88bb      	ldrh	r3, [r7, #4]
 8004e04:	4413      	add	r3, r2
 8004e06:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8004e08:	88bb      	ldrh	r3, [r7, #4]
 8004e0a:	7f7a      	ldrb	r2, [r7, #29]
 8004e0c:	441a      	add	r2, r3
 8004e0e:	7bbb      	ldrb	r3, [r7, #14]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	da21      	bge.n	8004e58 <WriteString+0x94>
                break;
            }

            if(*str == ' ') {
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d103      	bne.n	8004e24 <WriteString+0x60>
                // skip spaces in the beginning of the new line
                str++;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	603b      	str	r3, [r7, #0]
                continue;
 8004e22:	e014      	b.n	8004e4e <WriteString+0x8a>
            }
        }

        WriteChar(x, y, *str, font, color, bgcolor);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	781a      	ldrb	r2, [r3, #0]
 8004e28:	88b9      	ldrh	r1, [r7, #4]
 8004e2a:	88f8      	ldrh	r0, [r7, #6]
 8004e2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e2e:	9302      	str	r3, [sp, #8]
 8004e30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e32:	9301      	str	r3, [sp, #4]
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f7ff ff53 	bl	8004ce4 <WriteChar>
        x += font.width;
 8004e3e:	7f3b      	ldrb	r3, [r7, #28]
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	4413      	add	r3, r2
 8004e46:	80fb      	strh	r3, [r7, #6]
        str++;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	603b      	str	r3, [r7, #0]
    while(*str) {
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1cb      	bne.n	8004dee <WriteString+0x2a>
 8004e56:	e000      	b.n	8004e5a <WriteString+0x96>
                break;
 8004e58:	bf00      	nop
    }

    LCD_CS_1;
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e60:	4804      	ldr	r0, [pc, #16]	; (8004e74 <WriteString+0xb0>)
 8004e62:	f004 ffae 	bl	8009dc2 <HAL_GPIO_WritePin>
}
 8004e66:	bf00      	nop
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e70:	b002      	add	sp, #8
 8004e72:	4770      	bx	lr
 8004e74:	40010c00 	.word	0x40010c00

08004e78 <Write_Cmd_Data>:
//===============================================================
//write parameter

void  Write_Cmd_Data (unsigned char CMDP)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	71fb      	strb	r3, [r7, #7]
    LCD_CS_0;
 8004e82:	2200      	movs	r2, #0
 8004e84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e88:	480b      	ldr	r0, [pc, #44]	; (8004eb8 <Write_Cmd_Data+0x40>)
 8004e8a:	f004 ff9a 	bl	8009dc2 <HAL_GPIO_WritePin>
   	LCD_DC_1;
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e94:	4809      	ldr	r0, [pc, #36]	; (8004ebc <Write_Cmd_Data+0x44>)
 8004e96:	f004 ff94 	bl	8009dc2 <HAL_GPIO_WritePin>

   	SPI_Write(&CMDP, 1);
 8004e9a:	1dfb      	adds	r3, r7, #7
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 f858 	bl	8004f54 <SPI_Write>

   	LCD_CS_1;
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004eaa:	4803      	ldr	r0, [pc, #12]	; (8004eb8 <Write_Cmd_Data+0x40>)
 8004eac:	f004 ff89 	bl	8009dc2 <HAL_GPIO_WritePin>
}
 8004eb0:	bf00      	nop
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40010c00 	.word	0x40010c00
 8004ebc:	40010800 	.word	0x40010800

08004ec0 <Write_Cmd>:

//=============================================================
//write command

void Write_Cmd(unsigned char CMD)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	71fb      	strb	r3, [r7, #7]
    LCD_CS_0;
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ed0:	480b      	ldr	r0, [pc, #44]	; (8004f00 <Write_Cmd+0x40>)
 8004ed2:	f004 ff76 	bl	8009dc2 <HAL_GPIO_WritePin>
   	LCD_DC_0;
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004edc:	4809      	ldr	r0, [pc, #36]	; (8004f04 <Write_Cmd+0x44>)
 8004ede:	f004 ff70 	bl	8009dc2 <HAL_GPIO_WritePin>

   	SPI_Write(&CMD, 1);
 8004ee2:	1dfb      	adds	r3, r7, #7
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 f834 	bl	8004f54 <SPI_Write>

   	LCD_CS_1;
 8004eec:	2201      	movs	r2, #1
 8004eee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ef2:	4803      	ldr	r0, [pc, #12]	; (8004f00 <Write_Cmd+0x40>)
 8004ef4:	f004 ff65 	bl	8009dc2 <HAL_GPIO_WritePin>
}
 8004ef8:	bf00      	nop
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40010c00 	.word	0x40010c00
 8004f04:	40010800 	.word	0x40010800

08004f08 <Write_Bytes>:
   	LCD_CS_1;
}


void Write_Bytes(unsigned char * pbuff, unsigned short size)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	460b      	mov	r3, r1
 8004f12:	807b      	strh	r3, [r7, #2]
    LCD_CS_0;
 8004f14:	2200      	movs	r2, #0
 8004f16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f1a:	480c      	ldr	r0, [pc, #48]	; (8004f4c <Write_Bytes+0x44>)
 8004f1c:	f004 ff51 	bl	8009dc2 <HAL_GPIO_WritePin>
   	LCD_DC_1;
 8004f20:	2201      	movs	r2, #1
 8004f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f26:	480a      	ldr	r0, [pc, #40]	; (8004f50 <Write_Bytes+0x48>)
 8004f28:	f004 ff4b 	bl	8009dc2 <HAL_GPIO_WritePin>

   	SPI_Write(pbuff, size);
 8004f2c:	887b      	ldrh	r3, [r7, #2]
 8004f2e:	4619      	mov	r1, r3
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f80f 	bl	8004f54 <SPI_Write>

   	LCD_CS_1;
 8004f36:	2201      	movs	r2, #1
 8004f38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f3c:	4803      	ldr	r0, [pc, #12]	; (8004f4c <Write_Bytes+0x44>)
 8004f3e:	f004 ff40 	bl	8009dc2 <HAL_GPIO_WritePin>
}
 8004f42:	bf00      	nop
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40010c00 	.word	0x40010c00
 8004f50:	40010800 	.word	0x40010800

08004f54 <SPI_Write>:


HAL_StatusTypeDef SPI_Write(uint8_t* pbuff, uint16_t size)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	807b      	strh	r3, [r7, #2]
	//DMA, use HAL_SPI_Transmit_DMA() function
    HAL_StatusTypeDef status =  HAL_SPI_Transmit_DMA(&hspi2, pbuff, size);
 8004f60:	887b      	ldrh	r3, [r7, #2]
 8004f62:	461a      	mov	r2, r3
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	4808      	ldr	r0, [pc, #32]	; (8004f88 <SPI_Write+0x34>)
 8004f68:	f006 fa12 	bl	800b390 <HAL_SPI_Transmit_DMA>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	73fb      	strb	r3, [r7, #15]
    while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){;}
 8004f70:	bf00      	nop
 8004f72:	4805      	ldr	r0, [pc, #20]	; (8004f88 <SPI_Write+0x34>)
 8004f74:	f006 fad9 	bl	800b52a <HAL_SPI_GetState>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d1f9      	bne.n	8004f72 <SPI_Write+0x1e>
    return status;
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]


    //no DMA, use HAL_SPI_Transmit() function
    //return HAL_SPI_Transmit(&hspi2, pbuff, size, 100);
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	20000384 	.word	0x20000384

08004f8c <GC9A01_Initial>:

//=============================================================
//LCD Initial

void GC9A01_Initial(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  	LCD_CS_1;
 8004f90:	2201      	movs	r2, #1
 8004f92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f96:	48fd      	ldr	r0, [pc, #1012]	; (800538c <GC9A01_Initial+0x400>)
 8004f98:	f004 ff13 	bl	8009dc2 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8004f9c:	2005      	movs	r0, #5
 8004f9e:	f003 fa65 	bl	800846c <HAL_Delay>
	LCD_RST_0;
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004fa8:	48f8      	ldr	r0, [pc, #992]	; (800538c <GC9A01_Initial+0x400>)
 8004faa:	f004 ff0a 	bl	8009dc2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8004fae:	200a      	movs	r0, #10
 8004fb0:	f003 fa5c 	bl	800846c <HAL_Delay>
	LCD_RST_1;
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004fba:	48f4      	ldr	r0, [pc, #976]	; (800538c <GC9A01_Initial+0x400>)
 8004fbc:	f004 ff01 	bl	8009dc2 <HAL_GPIO_WritePin>
	HAL_Delay(120);
 8004fc0:	2078      	movs	r0, #120	; 0x78
 8004fc2:	f003 fa53 	bl	800846c <HAL_Delay>


 //************* Start Initial Sequence **********//
	Write_Cmd(0xEF);
 8004fc6:	20ef      	movs	r0, #239	; 0xef
 8004fc8:	f7ff ff7a 	bl	8004ec0 <Write_Cmd>

	Write_Cmd(0xEB);
 8004fcc:	20eb      	movs	r0, #235	; 0xeb
 8004fce:	f7ff ff77 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x14);
 8004fd2:	2014      	movs	r0, #20
 8004fd4:	f7ff ff50 	bl	8004e78 <Write_Cmd_Data>

    Write_Cmd(0xFE);
 8004fd8:	20fe      	movs	r0, #254	; 0xfe
 8004fda:	f7ff ff71 	bl	8004ec0 <Write_Cmd>
	Write_Cmd(0xEF);
 8004fde:	20ef      	movs	r0, #239	; 0xef
 8004fe0:	f7ff ff6e 	bl	8004ec0 <Write_Cmd>

	Write_Cmd(0xEB);
 8004fe4:	20eb      	movs	r0, #235	; 0xeb
 8004fe6:	f7ff ff6b 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x14);
 8004fea:	2014      	movs	r0, #20
 8004fec:	f7ff ff44 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0x84);
 8004ff0:	2084      	movs	r0, #132	; 0x84
 8004ff2:	f7ff ff65 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x40);
 8004ff6:	2040      	movs	r0, #64	; 0x40
 8004ff8:	f7ff ff3e 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0x85);
 8004ffc:	2085      	movs	r0, #133	; 0x85
 8004ffe:	f7ff ff5f 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0xFF);
 8005002:	20ff      	movs	r0, #255	; 0xff
 8005004:	f7ff ff38 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0x86);
 8005008:	2086      	movs	r0, #134	; 0x86
 800500a:	f7ff ff59 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0xFF);
 800500e:	20ff      	movs	r0, #255	; 0xff
 8005010:	f7ff ff32 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0x87);
 8005014:	2087      	movs	r0, #135	; 0x87
 8005016:	f7ff ff53 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0xFF);
 800501a:	20ff      	movs	r0, #255	; 0xff
 800501c:	f7ff ff2c 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0x88);
 8005020:	2088      	movs	r0, #136	; 0x88
 8005022:	f7ff ff4d 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x0A);
 8005026:	200a      	movs	r0, #10
 8005028:	f7ff ff26 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0x89);
 800502c:	2089      	movs	r0, #137	; 0x89
 800502e:	f7ff ff47 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x21);
 8005032:	2021      	movs	r0, #33	; 0x21
 8005034:	f7ff ff20 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0x8A);
 8005038:	208a      	movs	r0, #138	; 0x8a
 800503a:	f7ff ff41 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x00);
 800503e:	2000      	movs	r0, #0
 8005040:	f7ff ff1a 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0x8B);
 8005044:	208b      	movs	r0, #139	; 0x8b
 8005046:	f7ff ff3b 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x80);
 800504a:	2080      	movs	r0, #128	; 0x80
 800504c:	f7ff ff14 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0x8C);
 8005050:	208c      	movs	r0, #140	; 0x8c
 8005052:	f7ff ff35 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x01);
 8005056:	2001      	movs	r0, #1
 8005058:	f7ff ff0e 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0x8D);
 800505c:	208d      	movs	r0, #141	; 0x8d
 800505e:	f7ff ff2f 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x01);
 8005062:	2001      	movs	r0, #1
 8005064:	f7ff ff08 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0x8E);
 8005068:	208e      	movs	r0, #142	; 0x8e
 800506a:	f7ff ff29 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0xFF);
 800506e:	20ff      	movs	r0, #255	; 0xff
 8005070:	f7ff ff02 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0x8F);
 8005074:	208f      	movs	r0, #143	; 0x8f
 8005076:	f7ff ff23 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0xFF);
 800507a:	20ff      	movs	r0, #255	; 0xff
 800507c:	f7ff fefc 	bl	8004e78 <Write_Cmd_Data>


	Write_Cmd(0xB6);
 8005080:	20b6      	movs	r0, #182	; 0xb6
 8005082:	f7ff ff1d 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x00);
 8005086:	2000      	movs	r0, #0
 8005088:	f7ff fef6 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 800508c:	2000      	movs	r0, #0
 800508e:	f7ff fef3 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0x36);
 8005092:	2036      	movs	r0, #54	; 0x36
 8005094:	f7ff ff14 	bl	8004ec0 <Write_Cmd>

	if(USE_HORIZONTAL==0)Write_Cmd_Data(0x18);
	else if(USE_HORIZONTAL==1)Write_Cmd_Data(0x28);
 8005098:	2028      	movs	r0, #40	; 0x28
 800509a:	f7ff feed 	bl	8004e78 <Write_Cmd_Data>
	else if(USE_HORIZONTAL==2)Write_Cmd_Data(0x48);
	else Write_Cmd_Data(0x88);



	Write_Cmd(0x3A);
 800509e:	203a      	movs	r0, #58	; 0x3a
 80050a0:	f7ff ff0e 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x05);
 80050a4:	2005      	movs	r0, #5
 80050a6:	f7ff fee7 	bl	8004e78 <Write_Cmd_Data>


	Write_Cmd(0x90);
 80050aa:	2090      	movs	r0, #144	; 0x90
 80050ac:	f7ff ff08 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x08);
 80050b0:	2008      	movs	r0, #8
 80050b2:	f7ff fee1 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x08);
 80050b6:	2008      	movs	r0, #8
 80050b8:	f7ff fede 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x08);
 80050bc:	2008      	movs	r0, #8
 80050be:	f7ff fedb 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x08);
 80050c2:	2008      	movs	r0, #8
 80050c4:	f7ff fed8 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0xBD);
 80050c8:	20bd      	movs	r0, #189	; 0xbd
 80050ca:	f7ff fef9 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x06);
 80050ce:	2006      	movs	r0, #6
 80050d0:	f7ff fed2 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0xBC);
 80050d4:	20bc      	movs	r0, #188	; 0xbc
 80050d6:	f7ff fef3 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x00);
 80050da:	2000      	movs	r0, #0
 80050dc:	f7ff fecc 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0xFF);
 80050e0:	20ff      	movs	r0, #255	; 0xff
 80050e2:	f7ff feed 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x60);
 80050e6:	2060      	movs	r0, #96	; 0x60
 80050e8:	f7ff fec6 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x01);
 80050ec:	2001      	movs	r0, #1
 80050ee:	f7ff fec3 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x04);
 80050f2:	2004      	movs	r0, #4
 80050f4:	f7ff fec0 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0xC3);
 80050f8:	20c3      	movs	r0, #195	; 0xc3
 80050fa:	f7ff fee1 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x13);
 80050fe:	2013      	movs	r0, #19
 8005100:	f7ff feba 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd(0xC4);
 8005104:	20c4      	movs	r0, #196	; 0xc4
 8005106:	f7ff fedb 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x13);
 800510a:	2013      	movs	r0, #19
 800510c:	f7ff feb4 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0xC9);
 8005110:	20c9      	movs	r0, #201	; 0xc9
 8005112:	f7ff fed5 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x22);
 8005116:	2022      	movs	r0, #34	; 0x22
 8005118:	f7ff feae 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0xBE);
 800511c:	20be      	movs	r0, #190	; 0xbe
 800511e:	f7ff fecf 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x11);
 8005122:	2011      	movs	r0, #17
 8005124:	f7ff fea8 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0xE1);
 8005128:	20e1      	movs	r0, #225	; 0xe1
 800512a:	f7ff fec9 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x10);
 800512e:	2010      	movs	r0, #16
 8005130:	f7ff fea2 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x0E);
 8005134:	200e      	movs	r0, #14
 8005136:	f7ff fe9f 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0xDF);
 800513a:	20df      	movs	r0, #223	; 0xdf
 800513c:	f7ff fec0 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x21);
 8005140:	2021      	movs	r0, #33	; 0x21
 8005142:	f7ff fe99 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x0c);
 8005146:	200c      	movs	r0, #12
 8005148:	f7ff fe96 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x02);
 800514c:	2002      	movs	r0, #2
 800514e:	f7ff fe93 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0xF0);
 8005152:	20f0      	movs	r0, #240	; 0xf0
 8005154:	f7ff feb4 	bl	8004ec0 <Write_Cmd>
    Write_Cmd_Data(0x45);
 8005158:	2045      	movs	r0, #69	; 0x45
 800515a:	f7ff fe8d 	bl	8004e78 <Write_Cmd_Data>
    Write_Cmd_Data(0x09);
 800515e:	2009      	movs	r0, #9
 8005160:	f7ff fe8a 	bl	8004e78 <Write_Cmd_Data>
 	Write_Cmd_Data(0x08);
 8005164:	2008      	movs	r0, #8
 8005166:	f7ff fe87 	bl	8004e78 <Write_Cmd_Data>
  	Write_Cmd_Data(0x08);
 800516a:	2008      	movs	r0, #8
 800516c:	f7ff fe84 	bl	8004e78 <Write_Cmd_Data>
 	Write_Cmd_Data(0x26);
 8005170:	2026      	movs	r0, #38	; 0x26
 8005172:	f7ff fe81 	bl	8004e78 <Write_Cmd_Data>
 	Write_Cmd_Data(0x2A);
 8005176:	202a      	movs	r0, #42	; 0x2a
 8005178:	f7ff fe7e 	bl	8004e78 <Write_Cmd_Data>

 	Write_Cmd(0xF1);
 800517c:	20f1      	movs	r0, #241	; 0xf1
 800517e:	f7ff fe9f 	bl	8004ec0 <Write_Cmd>
 	Write_Cmd_Data(0x43);
 8005182:	2043      	movs	r0, #67	; 0x43
 8005184:	f7ff fe78 	bl	8004e78 <Write_Cmd_Data>
 	Write_Cmd_Data(0x70);
 8005188:	2070      	movs	r0, #112	; 0x70
 800518a:	f7ff fe75 	bl	8004e78 <Write_Cmd_Data>
 	Write_Cmd_Data(0x72);
 800518e:	2072      	movs	r0, #114	; 0x72
 8005190:	f7ff fe72 	bl	8004e78 <Write_Cmd_Data>
 	Write_Cmd_Data(0x36);
 8005194:	2036      	movs	r0, #54	; 0x36
 8005196:	f7ff fe6f 	bl	8004e78 <Write_Cmd_Data>
 	Write_Cmd_Data(0x37);
 800519a:	2037      	movs	r0, #55	; 0x37
 800519c:	f7ff fe6c 	bl	8004e78 <Write_Cmd_Data>
 	Write_Cmd_Data(0x6F);
 80051a0:	206f      	movs	r0, #111	; 0x6f
 80051a2:	f7ff fe69 	bl	8004e78 <Write_Cmd_Data>


 	Write_Cmd(0xF2);
 80051a6:	20f2      	movs	r0, #242	; 0xf2
 80051a8:	f7ff fe8a 	bl	8004ec0 <Write_Cmd>
 	Write_Cmd_Data(0x45);
 80051ac:	2045      	movs	r0, #69	; 0x45
 80051ae:	f7ff fe63 	bl	8004e78 <Write_Cmd_Data>
 	Write_Cmd_Data(0x09);
 80051b2:	2009      	movs	r0, #9
 80051b4:	f7ff fe60 	bl	8004e78 <Write_Cmd_Data>
 	Write_Cmd_Data(0x08);
 80051b8:	2008      	movs	r0, #8
 80051ba:	f7ff fe5d 	bl	8004e78 <Write_Cmd_Data>
 	Write_Cmd_Data(0x08);
 80051be:	2008      	movs	r0, #8
 80051c0:	f7ff fe5a 	bl	8004e78 <Write_Cmd_Data>
 	Write_Cmd_Data(0x26);
 80051c4:	2026      	movs	r0, #38	; 0x26
 80051c6:	f7ff fe57 	bl	8004e78 <Write_Cmd_Data>
 	Write_Cmd_Data(0x2A);
 80051ca:	202a      	movs	r0, #42	; 0x2a
 80051cc:	f7ff fe54 	bl	8004e78 <Write_Cmd_Data>

 	Write_Cmd(0xF3);
 80051d0:	20f3      	movs	r0, #243	; 0xf3
 80051d2:	f7ff fe75 	bl	8004ec0 <Write_Cmd>
 	Write_Cmd_Data(0x43);
 80051d6:	2043      	movs	r0, #67	; 0x43
 80051d8:	f7ff fe4e 	bl	8004e78 <Write_Cmd_Data>
 	Write_Cmd_Data(0x70);
 80051dc:	2070      	movs	r0, #112	; 0x70
 80051de:	f7ff fe4b 	bl	8004e78 <Write_Cmd_Data>
 	Write_Cmd_Data(0x72);
 80051e2:	2072      	movs	r0, #114	; 0x72
 80051e4:	f7ff fe48 	bl	8004e78 <Write_Cmd_Data>
 	Write_Cmd_Data(0x36);
 80051e8:	2036      	movs	r0, #54	; 0x36
 80051ea:	f7ff fe45 	bl	8004e78 <Write_Cmd_Data>
 	Write_Cmd_Data(0x37);
 80051ee:	2037      	movs	r0, #55	; 0x37
 80051f0:	f7ff fe42 	bl	8004e78 <Write_Cmd_Data>
 	Write_Cmd_Data(0x6F);
 80051f4:	206f      	movs	r0, #111	; 0x6f
 80051f6:	f7ff fe3f 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0xED);
 80051fa:	20ed      	movs	r0, #237	; 0xed
 80051fc:	f7ff fe60 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x1B);
 8005200:	201b      	movs	r0, #27
 8005202:	f7ff fe39 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x0B);
 8005206:	200b      	movs	r0, #11
 8005208:	f7ff fe36 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0xAE);
 800520c:	20ae      	movs	r0, #174	; 0xae
 800520e:	f7ff fe57 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x77);
 8005212:	2077      	movs	r0, #119	; 0x77
 8005214:	f7ff fe30 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0xCD);
 8005218:	20cd      	movs	r0, #205	; 0xcd
 800521a:	f7ff fe51 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x63);
 800521e:	2063      	movs	r0, #99	; 0x63
 8005220:	f7ff fe2a 	bl	8004e78 <Write_Cmd_Data>


	Write_Cmd(0x70);
 8005224:	2070      	movs	r0, #112	; 0x70
 8005226:	f7ff fe4b 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x07);
 800522a:	2007      	movs	r0, #7
 800522c:	f7ff fe24 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x07);
 8005230:	2007      	movs	r0, #7
 8005232:	f7ff fe21 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x04);
 8005236:	2004      	movs	r0, #4
 8005238:	f7ff fe1e 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x0E);
 800523c:	200e      	movs	r0, #14
 800523e:	f7ff fe1b 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x0F);
 8005242:	200f      	movs	r0, #15
 8005244:	f7ff fe18 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x09);
 8005248:	2009      	movs	r0, #9
 800524a:	f7ff fe15 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x07);
 800524e:	2007      	movs	r0, #7
 8005250:	f7ff fe12 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x08);
 8005254:	2008      	movs	r0, #8
 8005256:	f7ff fe0f 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x03);
 800525a:	2003      	movs	r0, #3
 800525c:	f7ff fe0c 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0xE8);
 8005260:	20e8      	movs	r0, #232	; 0xe8
 8005262:	f7ff fe2d 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x34);
 8005266:	2034      	movs	r0, #52	; 0x34
 8005268:	f7ff fe06 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0x62);
 800526c:	2062      	movs	r0, #98	; 0x62
 800526e:	f7ff fe27 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x18);
 8005272:	2018      	movs	r0, #24
 8005274:	f7ff fe00 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x0D);
 8005278:	200d      	movs	r0, #13
 800527a:	f7ff fdfd 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x71);
 800527e:	2071      	movs	r0, #113	; 0x71
 8005280:	f7ff fdfa 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0xED);
 8005284:	20ed      	movs	r0, #237	; 0xed
 8005286:	f7ff fdf7 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 800528a:	2070      	movs	r0, #112	; 0x70
 800528c:	f7ff fdf4 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 8005290:	2070      	movs	r0, #112	; 0x70
 8005292:	f7ff fdf1 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x18);
 8005296:	2018      	movs	r0, #24
 8005298:	f7ff fdee 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x0F);
 800529c:	200f      	movs	r0, #15
 800529e:	f7ff fdeb 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x71);
 80052a2:	2071      	movs	r0, #113	; 0x71
 80052a4:	f7ff fde8 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0xEF);
 80052a8:	20ef      	movs	r0, #239	; 0xef
 80052aa:	f7ff fde5 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 80052ae:	2070      	movs	r0, #112	; 0x70
 80052b0:	f7ff fde2 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 80052b4:	2070      	movs	r0, #112	; 0x70
 80052b6:	f7ff fddf 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0x63);
 80052ba:	2063      	movs	r0, #99	; 0x63
 80052bc:	f7ff fe00 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x18);
 80052c0:	2018      	movs	r0, #24
 80052c2:	f7ff fdd9 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x11);
 80052c6:	2011      	movs	r0, #17
 80052c8:	f7ff fdd6 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x71);
 80052cc:	2071      	movs	r0, #113	; 0x71
 80052ce:	f7ff fdd3 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0xF1);
 80052d2:	20f1      	movs	r0, #241	; 0xf1
 80052d4:	f7ff fdd0 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 80052d8:	2070      	movs	r0, #112	; 0x70
 80052da:	f7ff fdcd 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 80052de:	2070      	movs	r0, #112	; 0x70
 80052e0:	f7ff fdca 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x18);
 80052e4:	2018      	movs	r0, #24
 80052e6:	f7ff fdc7 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x13);
 80052ea:	2013      	movs	r0, #19
 80052ec:	f7ff fdc4 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x71);
 80052f0:	2071      	movs	r0, #113	; 0x71
 80052f2:	f7ff fdc1 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0xF3);
 80052f6:	20f3      	movs	r0, #243	; 0xf3
 80052f8:	f7ff fdbe 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 80052fc:	2070      	movs	r0, #112	; 0x70
 80052fe:	f7ff fdbb 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x70);
 8005302:	2070      	movs	r0, #112	; 0x70
 8005304:	f7ff fdb8 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0x64);
 8005308:	2064      	movs	r0, #100	; 0x64
 800530a:	f7ff fdd9 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x28);
 800530e:	2028      	movs	r0, #40	; 0x28
 8005310:	f7ff fdb2 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x29);
 8005314:	2029      	movs	r0, #41	; 0x29
 8005316:	f7ff fdaf 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0xF1);
 800531a:	20f1      	movs	r0, #241	; 0xf1
 800531c:	f7ff fdac 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x01);
 8005320:	2001      	movs	r0, #1
 8005322:	f7ff fda9 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0xF1);
 8005326:	20f1      	movs	r0, #241	; 0xf1
 8005328:	f7ff fda6 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 800532c:	2000      	movs	r0, #0
 800532e:	f7ff fda3 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x07);
 8005332:	2007      	movs	r0, #7
 8005334:	f7ff fda0 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0x66);
 8005338:	2066      	movs	r0, #102	; 0x66
 800533a:	f7ff fdc1 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x3C);
 800533e:	203c      	movs	r0, #60	; 0x3c
 8005340:	f7ff fd9a 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8005344:	2000      	movs	r0, #0
 8005346:	f7ff fd97 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0xCD);
 800534a:	20cd      	movs	r0, #205	; 0xcd
 800534c:	f7ff fd94 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x67);
 8005350:	2067      	movs	r0, #103	; 0x67
 8005352:	f7ff fd91 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x45);
 8005356:	2045      	movs	r0, #69	; 0x45
 8005358:	f7ff fd8e 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x45);
 800535c:	2045      	movs	r0, #69	; 0x45
 800535e:	f7ff fd8b 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x10);
 8005362:	2010      	movs	r0, #16
 8005364:	f7ff fd88 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8005368:	2000      	movs	r0, #0
 800536a:	f7ff fd85 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 800536e:	2000      	movs	r0, #0
 8005370:	f7ff fd82 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8005374:	2000      	movs	r0, #0
 8005376:	f7ff fd7f 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0x67);
 800537a:	2067      	movs	r0, #103	; 0x67
 800537c:	f7ff fda0 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x00);
 8005380:	2000      	movs	r0, #0
 8005382:	f7ff fd79 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x3C);
 8005386:	203c      	movs	r0, #60	; 0x3c
 8005388:	e002      	b.n	8005390 <GC9A01_Initial+0x404>
 800538a:	bf00      	nop
 800538c:	40010c00 	.word	0x40010c00
 8005390:	f7ff fd72 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 8005394:	2000      	movs	r0, #0
 8005396:	f7ff fd6f 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 800539a:	2000      	movs	r0, #0
 800539c:	f7ff fd6c 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 80053a0:	2000      	movs	r0, #0
 80053a2:	f7ff fd69 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x01);
 80053a6:	2001      	movs	r0, #1
 80053a8:	f7ff fd66 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x54);
 80053ac:	2054      	movs	r0, #84	; 0x54
 80053ae:	f7ff fd63 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x10);
 80053b2:	2010      	movs	r0, #16
 80053b4:	f7ff fd60 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x32);
 80053b8:	2032      	movs	r0, #50	; 0x32
 80053ba:	f7ff fd5d 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x98);
 80053be:	2098      	movs	r0, #152	; 0x98
 80053c0:	f7ff fd5a 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0x74);
 80053c4:	2074      	movs	r0, #116	; 0x74
 80053c6:	f7ff fd7b 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x10);
 80053ca:	2010      	movs	r0, #16
 80053cc:	f7ff fd54 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x85);
 80053d0:	2085      	movs	r0, #133	; 0x85
 80053d2:	f7ff fd51 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x80);
 80053d6:	2080      	movs	r0, #128	; 0x80
 80053d8:	f7ff fd4e 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 80053dc:	2000      	movs	r0, #0
 80053de:	f7ff fd4b 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 80053e2:	2000      	movs	r0, #0
 80053e4:	f7ff fd48 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x4E);
 80053e8:	204e      	movs	r0, #78	; 0x4e
 80053ea:	f7ff fd45 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x00);
 80053ee:	2000      	movs	r0, #0
 80053f0:	f7ff fd42 	bl	8004e78 <Write_Cmd_Data>

    Write_Cmd(0x98);
 80053f4:	2098      	movs	r0, #152	; 0x98
 80053f6:	f7ff fd63 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(0x3e);
 80053fa:	203e      	movs	r0, #62	; 0x3e
 80053fc:	f7ff fd3c 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(0x07);
 8005400:	2007      	movs	r0, #7
 8005402:	f7ff fd39 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0x35);
 8005406:	2035      	movs	r0, #53	; 0x35
 8005408:	f7ff fd5a 	bl	8004ec0 <Write_Cmd>
	Write_Cmd(0x21);
 800540c:	2021      	movs	r0, #33	; 0x21
 800540e:	f7ff fd57 	bl	8004ec0 <Write_Cmd>

	Write_Cmd(0x11);
 8005412:	2011      	movs	r0, #17
 8005414:	f7ff fd54 	bl	8004ec0 <Write_Cmd>
	HAL_Delay(120);
 8005418:	2078      	movs	r0, #120	; 0x78
 800541a:	f003 f827 	bl	800846c <HAL_Delay>
	Write_Cmd(0x29);
 800541e:	2029      	movs	r0, #41	; 0x29
 8005420:	f7ff fd4e 	bl	8004ec0 <Write_Cmd>
	HAL_Delay(20);
 8005424:	2014      	movs	r0, #20
 8005426:	f003 f821 	bl	800846c <HAL_Delay>
}
 800542a:	bf00      	nop
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop

08005430 <ClearScreen2>:
//===============================================================
//clear screen2
//Use DMA，faster
void ClearScreen2(unsigned int bColor)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af02      	add	r7, sp, #8
 8005436:	6078      	str	r0, [r7, #4]
	ClearWindow(0,0,GC9A01_TFTWIDTH,GC9A01_TFTHEIGHT,bColor);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	23f0      	movs	r3, #240	; 0xf0
 800543e:	22f0      	movs	r2, #240	; 0xf0
 8005440:	2100      	movs	r1, #0
 8005442:	2000      	movs	r0, #0
 8005444:	f000 f804 	bl	8005450 <ClearWindow>
}
 8005448:	bf00      	nop
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <ClearWindow>:

void ClearWindow(unsigned int startX, unsigned int startY, unsigned int endX, unsigned int endY, unsigned int bColor)
{
 8005450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005454:	b08f      	sub	sp, #60	; 0x3c
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	607a      	str	r2, [r7, #4]
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	466b      	mov	r3, sp
 8005462:	461e      	mov	r6, r3
 unsigned int i;

 //Exchange high 8bit and low 8bit of bColor for DMA batch transmit
 unsigned char hb = (bColor&0xFFFF) >> 8;
 8005464:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005466:	0a1b      	lsrs	r3, r3, #8
 8005468:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 unsigned char lb = bColor & 0xFF;
 800546c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800546e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 unsigned short tempColor = lb * 256 + hb;
 8005472:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005476:	b29b      	uxth	r3, r3
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	b29a      	uxth	r2, r3
 800547c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005480:	b29b      	uxth	r3, r3
 8005482:	4413      	add	r3, r2
 8005484:	863b      	strh	r3, [r7, #48]	; 0x30

 unsigned int totalSize = (endX-startX) * (endY - startY) * 2; // total clear window data size
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	6839      	ldr	r1, [r7, #0]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	1a8a      	subs	r2, r1, r2
 8005492:	fb02 f303 	mul.w	r3, r2, r3
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	62fb      	str	r3, [r7, #44]	; 0x2c
 unsigned int bufSize = 512;  // define bufSize, need less than DMA transmit size
 800549a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800549e:	62bb      	str	r3, [r7, #40]	; 0x28

 unsigned int loopNum = (totalSize - (totalSize % bufSize)) / bufSize; // transmit loop times
 80054a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80054a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054aa:	fb01 f202 	mul.w	r2, r1, r2
 80054ae:	1a9b      	subs	r3, r3, r2
 80054b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054b2:	1ad2      	subs	r2, r2, r3
 80054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
 unsigned int modNum = totalSize % bufSize;  // remainder data bytes
 80054bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80054c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054c6:	fb01 f202 	mul.w	r2, r1, r2
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	623b      	str	r3, [r7, #32]


 //use a tempBuf to initial bColor data, bufSize < DMA transmit size
 unsigned short tempBuf[bufSize];
 80054ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054d0:	460b      	mov	r3, r1
 80054d2:	3b01      	subs	r3, #1
 80054d4:	61fb      	str	r3, [r7, #28]
 80054d6:	2300      	movs	r3, #0
 80054d8:	4688      	mov	r8, r1
 80054da:	4699      	mov	r9, r3
 80054dc:	f04f 0200 	mov.w	r2, #0
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80054e8:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80054ec:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80054f0:	2300      	movs	r3, #0
 80054f2:	460c      	mov	r4, r1
 80054f4:	461d      	mov	r5, r3
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	f04f 0300 	mov.w	r3, #0
 80054fe:	012b      	lsls	r3, r5, #4
 8005500:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8005504:	0122      	lsls	r2, r4, #4
 8005506:	004b      	lsls	r3, r1, #1
 8005508:	3307      	adds	r3, #7
 800550a:	08db      	lsrs	r3, r3, #3
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	ebad 0d03 	sub.w	sp, sp, r3
 8005512:	466b      	mov	r3, sp
 8005514:	3301      	adds	r3, #1
 8005516:	085b      	lsrs	r3, r3, #1
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	61bb      	str	r3, [r7, #24]
 unsigned char * ptempBuf;

 //init tempBuf data to tempColor( Exchange high 8bit and low 8bit of bColor )
 for(i=0; i<bufSize; i++){
 800551c:	2300      	movs	r3, #0
 800551e:	637b      	str	r3, [r7, #52]	; 0x34
 8005520:	e007      	b.n	8005532 <ClearWindow+0xe2>
	 tempBuf[i] = tempColor;
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005526:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8005528:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 for(i=0; i<bufSize; i++){
 800552c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552e:	3301      	adds	r3, #1
 8005530:	637b      	str	r3, [r7, #52]	; 0x34
 8005532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	429a      	cmp	r2, r3
 8005538:	d3f3      	bcc.n	8005522 <ClearWindow+0xd2>
 }

 // Clear window size: from (startX, startY) to (endX, endY)
 LCD_SetPos(startX,startY,endX-1,endY-1);// (endX-startX) * (endY - startY)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	1e5a      	subs	r2, r3, #1
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	3b01      	subs	r3, #1
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 f81e 	bl	8005586 <LCD_SetPos>

 // transmit bufSize byte one time, loopNum loops
 ptempBuf = (unsigned char *)tempBuf;
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	617b      	str	r3, [r7, #20]
 for(i=0; i<loopNum; i++){
 800554e:	2300      	movs	r3, #0
 8005550:	637b      	str	r3, [r7, #52]	; 0x34
 8005552:	e008      	b.n	8005566 <ClearWindow+0x116>
	 Write_Bytes(ptempBuf, bufSize);
 8005554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005556:	b29b      	uxth	r3, r3
 8005558:	4619      	mov	r1, r3
 800555a:	6978      	ldr	r0, [r7, #20]
 800555c:	f7ff fcd4 	bl	8004f08 <Write_Bytes>
 for(i=0; i<loopNum; i++){
 8005560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005562:	3301      	adds	r3, #1
 8005564:	637b      	str	r3, [r7, #52]	; 0x34
 8005566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	429a      	cmp	r2, r3
 800556c:	d3f2      	bcc.n	8005554 <ClearWindow+0x104>
 }

 // transmit remainder data, modNum bytes
 Write_Bytes(ptempBuf, modNum);
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	b29b      	uxth	r3, r3
 8005572:	4619      	mov	r1, r3
 8005574:	6978      	ldr	r0, [r7, #20]
 8005576:	f7ff fcc7 	bl	8004f08 <Write_Bytes>
 800557a:	46b5      	mov	sp, r6

}
 800557c:	bf00      	nop
 800557e:	373c      	adds	r7, #60	; 0x3c
 8005580:	46bd      	mov	sp, r7
 8005582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005586 <LCD_SetPos>:


//===============================================================
 void LCD_SetPos(unsigned int Xstart,unsigned int Ystart,unsigned int Xend,unsigned int Yend)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b084      	sub	sp, #16
 800558a:	af00      	add	r7, sp, #0
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	607a      	str	r2, [r7, #4]
 8005592:	603b      	str	r3, [r7, #0]
	Write_Cmd(0x2a);
 8005594:	202a      	movs	r0, #42	; 0x2a
 8005596:	f7ff fc93 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(Xstart>>8);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	0a1b      	lsrs	r3, r3, #8
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff fc69 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(Xstart);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff fc64 	bl	8004e78 <Write_Cmd_Data>
 	Write_Cmd_Data(Xend>>8);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	0a1b      	lsrs	r3, r3, #8
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff fc5e 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(Xend);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff fc59 	bl	8004e78 <Write_Cmd_Data>

	Write_Cmd(0x2b);
 80055c6:	202b      	movs	r0, #43	; 0x2b
 80055c8:	f7ff fc7a 	bl	8004ec0 <Write_Cmd>
	Write_Cmd_Data(Ystart>>8);
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	0a1b      	lsrs	r3, r3, #8
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff fc50 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(Ystart);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff fc4b 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(Yend>>8);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	0a1b      	lsrs	r3, r3, #8
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7ff fc45 	bl	8004e78 <Write_Cmd_Data>
	Write_Cmd_Data(Yend);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff fc40 	bl	8004e78 <Write_Cmd_Data>

  	Write_Cmd(0x2c);//LCD_WriteCMD(GRAMWR);
 80055f8:	202c      	movs	r0, #44	; 0x2c
 80055fa:	f7ff fc61 	bl	8004ec0 <Write_Cmd>
}
 80055fe:	bf00      	nop
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <atualiza_tela_Versao_Publica>:
	}
}
#endif
#ifdef VersaoPublica
void atualiza_tela_Versao_Publica()
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af04      	add	r7, sp, #16
	if(estado_atual == ESTADO_A)//estado A
 800560e:	4b57      	ldr	r3, [pc, #348]	; (800576c <atualiza_tela_Versao_Publica+0x164>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	f040 8156 	bne.w	80058c4 <atualiza_tela_Versao_Publica+0x2bc>
	{
		if(estado_anterior_display == ESTADO_C2 || estado_anterior_display == ESTADO_BV){
 8005618:	4b55      	ldr	r3, [pc, #340]	; (8005770 <atualiza_tela_Versao_Publica+0x168>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b04      	cmp	r3, #4
 800561e:	d003      	beq.n	8005628 <atualiza_tela_Versao_Publica+0x20>
 8005620:	4b53      	ldr	r3, [pc, #332]	; (8005770 <atualiza_tela_Versao_Publica+0x168>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d102      	bne.n	800562e <atualiza_tela_Versao_Publica+0x26>
			Flag_manter_dados_tela_estado_a = 1;
 8005628:	4b52      	ldr	r3, [pc, #328]	; (8005774 <atualiza_tela_Versao_Publica+0x16c>)
 800562a:	2201      	movs	r2, #1
 800562c:	701a      	strb	r2, [r3, #0]
		}
		if (!Flag_manter_dados_tela_estado_a){
 800562e:	4b51      	ldr	r3, [pc, #324]	; (8005774 <atualiza_tela_Versao_Publica+0x16c>)
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	f040 80ba 	bne.w	80057ac <atualiza_tela_Versao_Publica+0x1a4>
			if(estado_atual != estado_anterior_display){
 8005638:	4b4c      	ldr	r3, [pc, #304]	; (800576c <atualiza_tela_Versao_Publica+0x164>)
 800563a:	781a      	ldrb	r2, [r3, #0]
 800563c:	4b4c      	ldr	r3, [pc, #304]	; (8005770 <atualiza_tela_Versao_Publica+0x168>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d002      	beq.n	800564a <atualiza_tela_Versao_Publica+0x42>
				ClearScreen2(BLACK);
 8005644:	2000      	movs	r0, #0
 8005646:	f7ff fef3 	bl	8005430 <ClearScreen2>
			}
			estado_anterior_display = estado_atual;
 800564a:	4b48      	ldr	r3, [pc, #288]	; (800576c <atualiza_tela_Versao_Publica+0x164>)
 800564c:	781a      	ldrb	r2, [r3, #0]
 800564e:	4b48      	ldr	r3, [pc, #288]	; (8005770 <atualiza_tela_Versao_Publica+0x168>)
 8005650:	701a      	strb	r2, [r3, #0]
			WriteString(40, 107,"EVPV POWER", Font_16x26, WHITE, BLACK);
 8005652:	4b49      	ldr	r3, [pc, #292]	; (8005778 <atualiza_tela_Versao_Publica+0x170>)
 8005654:	2200      	movs	r2, #0
 8005656:	9202      	str	r2, [sp, #8]
 8005658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800565c:	9201      	str	r2, [sp, #4]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	9200      	str	r2, [sp, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a45      	ldr	r2, [pc, #276]	; (800577c <atualiza_tela_Versao_Publica+0x174>)
 8005666:	216b      	movs	r1, #107	; 0x6b
 8005668:	2028      	movs	r0, #40	; 0x28
 800566a:	f7ff fbab 	bl	8004dc4 <WriteString>

			if(Trifasico){
 800566e:	4b44      	ldr	r3, [pc, #272]	; (8005780 <atualiza_tela_Versao_Publica+0x178>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d01f      	beq.n	80056b6 <atualiza_tela_Versao_Publica+0xae>
				sprintf(textBuffer, "TRIFASICO");				// energia consumida ao longo do tempo
 8005676:	4943      	ldr	r1, [pc, #268]	; (8005784 <atualiza_tela_Versao_Publica+0x17c>)
 8005678:	4843      	ldr	r0, [pc, #268]	; (8005788 <atualiza_tela_Versao_Publica+0x180>)
 800567a:	f008 fb67 	bl	800dd4c <siprintf>
				WriteString(120-(strlen(textBuffer)*11/2), 107+30, textBuffer, Font_11x18, LIGHTBLUE, BLACK);
 800567e:	4842      	ldr	r0, [pc, #264]	; (8005788 <atualiza_tela_Versao_Publica+0x180>)
 8005680:	f7fa fd66 	bl	8000150 <strlen>
 8005684:	4602      	mov	r2, r0
 8005686:	4613      	mov	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	4413      	add	r3, r2
 8005690:	085b      	lsrs	r3, r3, #1
 8005692:	b29b      	uxth	r3, r3
 8005694:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8005698:	b298      	uxth	r0, r3
 800569a:	4b3c      	ldr	r3, [pc, #240]	; (800578c <atualiza_tela_Versao_Publica+0x184>)
 800569c:	2200      	movs	r2, #0
 800569e:	9202      	str	r2, [sp, #8]
 80056a0:	f647 527c 	movw	r2, #32124	; 0x7d7c
 80056a4:	9201      	str	r2, [sp, #4]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	9200      	str	r2, [sp, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a36      	ldr	r2, [pc, #216]	; (8005788 <atualiza_tela_Versao_Publica+0x180>)
 80056ae:	2189      	movs	r1, #137	; 0x89
 80056b0:	f7ff fb88 	bl	8004dc4 <WriteString>
 80056b4:	e01e      	b.n	80056f4 <atualiza_tela_Versao_Publica+0xec>
			}
			else{
				sprintf(textBuffer, "MONOFASICO");				// energia consumida ao longo do tempo
 80056b6:	4936      	ldr	r1, [pc, #216]	; (8005790 <atualiza_tela_Versao_Publica+0x188>)
 80056b8:	4833      	ldr	r0, [pc, #204]	; (8005788 <atualiza_tela_Versao_Publica+0x180>)
 80056ba:	f008 fb47 	bl	800dd4c <siprintf>
				WriteString(120-(strlen(textBuffer)*11/2), 107+30, textBuffer, Font_11x18, LIGHTBLUE, BLACK);
 80056be:	4832      	ldr	r0, [pc, #200]	; (8005788 <atualiza_tela_Versao_Publica+0x180>)
 80056c0:	f7fa fd46 	bl	8000150 <strlen>
 80056c4:	4602      	mov	r2, r0
 80056c6:	4613      	mov	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	4413      	add	r3, r2
 80056d0:	085b      	lsrs	r3, r3, #1
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80056d8:	b298      	uxth	r0, r3
 80056da:	4b2c      	ldr	r3, [pc, #176]	; (800578c <atualiza_tela_Versao_Publica+0x184>)
 80056dc:	2200      	movs	r2, #0
 80056de:	9202      	str	r2, [sp, #8]
 80056e0:	f647 527c 	movw	r2, #32124	; 0x7d7c
 80056e4:	9201      	str	r2, [sp, #4]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	9200      	str	r2, [sp, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a26      	ldr	r2, [pc, #152]	; (8005788 <atualiza_tela_Versao_Publica+0x180>)
 80056ee:	2189      	movs	r1, #137	; 0x89
 80056f0:	f7ff fb68 	bl	8004dc4 <WriteString>
			}
			sTime.Hours = 0;
 80056f4:	4b27      	ldr	r3, [pc, #156]	; (8005794 <atualiza_tela_Versao_Publica+0x18c>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	701a      	strb	r2, [r3, #0]
			sTime.Minutes = 0;
 80056fa:	4b26      	ldr	r3, [pc, #152]	; (8005794 <atualiza_tela_Versao_Publica+0x18c>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	705a      	strb	r2, [r3, #1]
			sTime.Seconds = 0;
 8005700:	4b24      	ldr	r3, [pc, #144]	; (8005794 <atualiza_tela_Versao_Publica+0x18c>)
 8005702:	2200      	movs	r2, #0
 8005704:	709a      	strb	r2, [r3, #2]
			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8005706:	2200      	movs	r2, #0
 8005708:	4922      	ldr	r1, [pc, #136]	; (8005794 <atualiza_tela_Versao_Publica+0x18c>)
 800570a:	4823      	ldr	r0, [pc, #140]	; (8005798 <atualiza_tela_Versao_Publica+0x190>)
 800570c:	f005 f9aa 	bl	800aa64 <HAL_RTC_SetTime>

			if(hold_state_erro_temp == 1){
 8005710:	4b22      	ldr	r3, [pc, #136]	; (800579c <atualiza_tela_Versao_Publica+0x194>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d111      	bne.n	800573c <atualiza_tela_Versao_Publica+0x134>
				sprintf(textBuffer, "TEMPERATURA ALTA");
 8005718:	4921      	ldr	r1, [pc, #132]	; (80057a0 <atualiza_tela_Versao_Publica+0x198>)
 800571a:	481b      	ldr	r0, [pc, #108]	; (8005788 <atualiza_tela_Versao_Publica+0x180>)
 800571c:	f008 fb16 	bl	800dd4c <siprintf>
				WriteString(10, 140, textBuffer, Font_16x26, RED, BLACK);
 8005720:	4b15      	ldr	r3, [pc, #84]	; (8005778 <atualiza_tela_Versao_Publica+0x170>)
 8005722:	2200      	movs	r2, #0
 8005724:	9202      	str	r2, [sp, #8]
 8005726:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800572a:	9201      	str	r2, [sp, #4]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	9200      	str	r2, [sp, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a15      	ldr	r2, [pc, #84]	; (8005788 <atualiza_tela_Versao_Publica+0x180>)
 8005734:	218c      	movs	r1, #140	; 0x8c
 8005736:	200a      	movs	r0, #10
 8005738:	f7ff fb44 	bl	8004dc4 <WriteString>
			}
			if(hold_state_erro_sobrecorrente){
 800573c:	4b19      	ldr	r3, [pc, #100]	; (80057a4 <atualiza_tela_Versao_Publica+0x19c>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 80bf 	beq.w	80058c4 <atualiza_tela_Versao_Publica+0x2bc>
				sprintf(textBuffer, "SOBRECORRENTE");
 8005746:	4918      	ldr	r1, [pc, #96]	; (80057a8 <atualiza_tela_Versao_Publica+0x1a0>)
 8005748:	480f      	ldr	r0, [pc, #60]	; (8005788 <atualiza_tela_Versao_Publica+0x180>)
 800574a:	f008 faff 	bl	800dd4c <siprintf>
				WriteString(20, 140, textBuffer, Font_16x26, RED, BLACK);
 800574e:	4b0a      	ldr	r3, [pc, #40]	; (8005778 <atualiza_tela_Versao_Publica+0x170>)
 8005750:	2200      	movs	r2, #0
 8005752:	9202      	str	r2, [sp, #8]
 8005754:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005758:	9201      	str	r2, [sp, #4]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	9200      	str	r2, [sp, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a09      	ldr	r2, [pc, #36]	; (8005788 <atualiza_tela_Versao_Publica+0x180>)
 8005762:	218c      	movs	r1, #140	; 0x8c
 8005764:	2014      	movs	r0, #20
 8005766:	f7ff fb2d 	bl	8004dc4 <WriteString>
 800576a:	e0ab      	b.n	80058c4 <atualiza_tela_Versao_Publica+0x2bc>
 800576c:	200007d9 	.word	0x200007d9
 8005770:	20000298 	.word	0x20000298
 8005774:	20000299 	.word	0x20000299
 8005778:	20000024 	.word	0x20000024
 800577c:	080107fc 	.word	0x080107fc
 8005780:	20000234 	.word	0x20000234
 8005784:	08010808 	.word	0x08010808
 8005788:	200002a0 	.word	0x200002a0
 800578c:	2000001c 	.word	0x2000001c
 8005790:	08010814 	.word	0x08010814
 8005794:	200005d4 	.word	0x200005d4
 8005798:	20000370 	.word	0x20000370
 800579c:	20000274 	.word	0x20000274
 80057a0:	08010820 	.word	0x08010820
 80057a4:	20000275 	.word	0x20000275
 80057a8:	08010834 	.word	0x08010834
			}
		}
		else
		{
			if(estado_atual != estado_anterior_display){
 80057ac:	4b8e      	ldr	r3, [pc, #568]	; (80059e8 <atualiza_tela_Versao_Publica+0x3e0>)
 80057ae:	781a      	ldrb	r2, [r3, #0]
 80057b0:	4b8e      	ldr	r3, [pc, #568]	; (80059ec <atualiza_tela_Versao_Publica+0x3e4>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d002      	beq.n	80057be <atualiza_tela_Versao_Publica+0x1b6>
				ClearScreen2(BLACK);
 80057b8:	2000      	movs	r0, #0
 80057ba:	f7ff fe39 	bl	8005430 <ClearScreen2>
			}
			estado_anterior_display = estado_atual;
 80057be:	4b8a      	ldr	r3, [pc, #552]	; (80059e8 <atualiza_tela_Versao_Publica+0x3e0>)
 80057c0:	781a      	ldrb	r2, [r3, #0]
 80057c2:	4b8a      	ldr	r3, [pc, #552]	; (80059ec <atualiza_tela_Versao_Publica+0x3e4>)
 80057c4:	701a      	strb	r2, [r3, #0]
			sprintf(textBuffer, "  CARREGADO  ");
 80057c6:	498a      	ldr	r1, [pc, #552]	; (80059f0 <atualiza_tela_Versao_Publica+0x3e8>)
 80057c8:	488a      	ldr	r0, [pc, #552]	; (80059f4 <atualiza_tela_Versao_Publica+0x3ec>)
 80057ca:	f008 fabf 	bl	800dd4c <siprintf>
			WriteString(18, 43, textBuffer, Font_16x26, GREEN, BLACK);
 80057ce:	4b8a      	ldr	r3, [pc, #552]	; (80059f8 <atualiza_tela_Versao_Publica+0x3f0>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	9202      	str	r2, [sp, #8]
 80057d4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80057d8:	9201      	str	r2, [sp, #4]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	9200      	str	r2, [sp, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a84      	ldr	r2, [pc, #528]	; (80059f4 <atualiza_tela_Versao_Publica+0x3ec>)
 80057e2:	212b      	movs	r1, #43	; 0x2b
 80057e4:	2012      	movs	r0, #18
 80057e6:	f7ff faed 	bl	8004dc4 <WriteString>

			HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80057ea:	2200      	movs	r2, #0
 80057ec:	4983      	ldr	r1, [pc, #524]	; (80059fc <atualiza_tela_Versao_Publica+0x3f4>)
 80057ee:	4884      	ldr	r0, [pc, #528]	; (8005a00 <atualiza_tela_Versao_Publica+0x3f8>)
 80057f0:	f005 f938 	bl	800aa64 <HAL_RTC_SetTime>
			sprintf(textBuffer, "  %02d:%02d:%02d  ", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80057f4:	4b81      	ldr	r3, [pc, #516]	; (80059fc <atualiza_tela_Versao_Publica+0x3f4>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	4b80      	ldr	r3, [pc, #512]	; (80059fc <atualiza_tela_Versao_Publica+0x3f4>)
 80057fc:	785b      	ldrb	r3, [r3, #1]
 80057fe:	4619      	mov	r1, r3
 8005800:	4b7e      	ldr	r3, [pc, #504]	; (80059fc <atualiza_tela_Versao_Publica+0x3f4>)
 8005802:	789b      	ldrb	r3, [r3, #2]
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	460b      	mov	r3, r1
 8005808:	497e      	ldr	r1, [pc, #504]	; (8005a04 <atualiza_tela_Versao_Publica+0x3fc>)
 800580a:	487a      	ldr	r0, [pc, #488]	; (80059f4 <atualiza_tela_Versao_Publica+0x3ec>)
 800580c:	f008 fa9e 	bl	800dd4c <siprintf>
			WriteString(24, 97, textBuffer, Font_16x26, WHITE, BLACK);
 8005810:	4b79      	ldr	r3, [pc, #484]	; (80059f8 <atualiza_tela_Versao_Publica+0x3f0>)
 8005812:	2200      	movs	r2, #0
 8005814:	9202      	str	r2, [sp, #8]
 8005816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800581a:	9201      	str	r2, [sp, #4]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	9200      	str	r2, [sp, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a74      	ldr	r2, [pc, #464]	; (80059f4 <atualiza_tela_Versao_Publica+0x3ec>)
 8005824:	2161      	movs	r1, #97	; 0x61
 8005826:	2018      	movs	r0, #24
 8005828:	f7ff facc 	bl	8004dc4 <WriteString>

			sprintf(textBuffer, "%.1f [W]", Energy/1000);				// energia consumida ao longo do tempo
 800582c:	4b76      	ldr	r3, [pc, #472]	; (8005a08 <atualiza_tela_Versao_Publica+0x400>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4976      	ldr	r1, [pc, #472]	; (8005a0c <atualiza_tela_Versao_Publica+0x404>)
 8005832:	4618      	mov	r0, r3
 8005834:	f7fb fb5a 	bl	8000eec <__aeabi_fdiv>
 8005838:	4603      	mov	r3, r0
 800583a:	4618      	mov	r0, r3
 800583c:	f7fa fdf4 	bl	8000428 <__aeabi_f2d>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	4972      	ldr	r1, [pc, #456]	; (8005a10 <atualiza_tela_Versao_Publica+0x408>)
 8005846:	486b      	ldr	r0, [pc, #428]	; (80059f4 <atualiza_tela_Versao_Publica+0x3ec>)
 8005848:	f008 fa80 	bl	800dd4c <siprintf>
			WriteString(120-(strlen(textBuffer)*temanho_x_fonte/2), 147, textBuffer, Font_16x26, GREEN, BLACK);
 800584c:	4869      	ldr	r0, [pc, #420]	; (80059f4 <atualiza_tela_Versao_Publica+0x3ec>)
 800584e:	f7fa fc7f 	bl	8000150 <strlen>
 8005852:	4603      	mov	r3, r0
 8005854:	011b      	lsls	r3, r3, #4
 8005856:	085b      	lsrs	r3, r3, #1
 8005858:	b29b      	uxth	r3, r3
 800585a:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 800585e:	b298      	uxth	r0, r3
 8005860:	4b65      	ldr	r3, [pc, #404]	; (80059f8 <atualiza_tela_Versao_Publica+0x3f0>)
 8005862:	2200      	movs	r2, #0
 8005864:	9202      	str	r2, [sp, #8]
 8005866:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800586a:	9201      	str	r2, [sp, #4]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	9200      	str	r2, [sp, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a60      	ldr	r2, [pc, #384]	; (80059f4 <atualiza_tela_Versao_Publica+0x3ec>)
 8005874:	2193      	movs	r1, #147	; 0x93
 8005876:	f7ff faa5 	bl	8004dc4 <WriteString>

			sprintf(textBuffer, "ONLINE");
 800587a:	4966      	ldr	r1, [pc, #408]	; (8005a14 <atualiza_tela_Versao_Publica+0x40c>)
 800587c:	485d      	ldr	r0, [pc, #372]	; (80059f4 <atualiza_tela_Versao_Publica+0x3ec>)
 800587e:	f008 fa65 	bl	800dd4c <siprintf>
			WriteString(87, 197, textBuffer, Font_11x18, GREEN, BLACK);
 8005882:	4b65      	ldr	r3, [pc, #404]	; (8005a18 <atualiza_tela_Versao_Publica+0x410>)
 8005884:	2200      	movs	r2, #0
 8005886:	9202      	str	r2, [sp, #8]
 8005888:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800588c:	9201      	str	r2, [sp, #4]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	9200      	str	r2, [sp, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a57      	ldr	r2, [pc, #348]	; (80059f4 <atualiza_tela_Versao_Publica+0x3ec>)
 8005896:	21c5      	movs	r1, #197	; 0xc5
 8005898:	2057      	movs	r0, #87	; 0x57
 800589a:	f7ff fa93 	bl	8004dc4 <WriteString>

			counter_flag_manter_dados++;
 800589e:	4b5f      	ldr	r3, [pc, #380]	; (8005a1c <atualiza_tela_Versao_Publica+0x414>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3301      	adds	r3, #1
 80058a4:	4a5d      	ldr	r2, [pc, #372]	; (8005a1c <atualiza_tela_Versao_Publica+0x414>)
 80058a6:	6013      	str	r3, [r2, #0]
			if (counter_flag_manter_dados > tempo_manter_dados_tela){
 80058a8:	4b5c      	ldr	r3, [pc, #368]	; (8005a1c <atualiza_tela_Versao_Publica+0x414>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80058b0:	dd08      	ble.n	80058c4 <atualiza_tela_Versao_Publica+0x2bc>
				Flag_manter_dados_tela_estado_a = 0;
 80058b2:	4b5b      	ldr	r3, [pc, #364]	; (8005a20 <atualiza_tela_Versao_Publica+0x418>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	701a      	strb	r2, [r3, #0]
				counter_flag_manter_dados = 0;
 80058b8:	4b58      	ldr	r3, [pc, #352]	; (8005a1c <atualiza_tela_Versao_Publica+0x414>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
				ClearScreen2(BLACK);
 80058be:	2000      	movs	r0, #0
 80058c0:	f7ff fdb6 	bl	8005430 <ClearScreen2>
			}
		}
	}
	if(estado_atual == ESTADO_BB)//estado BB
 80058c4:	4b48      	ldr	r3, [pc, #288]	; (80059e8 <atualiza_tela_Versao_Publica+0x3e0>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	f040 80c3 	bne.w	8005a54 <atualiza_tela_Versao_Publica+0x44c>
	{
		if(estado_atual != estado_anterior_display){
 80058ce:	4b46      	ldr	r3, [pc, #280]	; (80059e8 <atualiza_tela_Versao_Publica+0x3e0>)
 80058d0:	781a      	ldrb	r2, [r3, #0]
 80058d2:	4b46      	ldr	r3, [pc, #280]	; (80059ec <atualiza_tela_Versao_Publica+0x3e4>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d002      	beq.n	80058e0 <atualiza_tela_Versao_Publica+0x2d8>
			ClearScreen2(BLACK);
 80058da:	2000      	movs	r0, #0
 80058dc:	f7ff fda8 	bl	8005430 <ClearScreen2>
		}
		estado_anterior_display = estado_atual;
 80058e0:	4b41      	ldr	r3, [pc, #260]	; (80059e8 <atualiza_tela_Versao_Publica+0x3e0>)
 80058e2:	781a      	ldrb	r2, [r3, #0]
 80058e4:	4b41      	ldr	r3, [pc, #260]	; (80059ec <atualiza_tela_Versao_Publica+0x3e4>)
 80058e6:	701a      	strb	r2, [r3, #0]
		sTime.Hours = 0;
 80058e8:	4b44      	ldr	r3, [pc, #272]	; (80059fc <atualiza_tela_Versao_Publica+0x3f4>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	701a      	strb	r2, [r3, #0]
		sTime.Minutes = 0;
 80058ee:	4b43      	ldr	r3, [pc, #268]	; (80059fc <atualiza_tela_Versao_Publica+0x3f4>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	705a      	strb	r2, [r3, #1]
		sTime.Seconds = 0;
 80058f4:	4b41      	ldr	r3, [pc, #260]	; (80059fc <atualiza_tela_Versao_Publica+0x3f4>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	709a      	strb	r2, [r3, #2]
		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80058fa:	2200      	movs	r2, #0
 80058fc:	493f      	ldr	r1, [pc, #252]	; (80059fc <atualiza_tela_Versao_Publica+0x3f4>)
 80058fe:	4840      	ldr	r0, [pc, #256]	; (8005a00 <atualiza_tela_Versao_Publica+0x3f8>)
 8005900:	f005 f8b0 	bl	800aa64 <HAL_RTC_SetTime>

		sprintf(textBuffer, "  CONECTADO  ");
 8005904:	4947      	ldr	r1, [pc, #284]	; (8005a24 <atualiza_tela_Versao_Publica+0x41c>)
 8005906:	483b      	ldr	r0, [pc, #236]	; (80059f4 <atualiza_tela_Versao_Publica+0x3ec>)
 8005908:	f008 fa20 	bl	800dd4c <siprintf>
		WriteString(18, 43, textBuffer, Font_16x26, WHITE, BLACK);
 800590c:	4b3a      	ldr	r3, [pc, #232]	; (80059f8 <atualiza_tela_Versao_Publica+0x3f0>)
 800590e:	2200      	movs	r2, #0
 8005910:	9202      	str	r2, [sp, #8]
 8005912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005916:	9201      	str	r2, [sp, #4]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	9200      	str	r2, [sp, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a35      	ldr	r2, [pc, #212]	; (80059f4 <atualiza_tela_Versao_Publica+0x3ec>)
 8005920:	212b      	movs	r1, #43	; 0x2b
 8005922:	2012      	movs	r0, #18
 8005924:	f7ff fa4e 	bl	8004dc4 <WriteString>

		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8005928:	2200      	movs	r2, #0
 800592a:	4934      	ldr	r1, [pc, #208]	; (80059fc <atualiza_tela_Versao_Publica+0x3f4>)
 800592c:	4834      	ldr	r0, [pc, #208]	; (8005a00 <atualiza_tela_Versao_Publica+0x3f8>)
 800592e:	f005 f899 	bl	800aa64 <HAL_RTC_SetTime>
		sprintf(textBuffer, "  %02d:%02d:%02d  ", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8005932:	4b32      	ldr	r3, [pc, #200]	; (80059fc <atualiza_tela_Versao_Publica+0x3f4>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	4b30      	ldr	r3, [pc, #192]	; (80059fc <atualiza_tela_Versao_Publica+0x3f4>)
 800593a:	785b      	ldrb	r3, [r3, #1]
 800593c:	4619      	mov	r1, r3
 800593e:	4b2f      	ldr	r3, [pc, #188]	; (80059fc <atualiza_tela_Versao_Publica+0x3f4>)
 8005940:	789b      	ldrb	r3, [r3, #2]
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	460b      	mov	r3, r1
 8005946:	492f      	ldr	r1, [pc, #188]	; (8005a04 <atualiza_tela_Versao_Publica+0x3fc>)
 8005948:	482a      	ldr	r0, [pc, #168]	; (80059f4 <atualiza_tela_Versao_Publica+0x3ec>)
 800594a:	f008 f9ff 	bl	800dd4c <siprintf>
		WriteString(24, 97, textBuffer, Font_16x26, WHITE, BLACK);
 800594e:	4b2a      	ldr	r3, [pc, #168]	; (80059f8 <atualiza_tela_Versao_Publica+0x3f0>)
 8005950:	2200      	movs	r2, #0
 8005952:	9202      	str	r2, [sp, #8]
 8005954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005958:	9201      	str	r2, [sp, #4]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	9200      	str	r2, [sp, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a24      	ldr	r2, [pc, #144]	; (80059f4 <atualiza_tela_Versao_Publica+0x3ec>)
 8005962:	2161      	movs	r1, #97	; 0x61
 8005964:	2018      	movs	r0, #24
 8005966:	f7ff fa2d 	bl	8004dc4 <WriteString>

		sprintf(textBuffer, "%.1f [W]", Energy/1000);				// energia consumida ao longo do tempo
 800596a:	4b27      	ldr	r3, [pc, #156]	; (8005a08 <atualiza_tela_Versao_Publica+0x400>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4927      	ldr	r1, [pc, #156]	; (8005a0c <atualiza_tela_Versao_Publica+0x404>)
 8005970:	4618      	mov	r0, r3
 8005972:	f7fb fabb 	bl	8000eec <__aeabi_fdiv>
 8005976:	4603      	mov	r3, r0
 8005978:	4618      	mov	r0, r3
 800597a:	f7fa fd55 	bl	8000428 <__aeabi_f2d>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	4923      	ldr	r1, [pc, #140]	; (8005a10 <atualiza_tela_Versao_Publica+0x408>)
 8005984:	481b      	ldr	r0, [pc, #108]	; (80059f4 <atualiza_tela_Versao_Publica+0x3ec>)
 8005986:	f008 f9e1 	bl	800dd4c <siprintf>
		WriteString(120-(strlen(textBuffer)*temanho_x_fonte/2), 147, textBuffer, Font_16x26, GREEN, BLACK);
 800598a:	481a      	ldr	r0, [pc, #104]	; (80059f4 <atualiza_tela_Versao_Publica+0x3ec>)
 800598c:	f7fa fbe0 	bl	8000150 <strlen>
 8005990:	4603      	mov	r3, r0
 8005992:	011b      	lsls	r3, r3, #4
 8005994:	085b      	lsrs	r3, r3, #1
 8005996:	b29b      	uxth	r3, r3
 8005998:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 800599c:	b298      	uxth	r0, r3
 800599e:	4b16      	ldr	r3, [pc, #88]	; (80059f8 <atualiza_tela_Versao_Publica+0x3f0>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	9202      	str	r2, [sp, #8]
 80059a4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80059a8:	9201      	str	r2, [sp, #4]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	9200      	str	r2, [sp, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a10      	ldr	r2, [pc, #64]	; (80059f4 <atualiza_tela_Versao_Publica+0x3ec>)
 80059b2:	2193      	movs	r1, #147	; 0x93
 80059b4:	f7ff fa06 	bl	8004dc4 <WriteString>

		if(isOnline)
 80059b8:	4b1b      	ldr	r3, [pc, #108]	; (8005a28 <atualiza_tela_Versao_Publica+0x420>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d037      	beq.n	8005a30 <atualiza_tela_Versao_Publica+0x428>
		{
		sprintf(textBuffer, " ONLINE");
 80059c0:	491a      	ldr	r1, [pc, #104]	; (8005a2c <atualiza_tela_Versao_Publica+0x424>)
 80059c2:	480c      	ldr	r0, [pc, #48]	; (80059f4 <atualiza_tela_Versao_Publica+0x3ec>)
 80059c4:	f008 f9c2 	bl	800dd4c <siprintf>
		WriteString(82, 197, textBuffer, Font_11x18, GREEN, BLACK);
 80059c8:	4b13      	ldr	r3, [pc, #76]	; (8005a18 <atualiza_tela_Versao_Publica+0x410>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	9202      	str	r2, [sp, #8]
 80059ce:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80059d2:	9201      	str	r2, [sp, #4]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	9200      	str	r2, [sp, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a06      	ldr	r2, [pc, #24]	; (80059f4 <atualiza_tela_Versao_Publica+0x3ec>)
 80059dc:	21c5      	movs	r1, #197	; 0xc5
 80059de:	2052      	movs	r0, #82	; 0x52
 80059e0:	f7ff f9f0 	bl	8004dc4 <WriteString>
 80059e4:	e036      	b.n	8005a54 <atualiza_tela_Versao_Publica+0x44c>
 80059e6:	bf00      	nop
 80059e8:	200007d9 	.word	0x200007d9
 80059ec:	20000298 	.word	0x20000298
 80059f0:	08010844 	.word	0x08010844
 80059f4:	200002a0 	.word	0x200002a0
 80059f8:	20000024 	.word	0x20000024
 80059fc:	200005d4 	.word	0x200005d4
 8005a00:	20000370 	.word	0x20000370
 8005a04:	08010854 	.word	0x08010854
 8005a08:	200005a4 	.word	0x200005a4
 8005a0c:	447a0000 	.word	0x447a0000
 8005a10:	08010868 	.word	0x08010868
 8005a14:	08010874 	.word	0x08010874
 8005a18:	2000001c 	.word	0x2000001c
 8005a1c:	2000029c 	.word	0x2000029c
 8005a20:	20000299 	.word	0x20000299
 8005a24:	0801087c 	.word	0x0801087c
 8005a28:	200005cf 	.word	0x200005cf
 8005a2c:	0801088c 	.word	0x0801088c
		}
		else
		{sprintf(textBuffer, "OFFLINE");
 8005a30:	49a3      	ldr	r1, [pc, #652]	; (8005cc0 <atualiza_tela_Versao_Publica+0x6b8>)
 8005a32:	48a4      	ldr	r0, [pc, #656]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005a34:	f008 f98a 	bl	800dd4c <siprintf>
		WriteString(82, 197, textBuffer, Font_11x18, YELLOW, BLACK);
 8005a38:	4ba3      	ldr	r3, [pc, #652]	; (8005cc8 <atualiza_tela_Versao_Publica+0x6c0>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	9202      	str	r2, [sp, #8]
 8005a3e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8005a42:	9201      	str	r2, [sp, #4]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	9200      	str	r2, [sp, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a9e      	ldr	r2, [pc, #632]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005a4c:	21c5      	movs	r1, #197	; 0xc5
 8005a4e:	2052      	movs	r0, #82	; 0x52
 8005a50:	f7ff f9b8 	bl	8004dc4 <WriteString>
		}
	}
	if(estado_atual == ESTADO_BV)//estado BV
 8005a54:	4b9d      	ldr	r3, [pc, #628]	; (8005ccc <atualiza_tela_Versao_Publica+0x6c4>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d178      	bne.n	8005b4e <atualiza_tela_Versao_Publica+0x546>
	{
		if(estado_atual != estado_anterior_display){
 8005a5c:	4b9b      	ldr	r3, [pc, #620]	; (8005ccc <atualiza_tela_Versao_Publica+0x6c4>)
 8005a5e:	781a      	ldrb	r2, [r3, #0]
 8005a60:	4b9b      	ldr	r3, [pc, #620]	; (8005cd0 <atualiza_tela_Versao_Publica+0x6c8>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d002      	beq.n	8005a6e <atualiza_tela_Versao_Publica+0x466>
			ClearScreen2(BLACK);
 8005a68:	2000      	movs	r0, #0
 8005a6a:	f7ff fce1 	bl	8005430 <ClearScreen2>
		}
		estado_anterior_display = estado_atual;
 8005a6e:	4b97      	ldr	r3, [pc, #604]	; (8005ccc <atualiza_tela_Versao_Publica+0x6c4>)
 8005a70:	781a      	ldrb	r2, [r3, #0]
 8005a72:	4b97      	ldr	r3, [pc, #604]	; (8005cd0 <atualiza_tela_Versao_Publica+0x6c8>)
 8005a74:	701a      	strb	r2, [r3, #0]
		sprintf(textBuffer, "  CARREGADO  ");
 8005a76:	4997      	ldr	r1, [pc, #604]	; (8005cd4 <atualiza_tela_Versao_Publica+0x6cc>)
 8005a78:	4892      	ldr	r0, [pc, #584]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005a7a:	f008 f967 	bl	800dd4c <siprintf>
		WriteString(18, 43, textBuffer, Font_16x26, GREEN, BLACK);
 8005a7e:	4b96      	ldr	r3, [pc, #600]	; (8005cd8 <atualiza_tela_Versao_Publica+0x6d0>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	9202      	str	r2, [sp, #8]
 8005a84:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005a88:	9201      	str	r2, [sp, #4]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	9200      	str	r2, [sp, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a8c      	ldr	r2, [pc, #560]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005a92:	212b      	movs	r1, #43	; 0x2b
 8005a94:	2012      	movs	r0, #18
 8005a96:	f7ff f995 	bl	8004dc4 <WriteString>

		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	498f      	ldr	r1, [pc, #572]	; (8005cdc <atualiza_tela_Versao_Publica+0x6d4>)
 8005a9e:	4890      	ldr	r0, [pc, #576]	; (8005ce0 <atualiza_tela_Versao_Publica+0x6d8>)
 8005aa0:	f004 ffe0 	bl	800aa64 <HAL_RTC_SetTime>
		sprintf(textBuffer, "  %02d:%02d:%02d  ", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8005aa4:	4b8d      	ldr	r3, [pc, #564]	; (8005cdc <atualiza_tela_Versao_Publica+0x6d4>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	4b8c      	ldr	r3, [pc, #560]	; (8005cdc <atualiza_tela_Versao_Publica+0x6d4>)
 8005aac:	785b      	ldrb	r3, [r3, #1]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	4b8a      	ldr	r3, [pc, #552]	; (8005cdc <atualiza_tela_Versao_Publica+0x6d4>)
 8005ab2:	789b      	ldrb	r3, [r3, #2]
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	498a      	ldr	r1, [pc, #552]	; (8005ce4 <atualiza_tela_Versao_Publica+0x6dc>)
 8005aba:	4882      	ldr	r0, [pc, #520]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005abc:	f008 f946 	bl	800dd4c <siprintf>
		WriteString(24, 97, textBuffer, Font_16x26, WHITE, BLACK);
 8005ac0:	4b85      	ldr	r3, [pc, #532]	; (8005cd8 <atualiza_tela_Versao_Publica+0x6d0>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	9202      	str	r2, [sp, #8]
 8005ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aca:	9201      	str	r2, [sp, #4]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	9200      	str	r2, [sp, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a7c      	ldr	r2, [pc, #496]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005ad4:	2161      	movs	r1, #97	; 0x61
 8005ad6:	2018      	movs	r0, #24
 8005ad8:	f7ff f974 	bl	8004dc4 <WriteString>

		sprintf(textBuffer, "%.1f [W]", Energy/1000);				// energia consumida ao longo do tempo
 8005adc:	4b82      	ldr	r3, [pc, #520]	; (8005ce8 <atualiza_tela_Versao_Publica+0x6e0>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4982      	ldr	r1, [pc, #520]	; (8005cec <atualiza_tela_Versao_Publica+0x6e4>)
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fb fa02 	bl	8000eec <__aeabi_fdiv>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fa fc9c 	bl	8000428 <__aeabi_f2d>
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	497e      	ldr	r1, [pc, #504]	; (8005cf0 <atualiza_tela_Versao_Publica+0x6e8>)
 8005af6:	4873      	ldr	r0, [pc, #460]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005af8:	f008 f928 	bl	800dd4c <siprintf>
		WriteString(120-(strlen(textBuffer)*temanho_x_fonte/2), 147, textBuffer, Font_16x26, GREEN, BLACK);
 8005afc:	4871      	ldr	r0, [pc, #452]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005afe:	f7fa fb27 	bl	8000150 <strlen>
 8005b02:	4603      	mov	r3, r0
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	085b      	lsrs	r3, r3, #1
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8005b0e:	b298      	uxth	r0, r3
 8005b10:	4b71      	ldr	r3, [pc, #452]	; (8005cd8 <atualiza_tela_Versao_Publica+0x6d0>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	9202      	str	r2, [sp, #8]
 8005b16:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005b1a:	9201      	str	r2, [sp, #4]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	9200      	str	r2, [sp, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a68      	ldr	r2, [pc, #416]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005b24:	2193      	movs	r1, #147	; 0x93
 8005b26:	f7ff f94d 	bl	8004dc4 <WriteString>

		sprintf(textBuffer, "ONLINE");
 8005b2a:	4972      	ldr	r1, [pc, #456]	; (8005cf4 <atualiza_tela_Versao_Publica+0x6ec>)
 8005b2c:	4865      	ldr	r0, [pc, #404]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005b2e:	f008 f90d 	bl	800dd4c <siprintf>
		WriteString(87, 197, textBuffer, Font_11x18, GREEN, BLACK);
 8005b32:	4b65      	ldr	r3, [pc, #404]	; (8005cc8 <atualiza_tela_Versao_Publica+0x6c0>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	9202      	str	r2, [sp, #8]
 8005b38:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005b3c:	9201      	str	r2, [sp, #4]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	9200      	str	r2, [sp, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a5f      	ldr	r2, [pc, #380]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005b46:	21c5      	movs	r1, #197	; 0xc5
 8005b48:	2057      	movs	r0, #87	; 0x57
 8005b4a:	f7ff f93b 	bl	8004dc4 <WriteString>
		//sprintf(textBuffer, "OFFLINE");
		//WriteString(82, 197, textBuffer, Font_11x18, YELLOW, BLACK);
	}
	if(estado_atual == ESTADO_C1)//estado C1
 8005b4e:	4b5f      	ldr	r3, [pc, #380]	; (8005ccc <atualiza_tela_Versao_Publica+0x6c4>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d173      	bne.n	8005c3e <atualiza_tela_Versao_Publica+0x636>
	{
		if(estado_atual != estado_anterior_display){
 8005b56:	4b5d      	ldr	r3, [pc, #372]	; (8005ccc <atualiza_tela_Versao_Publica+0x6c4>)
 8005b58:	781a      	ldrb	r2, [r3, #0]
 8005b5a:	4b5d      	ldr	r3, [pc, #372]	; (8005cd0 <atualiza_tela_Versao_Publica+0x6c8>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d002      	beq.n	8005b68 <atualiza_tela_Versao_Publica+0x560>
			ClearScreen2(BLACK);
 8005b62:	2000      	movs	r0, #0
 8005b64:	f7ff fc64 	bl	8005430 <ClearScreen2>
		}
		estado_anterior_display = estado_atual;
 8005b68:	4b58      	ldr	r3, [pc, #352]	; (8005ccc <atualiza_tela_Versao_Publica+0x6c4>)
 8005b6a:	781a      	ldrb	r2, [r3, #0]
 8005b6c:	4b58      	ldr	r3, [pc, #352]	; (8005cd0 <atualiza_tela_Versao_Publica+0x6c8>)
 8005b6e:	701a      	strb	r2, [r3, #0]
		sprintf(textBuffer, "  CONECTADO  ");
 8005b70:	4961      	ldr	r1, [pc, #388]	; (8005cf8 <atualiza_tela_Versao_Publica+0x6f0>)
 8005b72:	4854      	ldr	r0, [pc, #336]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005b74:	f008 f8ea 	bl	800dd4c <siprintf>
		WriteString(18, 43, textBuffer, Font_16x26, WHITE, BLACK);
 8005b78:	4b57      	ldr	r3, [pc, #348]	; (8005cd8 <atualiza_tela_Versao_Publica+0x6d0>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	9202      	str	r2, [sp, #8]
 8005b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b82:	9201      	str	r2, [sp, #4]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	9200      	str	r2, [sp, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a4e      	ldr	r2, [pc, #312]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005b8c:	212b      	movs	r1, #43	; 0x2b
 8005b8e:	2012      	movs	r0, #18
 8005b90:	f7ff f918 	bl	8004dc4 <WriteString>

		sprintf(textBuffer, "  %02d:%02d:%02d  ", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8005b94:	4b51      	ldr	r3, [pc, #324]	; (8005cdc <atualiza_tela_Versao_Publica+0x6d4>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	4b50      	ldr	r3, [pc, #320]	; (8005cdc <atualiza_tela_Versao_Publica+0x6d4>)
 8005b9c:	785b      	ldrb	r3, [r3, #1]
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4b4e      	ldr	r3, [pc, #312]	; (8005cdc <atualiza_tela_Versao_Publica+0x6d4>)
 8005ba2:	789b      	ldrb	r3, [r3, #2]
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	494e      	ldr	r1, [pc, #312]	; (8005ce4 <atualiza_tela_Versao_Publica+0x6dc>)
 8005baa:	4846      	ldr	r0, [pc, #280]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005bac:	f008 f8ce 	bl	800dd4c <siprintf>
		WriteString(24, 97, textBuffer, Font_16x26, WHITE, BLACK);
 8005bb0:	4b49      	ldr	r3, [pc, #292]	; (8005cd8 <atualiza_tela_Versao_Publica+0x6d0>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	9202      	str	r2, [sp, #8]
 8005bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bba:	9201      	str	r2, [sp, #4]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	9200      	str	r2, [sp, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a40      	ldr	r2, [pc, #256]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005bc4:	2161      	movs	r1, #97	; 0x61
 8005bc6:	2018      	movs	r0, #24
 8005bc8:	f7ff f8fc 	bl	8004dc4 <WriteString>

		sprintf(textBuffer, "%.1f [W]", Energy/1000);				// energia consumida ao longo do tempo
 8005bcc:	4b46      	ldr	r3, [pc, #280]	; (8005ce8 <atualiza_tela_Versao_Publica+0x6e0>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4946      	ldr	r1, [pc, #280]	; (8005cec <atualiza_tela_Versao_Publica+0x6e4>)
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fb f98a 	bl	8000eec <__aeabi_fdiv>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fa fc24 	bl	8000428 <__aeabi_f2d>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4942      	ldr	r1, [pc, #264]	; (8005cf0 <atualiza_tela_Versao_Publica+0x6e8>)
 8005be6:	4837      	ldr	r0, [pc, #220]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005be8:	f008 f8b0 	bl	800dd4c <siprintf>
		WriteString(120-(strlen(textBuffer)*temanho_x_fonte/2), 147, textBuffer, Font_16x26, GREEN, BLACK);
 8005bec:	4835      	ldr	r0, [pc, #212]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005bee:	f7fa faaf 	bl	8000150 <strlen>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	085b      	lsrs	r3, r3, #1
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8005bfe:	b298      	uxth	r0, r3
 8005c00:	4b35      	ldr	r3, [pc, #212]	; (8005cd8 <atualiza_tela_Versao_Publica+0x6d0>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	9202      	str	r2, [sp, #8]
 8005c06:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005c0a:	9201      	str	r2, [sp, #4]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	9200      	str	r2, [sp, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a2c      	ldr	r2, [pc, #176]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005c14:	2193      	movs	r1, #147	; 0x93
 8005c16:	f7ff f8d5 	bl	8004dc4 <WriteString>

		sprintf(textBuffer, "ONLINE");
 8005c1a:	4936      	ldr	r1, [pc, #216]	; (8005cf4 <atualiza_tela_Versao_Publica+0x6ec>)
 8005c1c:	4829      	ldr	r0, [pc, #164]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005c1e:	f008 f895 	bl	800dd4c <siprintf>
		WriteString(87, 197, textBuffer, Font_11x18, GREEN, BLACK);
 8005c22:	4b29      	ldr	r3, [pc, #164]	; (8005cc8 <atualiza_tela_Versao_Publica+0x6c0>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	9202      	str	r2, [sp, #8]
 8005c28:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005c2c:	9201      	str	r2, [sp, #4]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	9200      	str	r2, [sp, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a23      	ldr	r2, [pc, #140]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005c36:	21c5      	movs	r1, #197	; 0xc5
 8005c38:	2057      	movs	r0, #87	; 0x57
 8005c3a:	f7ff f8c3 	bl	8004dc4 <WriteString>
		//sprintf(textBuffer, "OFFLINE");
		//WriteString(82, 197, textBuffer, Font_11x18, YELLOW, BLACK);
	}
	if(estado_atual == ESTADO_C2)//estado C2
 8005c3e:	4b23      	ldr	r3, [pc, #140]	; (8005ccc <atualiza_tela_Versao_Publica+0x6c4>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	f040 80c7 	bne.w	8005dd6 <atualiza_tela_Versao_Publica+0x7ce>
	{
		//alterado para o teste de potência
		if(estado_atual != estado_anterior_display){
 8005c48:	4b20      	ldr	r3, [pc, #128]	; (8005ccc <atualiza_tela_Versao_Publica+0x6c4>)
 8005c4a:	781a      	ldrb	r2, [r3, #0]
 8005c4c:	4b20      	ldr	r3, [pc, #128]	; (8005cd0 <atualiza_tela_Versao_Publica+0x6c8>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d002      	beq.n	8005c5a <atualiza_tela_Versao_Publica+0x652>
			ClearScreen2(BLACK);
 8005c54:	2000      	movs	r0, #0
 8005c56:	f7ff fbeb 	bl	8005430 <ClearScreen2>
		}
		estado_anterior_display = estado_atual;
 8005c5a:	4b1c      	ldr	r3, [pc, #112]	; (8005ccc <atualiza_tela_Versao_Publica+0x6c4>)
 8005c5c:	781a      	ldrb	r2, [r3, #0]
 8005c5e:	4b1c      	ldr	r3, [pc, #112]	; (8005cd0 <atualiza_tela_Versao_Publica+0x6c8>)
 8005c60:	701a      	strb	r2, [r3, #0]
		sprintf(textBuffer, " CARREGANDO ");
 8005c62:	4926      	ldr	r1, [pc, #152]	; (8005cfc <atualiza_tela_Versao_Publica+0x6f4>)
 8005c64:	4817      	ldr	r0, [pc, #92]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005c66:	f008 f871 	bl	800dd4c <siprintf>
		WriteString(26, 43, textBuffer, Font_16x26, GREEN, BLACK);
 8005c6a:	4b1b      	ldr	r3, [pc, #108]	; (8005cd8 <atualiza_tela_Versao_Publica+0x6d0>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	9202      	str	r2, [sp, #8]
 8005c70:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005c74:	9201      	str	r2, [sp, #4]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	9200      	str	r2, [sp, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a11      	ldr	r2, [pc, #68]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005c7e:	212b      	movs	r1, #43	; 0x2b
 8005c80:	201a      	movs	r0, #26
 8005c82:	f7ff f89f 	bl	8004dc4 <WriteString>

		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8005c86:	2200      	movs	r2, #0
 8005c88:	4914      	ldr	r1, [pc, #80]	; (8005cdc <atualiza_tela_Versao_Publica+0x6d4>)
 8005c8a:	4815      	ldr	r0, [pc, #84]	; (8005ce0 <atualiza_tela_Versao_Publica+0x6d8>)
 8005c8c:	f004 ff82 	bl	800ab94 <HAL_RTC_GetTime>
		sprintf(textBuffer, "  %02d:%02d:%02d  ", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8005c90:	4b12      	ldr	r3, [pc, #72]	; (8005cdc <atualiza_tela_Versao_Publica+0x6d4>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	461a      	mov	r2, r3
 8005c96:	4b11      	ldr	r3, [pc, #68]	; (8005cdc <atualiza_tela_Versao_Publica+0x6d4>)
 8005c98:	785b      	ldrb	r3, [r3, #1]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	4b0f      	ldr	r3, [pc, #60]	; (8005cdc <atualiza_tela_Versao_Publica+0x6d4>)
 8005c9e:	789b      	ldrb	r3, [r3, #2]
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	490f      	ldr	r1, [pc, #60]	; (8005ce4 <atualiza_tela_Versao_Publica+0x6dc>)
 8005ca6:	4807      	ldr	r0, [pc, #28]	; (8005cc4 <atualiza_tela_Versao_Publica+0x6bc>)
 8005ca8:	f008 f850 	bl	800dd4c <siprintf>
		WriteString(24, 97, textBuffer, Font_16x26, WHITE, BLACK);
 8005cac:	4b0a      	ldr	r3, [pc, #40]	; (8005cd8 <atualiza_tela_Versao_Publica+0x6d0>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	9202      	str	r2, [sp, #8]
 8005cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cb6:	9201      	str	r2, [sp, #4]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	9200      	str	r2, [sp, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	e01f      	b.n	8005d00 <atualiza_tela_Versao_Publica+0x6f8>
 8005cc0:	08010894 	.word	0x08010894
 8005cc4:	200002a0 	.word	0x200002a0
 8005cc8:	2000001c 	.word	0x2000001c
 8005ccc:	200007d9 	.word	0x200007d9
 8005cd0:	20000298 	.word	0x20000298
 8005cd4:	08010844 	.word	0x08010844
 8005cd8:	20000024 	.word	0x20000024
 8005cdc:	200005d4 	.word	0x200005d4
 8005ce0:	20000370 	.word	0x20000370
 8005ce4:	08010854 	.word	0x08010854
 8005ce8:	200005a4 	.word	0x200005a4
 8005cec:	447a0000 	.word	0x447a0000
 8005cf0:	08010868 	.word	0x08010868
 8005cf4:	08010874 	.word	0x08010874
 8005cf8:	0801087c 	.word	0x0801087c
 8005cfc:	0801089c 	.word	0x0801089c
 8005d00:	4aac      	ldr	r2, [pc, #688]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005d02:	2161      	movs	r1, #97	; 0x61
 8005d04:	2018      	movs	r0, #24
 8005d06:	f7ff f85d 	bl	8004dc4 <WriteString>

		sprintf(textBuffer, "%.1f [W]", Energy/1000);			// energia consumida ao longo do tempo
 8005d0a:	4bab      	ldr	r3, [pc, #684]	; (8005fb8 <atualiza_tela_Versao_Publica+0x9b0>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	49ab      	ldr	r1, [pc, #684]	; (8005fbc <atualiza_tela_Versao_Publica+0x9b4>)
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fb f8eb 	bl	8000eec <__aeabi_fdiv>
 8005d16:	4603      	mov	r3, r0
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fa fb85 	bl	8000428 <__aeabi_f2d>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	49a7      	ldr	r1, [pc, #668]	; (8005fc0 <atualiza_tela_Versao_Publica+0x9b8>)
 8005d24:	48a3      	ldr	r0, [pc, #652]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005d26:	f008 f811 	bl	800dd4c <siprintf>
		WriteString(120-(strlen(textBuffer)*temanho_x_fonte/2), 147, textBuffer, Font_16x26, GREEN, BLACK);
 8005d2a:	48a2      	ldr	r0, [pc, #648]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005d2c:	f7fa fa10 	bl	8000150 <strlen>
 8005d30:	4603      	mov	r3, r0
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	085b      	lsrs	r3, r3, #1
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8005d3c:	b298      	uxth	r0, r3
 8005d3e:	4ba1      	ldr	r3, [pc, #644]	; (8005fc4 <atualiza_tela_Versao_Publica+0x9bc>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	9202      	str	r2, [sp, #8]
 8005d44:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005d48:	9201      	str	r2, [sp, #4]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	9200      	str	r2, [sp, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a98      	ldr	r2, [pc, #608]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005d52:	2193      	movs	r1, #147	; 0x93
 8005d54:	f7ff f836 	bl	8004dc4 <WriteString>

		//sprintf(textBuffer, "%.1f A", Irms);
		sprintf(textBuffer, "F1 %d V", V_fase_neutro);
 8005d58:	4b9b      	ldr	r3, [pc, #620]	; (8005fc8 <atualiza_tela_Versao_Publica+0x9c0>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	499b      	ldr	r1, [pc, #620]	; (8005fcc <atualiza_tela_Versao_Publica+0x9c4>)
 8005d60:	4894      	ldr	r0, [pc, #592]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005d62:	f007 fff3 	bl	800dd4c <siprintf>
		WriteString(87, 197-20, textBuffer, Font_11x18, GREEN, BLACK);
 8005d66:	4b9a      	ldr	r3, [pc, #616]	; (8005fd0 <atualiza_tela_Versao_Publica+0x9c8>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	9202      	str	r2, [sp, #8]
 8005d6c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005d70:	9201      	str	r2, [sp, #4]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	9200      	str	r2, [sp, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a8e      	ldr	r2, [pc, #568]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005d7a:	21b1      	movs	r1, #177	; 0xb1
 8005d7c:	2057      	movs	r0, #87	; 0x57
 8005d7e:	f7ff f821 	bl	8004dc4 <WriteString>

		//sprintf(textBuffer, "%.1f A", Irms2);
		sprintf(textBuffer, "F2 %d V", V_fase2_neutro);
 8005d82:	4b94      	ldr	r3, [pc, #592]	; (8005fd4 <atualiza_tela_Versao_Publica+0x9cc>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	461a      	mov	r2, r3
 8005d88:	4993      	ldr	r1, [pc, #588]	; (8005fd8 <atualiza_tela_Versao_Publica+0x9d0>)
 8005d8a:	488a      	ldr	r0, [pc, #552]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005d8c:	f007 ffde 	bl	800dd4c <siprintf>
		WriteString(87, 197-1, textBuffer, Font_11x18, GREEN, BLACK);
 8005d90:	4b8f      	ldr	r3, [pc, #572]	; (8005fd0 <atualiza_tela_Versao_Publica+0x9c8>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	9202      	str	r2, [sp, #8]
 8005d96:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005d9a:	9201      	str	r2, [sp, #4]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	9200      	str	r2, [sp, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a84      	ldr	r2, [pc, #528]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005da4:	21c4      	movs	r1, #196	; 0xc4
 8005da6:	2057      	movs	r0, #87	; 0x57
 8005da8:	f7ff f80c 	bl	8004dc4 <WriteString>

		//sprintf(textBuffer, "%.1f A", Irms3);
		sprintf(textBuffer, "F3 %d V", V_fase3_neutro);
 8005dac:	4b8b      	ldr	r3, [pc, #556]	; (8005fdc <atualiza_tela_Versao_Publica+0x9d4>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	461a      	mov	r2, r3
 8005db2:	498b      	ldr	r1, [pc, #556]	; (8005fe0 <atualiza_tela_Versao_Publica+0x9d8>)
 8005db4:	487f      	ldr	r0, [pc, #508]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005db6:	f007 ffc9 	bl	800dd4c <siprintf>
		WriteString(87, 197+18, textBuffer, Font_11x18, GREEN, BLACK);
 8005dba:	4b85      	ldr	r3, [pc, #532]	; (8005fd0 <atualiza_tela_Versao_Publica+0x9c8>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	9202      	str	r2, [sp, #8]
 8005dc0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005dc4:	9201      	str	r2, [sp, #4]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	9200      	str	r2, [sp, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a79      	ldr	r2, [pc, #484]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005dce:	21d7      	movs	r1, #215	; 0xd7
 8005dd0:	2057      	movs	r0, #87	; 0x57
 8005dd2:	f7fe fff7 	bl	8004dc4 <WriteString>
		//sprintf(textBuffer, "ONLINE");
		//WriteString(87, 197, textBuffer, Font_11x18, GREEN, BLACK);
		//sprintf(textBuffer, "OFFLINE");
		//WriteString(82, 197, textBuffer, Font_11x18, YELLOW, BLACK);
	}
	if(estado_atual == ESTADO_ERRO)//estado ERRO
 8005dd6:	4b83      	ldr	r3, [pc, #524]	; (8005fe4 <atualiza_tela_Versao_Publica+0x9dc>)
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2b06      	cmp	r3, #6
 8005ddc:	f040 8278 	bne.w	80062d0 <atualiza_tela_Versao_Publica+0xcc8>
	{
		if(estado_atual != estado_anterior_display){
 8005de0:	4b80      	ldr	r3, [pc, #512]	; (8005fe4 <atualiza_tela_Versao_Publica+0x9dc>)
 8005de2:	781a      	ldrb	r2, [r3, #0]
 8005de4:	4b80      	ldr	r3, [pc, #512]	; (8005fe8 <atualiza_tela_Versao_Publica+0x9e0>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d002      	beq.n	8005df2 <atualiza_tela_Versao_Publica+0x7ea>
			ClearScreen2(BLACK);
 8005dec:	2000      	movs	r0, #0
 8005dee:	f7ff fb1f 	bl	8005430 <ClearScreen2>
		}
		estado_anterior_display = estado_atual;
 8005df2:	4b7c      	ldr	r3, [pc, #496]	; (8005fe4 <atualiza_tela_Versao_Publica+0x9dc>)
 8005df4:	781a      	ldrb	r2, [r3, #0]
 8005df6:	4b7c      	ldr	r3, [pc, #496]	; (8005fe8 <atualiza_tela_Versao_Publica+0x9e0>)
 8005df8:	701a      	strb	r2, [r3, #0]
		sprintf(textBuffer, "    ERRO    ");
 8005dfa:	497c      	ldr	r1, [pc, #496]	; (8005fec <atualiza_tela_Versao_Publica+0x9e4>)
 8005dfc:	486d      	ldr	r0, [pc, #436]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005dfe:	f007 ffa5 	bl	800dd4c <siprintf>
		WriteString(24, 107, textBuffer, Font_16x26, RED, BLACK);
 8005e02:	4b70      	ldr	r3, [pc, #448]	; (8005fc4 <atualiza_tela_Versao_Publica+0x9bc>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	9202      	str	r2, [sp, #8]
 8005e08:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005e0c:	9201      	str	r2, [sp, #4]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	9200      	str	r2, [sp, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a67      	ldr	r2, [pc, #412]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005e16:	216b      	movs	r1, #107	; 0x6b
 8005e18:	2018      	movs	r0, #24
 8005e1a:	f7fe ffd3 	bl	8004dc4 <WriteString>

		sprintf(textBuffer, "%d", medida_CP_atual);
 8005e1e:	4b74      	ldr	r3, [pc, #464]	; (8005ff0 <atualiza_tela_Versao_Publica+0x9e8>)
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	4973      	ldr	r1, [pc, #460]	; (8005ff4 <atualiza_tela_Versao_Publica+0x9ec>)
 8005e26:	4863      	ldr	r0, [pc, #396]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005e28:	f007 ff90 	bl	800dd4c <siprintf>
		WriteString(120-(strlen(textBuffer)*11/2), 107+50, textBuffer, Font_11x18, LIGHTBLUE, BLACK);
 8005e2c:	4861      	ldr	r0, [pc, #388]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005e2e:	f7fa f98f 	bl	8000150 <strlen>
 8005e32:	4602      	mov	r2, r0
 8005e34:	4613      	mov	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	4413      	add	r3, r2
 8005e3e:	085b      	lsrs	r3, r3, #1
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8005e46:	b298      	uxth	r0, r3
 8005e48:	4b61      	ldr	r3, [pc, #388]	; (8005fd0 <atualiza_tela_Versao_Publica+0x9c8>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	9202      	str	r2, [sp, #8]
 8005e4e:	f647 527c 	movw	r2, #32124	; 0x7d7c
 8005e52:	9201      	str	r2, [sp, #4]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	9200      	str	r2, [sp, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a56      	ldr	r2, [pc, #344]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005e5c:	219d      	movs	r1, #157	; 0x9d
 8005e5e:	f7fe ffb1 	bl	8004dc4 <WriteString>

		if(hold_state_erro_temp == 1){
 8005e62:	4b65      	ldr	r3, [pc, #404]	; (8005ff8 <atualiza_tela_Versao_Publica+0x9f0>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d11e      	bne.n	8005ea8 <atualiza_tela_Versao_Publica+0x8a0>
			sprintf(textBuffer, "SOBRETEMPERATURA");
 8005e6a:	4964      	ldr	r1, [pc, #400]	; (8005ffc <atualiza_tela_Versao_Publica+0x9f4>)
 8005e6c:	4851      	ldr	r0, [pc, #324]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005e6e:	f007 ff6d 	bl	800dd4c <siprintf>
			WriteString(120-(strlen(textBuffer)*11/2), 140, textBuffer, Font_11x18, RED, BLACK);
 8005e72:	4850      	ldr	r0, [pc, #320]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005e74:	f7fa f96c 	bl	8000150 <strlen>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	4413      	add	r3, r2
 8005e84:	085b      	lsrs	r3, r3, #1
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8005e8c:	b298      	uxth	r0, r3
 8005e8e:	4b50      	ldr	r3, [pc, #320]	; (8005fd0 <atualiza_tela_Versao_Publica+0x9c8>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	9202      	str	r2, [sp, #8]
 8005e94:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005e98:	9201      	str	r2, [sp, #4]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	9200      	str	r2, [sp, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a44      	ldr	r2, [pc, #272]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005ea2:	218c      	movs	r1, #140	; 0x8c
 8005ea4:	f7fe ff8e 	bl	8004dc4 <WriteString>
		}
		if(hold_state_erro_sobrecorrente){
 8005ea8:	4b55      	ldr	r3, [pc, #340]	; (8006000 <atualiza_tela_Versao_Publica+0x9f8>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01e      	beq.n	8005eee <atualiza_tela_Versao_Publica+0x8e6>
			sprintf(textBuffer, "SOBRECORRENTE");
 8005eb0:	4954      	ldr	r1, [pc, #336]	; (8006004 <atualiza_tela_Versao_Publica+0x9fc>)
 8005eb2:	4840      	ldr	r0, [pc, #256]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005eb4:	f007 ff4a 	bl	800dd4c <siprintf>
			WriteString(120-(strlen(textBuffer)*11/2), 140, textBuffer, Font_11x18, RED, BLACK);
 8005eb8:	483e      	ldr	r0, [pc, #248]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005eba:	f7fa f949 	bl	8000150 <strlen>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	4413      	add	r3, r2
 8005eca:	085b      	lsrs	r3, r3, #1
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8005ed2:	b298      	uxth	r0, r3
 8005ed4:	4b3e      	ldr	r3, [pc, #248]	; (8005fd0 <atualiza_tela_Versao_Publica+0x9c8>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	9202      	str	r2, [sp, #8]
 8005eda:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005ede:	9201      	str	r2, [sp, #4]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	9200      	str	r2, [sp, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a33      	ldr	r2, [pc, #204]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005ee8:	218c      	movs	r1, #140	; 0x8c
 8005eea:	f7fe ff6b 	bl	8004dc4 <WriteString>
		}
		if(hold_state_erro_ativarele){
 8005eee:	4b46      	ldr	r3, [pc, #280]	; (8006008 <atualiza_tela_Versao_Publica+0xa00>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d03d      	beq.n	8005f72 <atualiza_tela_Versao_Publica+0x96a>
			sprintf(textBuffer, "ATIVAR RELE");
 8005ef6:	4945      	ldr	r1, [pc, #276]	; (800600c <atualiza_tela_Versao_Publica+0xa04>)
 8005ef8:	482e      	ldr	r0, [pc, #184]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005efa:	f007 ff27 	bl	800dd4c <siprintf>
			WriteString(120-(strlen(textBuffer)*11/2), 140, textBuffer, Font_11x18, RED, BLACK);
 8005efe:	482d      	ldr	r0, [pc, #180]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005f00:	f7fa f926 	bl	8000150 <strlen>
 8005f04:	4602      	mov	r2, r0
 8005f06:	4613      	mov	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	4413      	add	r3, r2
 8005f10:	085b      	lsrs	r3, r3, #1
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8005f18:	b298      	uxth	r0, r3
 8005f1a:	4b2d      	ldr	r3, [pc, #180]	; (8005fd0 <atualiza_tela_Versao_Publica+0x9c8>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	9202      	str	r2, [sp, #8]
 8005f20:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005f24:	9201      	str	r2, [sp, #4]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	9200      	str	r2, [sp, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a21      	ldr	r2, [pc, #132]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005f2e:	218c      	movs	r1, #140	; 0x8c
 8005f30:	f7fe ff48 	bl	8004dc4 <WriteString>
			sprintf(textBuffer, "REINICIE");
 8005f34:	4936      	ldr	r1, [pc, #216]	; (8006010 <atualiza_tela_Versao_Publica+0xa08>)
 8005f36:	481f      	ldr	r0, [pc, #124]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005f38:	f007 ff08 	bl	800dd4c <siprintf>
			WriteString(120-(strlen(textBuffer)*11/2), 135+19, textBuffer, Font_11x18, RED, BLACK);
 8005f3c:	481d      	ldr	r0, [pc, #116]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005f3e:	f7fa f907 	bl	8000150 <strlen>
 8005f42:	4602      	mov	r2, r0
 8005f44:	4613      	mov	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	4413      	add	r3, r2
 8005f4e:	085b      	lsrs	r3, r3, #1
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8005f56:	b298      	uxth	r0, r3
 8005f58:	4b1d      	ldr	r3, [pc, #116]	; (8005fd0 <atualiza_tela_Versao_Publica+0x9c8>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	9202      	str	r2, [sp, #8]
 8005f5e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005f62:	9201      	str	r2, [sp, #4]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	9200      	str	r2, [sp, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a12      	ldr	r2, [pc, #72]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005f6c:	219a      	movs	r1, #154	; 0x9a
 8005f6e:	f7fe ff29 	bl	8004dc4 <WriteString>
		}
		if(hold_state_erro_desativarele){
 8005f72:	4b28      	ldr	r3, [pc, #160]	; (8006014 <atualiza_tela_Versao_Publica+0xa0c>)
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d073      	beq.n	8006062 <atualiza_tela_Versao_Publica+0xa5a>
			sprintf(textBuffer, "DESATIVAR RELE");
 8005f7a:	4927      	ldr	r1, [pc, #156]	; (8006018 <atualiza_tela_Versao_Publica+0xa10>)
 8005f7c:	480d      	ldr	r0, [pc, #52]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005f7e:	f007 fee5 	bl	800dd4c <siprintf>
			WriteString(120-(strlen(textBuffer)*11/2), 140, textBuffer, Font_11x18, RED, BLACK);
 8005f82:	480c      	ldr	r0, [pc, #48]	; (8005fb4 <atualiza_tela_Versao_Publica+0x9ac>)
 8005f84:	f7fa f8e4 	bl	8000150 <strlen>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	005b      	lsls	r3, r3, #1
 8005f92:	4413      	add	r3, r2
 8005f94:	085b      	lsrs	r3, r3, #1
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8005f9c:	b298      	uxth	r0, r3
 8005f9e:	4b0c      	ldr	r3, [pc, #48]	; (8005fd0 <atualiza_tela_Versao_Publica+0x9c8>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	9202      	str	r2, [sp, #8]
 8005fa4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005fa8:	9201      	str	r2, [sp, #4]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	9200      	str	r2, [sp, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	e034      	b.n	800601c <atualiza_tela_Versao_Publica+0xa14>
 8005fb2:	bf00      	nop
 8005fb4:	200002a0 	.word	0x200002a0
 8005fb8:	200005a4 	.word	0x200005a4
 8005fbc:	447a0000 	.word	0x447a0000
 8005fc0:	08010868 	.word	0x08010868
 8005fc4:	20000024 	.word	0x20000024
 8005fc8:	2000023c 	.word	0x2000023c
 8005fcc:	080108ac 	.word	0x080108ac
 8005fd0:	2000001c 	.word	0x2000001c
 8005fd4:	20000240 	.word	0x20000240
 8005fd8:	080108b4 	.word	0x080108b4
 8005fdc:	20000244 	.word	0x20000244
 8005fe0:	080108bc 	.word	0x080108bc
 8005fe4:	200007d9 	.word	0x200007d9
 8005fe8:	20000298 	.word	0x20000298
 8005fec:	080108c4 	.word	0x080108c4
 8005ff0:	200005d2 	.word	0x200005d2
 8005ff4:	080108d4 	.word	0x080108d4
 8005ff8:	20000274 	.word	0x20000274
 8005ffc:	080108d8 	.word	0x080108d8
 8006000:	20000275 	.word	0x20000275
 8006004:	08010834 	.word	0x08010834
 8006008:	20000276 	.word	0x20000276
 800600c:	080108ec 	.word	0x080108ec
 8006010:	080108f8 	.word	0x080108f8
 8006014:	20000277 	.word	0x20000277
 8006018:	08010904 	.word	0x08010904
 800601c:	4a7b      	ldr	r2, [pc, #492]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 800601e:	218c      	movs	r1, #140	; 0x8c
 8006020:	f7fe fed0 	bl	8004dc4 <WriteString>
			sprintf(textBuffer, "REINICIE");
 8006024:	497a      	ldr	r1, [pc, #488]	; (8006210 <atualiza_tela_Versao_Publica+0xc08>)
 8006026:	4879      	ldr	r0, [pc, #484]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 8006028:	f007 fe90 	bl	800dd4c <siprintf>
			WriteString(120-(strlen(textBuffer)*11/2), 135+19, textBuffer, Font_11x18, RED, BLACK);
 800602c:	4877      	ldr	r0, [pc, #476]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 800602e:	f7fa f88f 	bl	8000150 <strlen>
 8006032:	4602      	mov	r2, r0
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	4413      	add	r3, r2
 800603e:	085b      	lsrs	r3, r3, #1
 8006040:	b29b      	uxth	r3, r3
 8006042:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8006046:	b298      	uxth	r0, r3
 8006048:	4b72      	ldr	r3, [pc, #456]	; (8006214 <atualiza_tela_Versao_Publica+0xc0c>)
 800604a:	2200      	movs	r2, #0
 800604c:	9202      	str	r2, [sp, #8]
 800604e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006052:	9201      	str	r2, [sp, #4]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	9200      	str	r2, [sp, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a6c      	ldr	r2, [pc, #432]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 800605c:	219a      	movs	r1, #154	; 0x9a
 800605e:	f7fe feb1 	bl	8004dc4 <WriteString>
		}
		if(hold_state_erro_detectar_ordem_fases){
 8006062:	4b6d      	ldr	r3, [pc, #436]	; (8006218 <atualiza_tela_Versao_Publica+0xc10>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d01e      	beq.n	80060a8 <atualiza_tela_Versao_Publica+0xaa0>
			sprintf(textBuffer, "ORDEM DAS FASES NAO DETECTADA");
 800606a:	496c      	ldr	r1, [pc, #432]	; (800621c <atualiza_tela_Versao_Publica+0xc14>)
 800606c:	4867      	ldr	r0, [pc, #412]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 800606e:	f007 fe6d 	bl	800dd4c <siprintf>
			WriteString(120-(strlen(textBuffer)*11/2), 140, textBuffer, Font_11x18, RED, BLACK);
 8006072:	4866      	ldr	r0, [pc, #408]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 8006074:	f7fa f86c 	bl	8000150 <strlen>
 8006078:	4602      	mov	r2, r0
 800607a:	4613      	mov	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	005b      	lsls	r3, r3, #1
 8006082:	4413      	add	r3, r2
 8006084:	085b      	lsrs	r3, r3, #1
 8006086:	b29b      	uxth	r3, r3
 8006088:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 800608c:	b298      	uxth	r0, r3
 800608e:	4b61      	ldr	r3, [pc, #388]	; (8006214 <atualiza_tela_Versao_Publica+0xc0c>)
 8006090:	2200      	movs	r2, #0
 8006092:	9202      	str	r2, [sp, #8]
 8006094:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006098:	9201      	str	r2, [sp, #4]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	9200      	str	r2, [sp, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a5a      	ldr	r2, [pc, #360]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 80060a2:	218c      	movs	r1, #140	; 0x8c
 80060a4:	f7fe fe8e 	bl	8004dc4 <WriteString>
		}
		if(hold_state_erro_conexao_fase){
 80060a8:	4b5d      	ldr	r3, [pc, #372]	; (8006220 <atualiza_tela_Versao_Publica+0xc18>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d03d      	beq.n	800612c <atualiza_tela_Versao_Publica+0xb24>
			sprintf(textBuffer, "ERRO NA CONEXAO");
 80060b0:	495c      	ldr	r1, [pc, #368]	; (8006224 <atualiza_tela_Versao_Publica+0xc1c>)
 80060b2:	4856      	ldr	r0, [pc, #344]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 80060b4:	f007 fe4a 	bl	800dd4c <siprintf>
			WriteString(120-(strlen(textBuffer)*11/2), 135, textBuffer, Font_11x18, RED, BLACK);
 80060b8:	4854      	ldr	r0, [pc, #336]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 80060ba:	f7fa f849 	bl	8000150 <strlen>
 80060be:	4602      	mov	r2, r0
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	4413      	add	r3, r2
 80060ca:	085b      	lsrs	r3, r3, #1
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80060d2:	b298      	uxth	r0, r3
 80060d4:	4b4f      	ldr	r3, [pc, #316]	; (8006214 <atualiza_tela_Versao_Publica+0xc0c>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	9202      	str	r2, [sp, #8]
 80060da:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80060de:	9201      	str	r2, [sp, #4]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	9200      	str	r2, [sp, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a49      	ldr	r2, [pc, #292]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 80060e8:	2187      	movs	r1, #135	; 0x87
 80060ea:	f7fe fe6b 	bl	8004dc4 <WriteString>
			sprintf(textBuffer, "DAS FASES");
 80060ee:	494e      	ldr	r1, [pc, #312]	; (8006228 <atualiza_tela_Versao_Publica+0xc20>)
 80060f0:	4846      	ldr	r0, [pc, #280]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 80060f2:	f007 fe2b 	bl	800dd4c <siprintf>
			WriteString(120-(strlen(textBuffer)*11/2), 135+19, textBuffer, Font_11x18, RED, BLACK);
 80060f6:	4845      	ldr	r0, [pc, #276]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 80060f8:	f7fa f82a 	bl	8000150 <strlen>
 80060fc:	4602      	mov	r2, r0
 80060fe:	4613      	mov	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	4413      	add	r3, r2
 8006108:	085b      	lsrs	r3, r3, #1
 800610a:	b29b      	uxth	r3, r3
 800610c:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8006110:	b298      	uxth	r0, r3
 8006112:	4b40      	ldr	r3, [pc, #256]	; (8006214 <atualiza_tela_Versao_Publica+0xc0c>)
 8006114:	2200      	movs	r2, #0
 8006116:	9202      	str	r2, [sp, #8]
 8006118:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800611c:	9201      	str	r2, [sp, #4]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	9200      	str	r2, [sp, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a39      	ldr	r2, [pc, #228]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 8006126:	219a      	movs	r1, #154	; 0x9a
 8006128:	f7fe fe4c 	bl	8004dc4 <WriteString>
		}
		if(Flag_IDR_tipo_B){
 800612c:	4b3f      	ldr	r3, [pc, #252]	; (800622c <atualiza_tela_Versao_Publica+0xc24>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 80aa 	beq.w	800628a <atualiza_tela_Versao_Publica+0xc82>
			sprintf(textBuffer, "ACIONAMENTO IDR");
 8006136:	493e      	ldr	r1, [pc, #248]	; (8006230 <atualiza_tela_Versao_Publica+0xc28>)
 8006138:	4834      	ldr	r0, [pc, #208]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 800613a:	f007 fe07 	bl	800dd4c <siprintf>
			WriteString(120-(strlen(textBuffer)*11/2), 135, textBuffer, Font_11x18, RED, BLACK);
 800613e:	4833      	ldr	r0, [pc, #204]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 8006140:	f7fa f806 	bl	8000150 <strlen>
 8006144:	4602      	mov	r2, r0
 8006146:	4613      	mov	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	4413      	add	r3, r2
 8006150:	085b      	lsrs	r3, r3, #1
 8006152:	b29b      	uxth	r3, r3
 8006154:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8006158:	b298      	uxth	r0, r3
 800615a:	4b2e      	ldr	r3, [pc, #184]	; (8006214 <atualiza_tela_Versao_Publica+0xc0c>)
 800615c:	2200      	movs	r2, #0
 800615e:	9202      	str	r2, [sp, #8]
 8006160:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006164:	9201      	str	r2, [sp, #4]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	9200      	str	r2, [sp, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a27      	ldr	r2, [pc, #156]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 800616e:	2187      	movs	r1, #135	; 0x87
 8006170:	f7fe fe28 	bl	8004dc4 <WriteString>
			if(Flag_IDR_AC && Flag_IDR_DC){
 8006174:	4b2f      	ldr	r3, [pc, #188]	; (8006234 <atualiza_tela_Versao_Publica+0xc2c>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d023      	beq.n	80061c4 <atualiza_tela_Versao_Publica+0xbbc>
 800617c:	4b2e      	ldr	r3, [pc, #184]	; (8006238 <atualiza_tela_Versao_Publica+0xc30>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d01f      	beq.n	80061c4 <atualiza_tela_Versao_Publica+0xbbc>
				sprintf(textBuffer, "AC e DC");
 8006184:	492d      	ldr	r1, [pc, #180]	; (800623c <atualiza_tela_Versao_Publica+0xc34>)
 8006186:	4821      	ldr	r0, [pc, #132]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 8006188:	f007 fde0 	bl	800dd4c <siprintf>
				WriteString(120-(strlen(textBuffer)*11/2), 135+19, textBuffer, Font_11x18, RED, BLACK);
 800618c:	481f      	ldr	r0, [pc, #124]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 800618e:	f7f9 ffdf 	bl	8000150 <strlen>
 8006192:	4602      	mov	r2, r0
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	4413      	add	r3, r2
 800619e:	085b      	lsrs	r3, r3, #1
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80061a6:	b298      	uxth	r0, r3
 80061a8:	4b1a      	ldr	r3, [pc, #104]	; (8006214 <atualiza_tela_Versao_Publica+0xc0c>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	9202      	str	r2, [sp, #8]
 80061ae:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80061b2:	9201      	str	r2, [sp, #4]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	9200      	str	r2, [sp, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a14      	ldr	r2, [pc, #80]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 80061bc:	219a      	movs	r1, #154	; 0x9a
 80061be:	f7fe fe01 	bl	8004dc4 <WriteString>
 80061c2:	e062      	b.n	800628a <atualiza_tela_Versao_Publica+0xc82>
			}else if(Flag_IDR_AC){
 80061c4:	4b1b      	ldr	r3, [pc, #108]	; (8006234 <atualiza_tela_Versao_Publica+0xc2c>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d03b      	beq.n	8006244 <atualiza_tela_Versao_Publica+0xc3c>
				sprintf(textBuffer, "AC");
 80061cc:	491c      	ldr	r1, [pc, #112]	; (8006240 <atualiza_tela_Versao_Publica+0xc38>)
 80061ce:	480f      	ldr	r0, [pc, #60]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 80061d0:	f007 fdbc 	bl	800dd4c <siprintf>
				WriteString(120-(strlen(textBuffer)*11/2), 135+19, textBuffer, Font_11x18, RED, BLACK);
 80061d4:	480d      	ldr	r0, [pc, #52]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 80061d6:	f7f9 ffbb 	bl	8000150 <strlen>
 80061da:	4602      	mov	r2, r0
 80061dc:	4613      	mov	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	4413      	add	r3, r2
 80061e6:	085b      	lsrs	r3, r3, #1
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80061ee:	b298      	uxth	r0, r3
 80061f0:	4b08      	ldr	r3, [pc, #32]	; (8006214 <atualiza_tela_Versao_Publica+0xc0c>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	9202      	str	r2, [sp, #8]
 80061f6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80061fa:	9201      	str	r2, [sp, #4]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	9200      	str	r2, [sp, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a02      	ldr	r2, [pc, #8]	; (800620c <atualiza_tela_Versao_Publica+0xc04>)
 8006204:	219a      	movs	r1, #154	; 0x9a
 8006206:	f7fe fddd 	bl	8004dc4 <WriteString>
 800620a:	e03e      	b.n	800628a <atualiza_tela_Versao_Publica+0xc82>
 800620c:	200002a0 	.word	0x200002a0
 8006210:	080108f8 	.word	0x080108f8
 8006214:	2000001c 	.word	0x2000001c
 8006218:	20000278 	.word	0x20000278
 800621c:	08010914 	.word	0x08010914
 8006220:	20000279 	.word	0x20000279
 8006224:	08010934 	.word	0x08010934
 8006228:	08010944 	.word	0x08010944
 800622c:	20000235 	.word	0x20000235
 8006230:	08010950 	.word	0x08010950
 8006234:	20000236 	.word	0x20000236
 8006238:	20000237 	.word	0x20000237
 800623c:	08010960 	.word	0x08010960
 8006240:	08010968 	.word	0x08010968
			}else if(Flag_IDR_DC){
 8006244:	4b35      	ldr	r3, [pc, #212]	; (800631c <atualiza_tela_Versao_Publica+0xd14>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d01e      	beq.n	800628a <atualiza_tela_Versao_Publica+0xc82>
				sprintf(textBuffer, "DC");
 800624c:	4934      	ldr	r1, [pc, #208]	; (8006320 <atualiza_tela_Versao_Publica+0xd18>)
 800624e:	4835      	ldr	r0, [pc, #212]	; (8006324 <atualiza_tela_Versao_Publica+0xd1c>)
 8006250:	f007 fd7c 	bl	800dd4c <siprintf>
				WriteString(120-(strlen(textBuffer)*11/2), 135+19, textBuffer, Font_11x18, RED, BLACK);
 8006254:	4833      	ldr	r0, [pc, #204]	; (8006324 <atualiza_tela_Versao_Publica+0xd1c>)
 8006256:	f7f9 ff7b 	bl	8000150 <strlen>
 800625a:	4602      	mov	r2, r0
 800625c:	4613      	mov	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	4413      	add	r3, r2
 8006266:	085b      	lsrs	r3, r3, #1
 8006268:	b29b      	uxth	r3, r3
 800626a:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 800626e:	b298      	uxth	r0, r3
 8006270:	4b2d      	ldr	r3, [pc, #180]	; (8006328 <atualiza_tela_Versao_Publica+0xd20>)
 8006272:	2200      	movs	r2, #0
 8006274:	9202      	str	r2, [sp, #8]
 8006276:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800627a:	9201      	str	r2, [sp, #4]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	9200      	str	r2, [sp, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a28      	ldr	r2, [pc, #160]	; (8006324 <atualiza_tela_Versao_Publica+0xd1c>)
 8006284:	219a      	movs	r1, #154	; 0x9a
 8006286:	f7fe fd9d 	bl	8004dc4 <WriteString>
			}
		}
		if(hold_state_erro_rele_colado){
 800628a:	4b28      	ldr	r3, [pc, #160]	; (800632c <atualiza_tela_Versao_Publica+0xd24>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d01e      	beq.n	80062d0 <atualiza_tela_Versao_Publica+0xcc8>
			sprintf(textBuffer, "RELE COLADO");
 8006292:	4927      	ldr	r1, [pc, #156]	; (8006330 <atualiza_tela_Versao_Publica+0xd28>)
 8006294:	4823      	ldr	r0, [pc, #140]	; (8006324 <atualiza_tela_Versao_Publica+0xd1c>)
 8006296:	f007 fd59 	bl	800dd4c <siprintf>
			WriteString(120-(strlen(textBuffer)*11/2), 135, textBuffer, Font_11x18, RED, BLACK);
 800629a:	4822      	ldr	r0, [pc, #136]	; (8006324 <atualiza_tela_Versao_Publica+0xd1c>)
 800629c:	f7f9 ff58 	bl	8000150 <strlen>
 80062a0:	4602      	mov	r2, r0
 80062a2:	4613      	mov	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	4413      	add	r3, r2
 80062ac:	085b      	lsrs	r3, r3, #1
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80062b4:	b298      	uxth	r0, r3
 80062b6:	4b1c      	ldr	r3, [pc, #112]	; (8006328 <atualiza_tela_Versao_Publica+0xd20>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	9202      	str	r2, [sp, #8]
 80062bc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80062c0:	9201      	str	r2, [sp, #4]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	9200      	str	r2, [sp, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a16      	ldr	r2, [pc, #88]	; (8006324 <atualiza_tela_Versao_Publica+0xd1c>)
 80062ca:	2187      	movs	r1, #135	; 0x87
 80062cc:	f7fe fd7a 	bl	8004dc4 <WriteString>
		}

	}
	if(estado_atual == ESTADO_F)//estado F
 80062d0:	4b18      	ldr	r3, [pc, #96]	; (8006334 <atualiza_tela_Versao_Publica+0xd2c>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b05      	cmp	r3, #5
 80062d6:	d11e      	bne.n	8006316 <atualiza_tela_Versao_Publica+0xd0e>
	{
		if(estado_atual != estado_anterior_display){
 80062d8:	4b16      	ldr	r3, [pc, #88]	; (8006334 <atualiza_tela_Versao_Publica+0xd2c>)
 80062da:	781a      	ldrb	r2, [r3, #0]
 80062dc:	4b16      	ldr	r3, [pc, #88]	; (8006338 <atualiza_tela_Versao_Publica+0xd30>)
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d002      	beq.n	80062ea <atualiza_tela_Versao_Publica+0xce2>
			ClearScreen2(BLACK);
 80062e4:	2000      	movs	r0, #0
 80062e6:	f7ff f8a3 	bl	8005430 <ClearScreen2>
		}
		estado_anterior_display = estado_atual;
 80062ea:	4b12      	ldr	r3, [pc, #72]	; (8006334 <atualiza_tela_Versao_Publica+0xd2c>)
 80062ec:	781a      	ldrb	r2, [r3, #0]
 80062ee:	4b12      	ldr	r3, [pc, #72]	; (8006338 <atualiza_tela_Versao_Publica+0xd30>)
 80062f0:	701a      	strb	r2, [r3, #0]
		sprintf(textBuffer, "INDISPONIVEL");
 80062f2:	4912      	ldr	r1, [pc, #72]	; (800633c <atualiza_tela_Versao_Publica+0xd34>)
 80062f4:	480b      	ldr	r0, [pc, #44]	; (8006324 <atualiza_tela_Versao_Publica+0xd1c>)
 80062f6:	f007 fd29 	bl	800dd4c <siprintf>
		WriteString(26, 107, textBuffer, Font_16x26, RED, BLACK);
 80062fa:	4b11      	ldr	r3, [pc, #68]	; (8006340 <atualiza_tela_Versao_Publica+0xd38>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	9202      	str	r2, [sp, #8]
 8006300:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006304:	9201      	str	r2, [sp, #4]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	9200      	str	r2, [sp, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a05      	ldr	r2, [pc, #20]	; (8006324 <atualiza_tela_Versao_Publica+0xd1c>)
 800630e:	216b      	movs	r1, #107	; 0x6b
 8006310:	201a      	movs	r0, #26
 8006312:	f7fe fd57 	bl	8004dc4 <WriteString>
	}
	//LCD_DrawLine(0, 120, 240, 120, GREEN);	//linhas para identificar o centro da tela
	//LCD_DrawLine(120, 0, 120, 240, GREEN);
}
 8006316:	bf00      	nop
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	20000237 	.word	0x20000237
 8006320:	0801096c 	.word	0x0801096c
 8006324:	200002a0 	.word	0x200002a0
 8006328:	2000001c 	.word	0x2000001c
 800632c:	2000027a 	.word	0x2000027a
 8006330:	08010970 	.word	0x08010970
 8006334:	200007d9 	.word	0x200007d9
 8006338:	20000298 	.word	0x20000298
 800633c:	0801097c 	.word	0x0801097c
 8006340:	20000024 	.word	0x20000024

08006344 <HAL_UARTEx_RxEventCallback>:
estado_t estado_anterior;
estado_t estado_atual;
int teste = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	460b      	mov	r3, r1
 800634e:	807b      	strh	r3, [r7, #2]
	if (RxData[0] == SLAVE_ID)
 8006350:	4b26      	ldr	r3, [pc, #152]	; (80063ec <HAL_UARTEx_RxEventCallback+0xa8>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b07      	cmp	r3, #7
 8006356:	d13d      	bne.n	80063d4 <HAL_UARTEx_RxEventCallback+0x90>
	{
		switch (RxData[1]){
 8006358:	4b24      	ldr	r3, [pc, #144]	; (80063ec <HAL_UARTEx_RxEventCallback+0xa8>)
 800635a:	785b      	ldrb	r3, [r3, #1]
 800635c:	3b01      	subs	r3, #1
 800635e:	2b0f      	cmp	r3, #15
 8006360:	d834      	bhi.n	80063cc <HAL_UARTEx_RxEventCallback+0x88>
 8006362:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <HAL_UARTEx_RxEventCallback+0x24>)
 8006364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006368:	080063b5 	.word	0x080063b5
 800636c:	080063bb 	.word	0x080063bb
 8006370:	080063a9 	.word	0x080063a9
 8006374:	080063af 	.word	0x080063af
 8006378:	080063cd 	.word	0x080063cd
 800637c:	080063c1 	.word	0x080063c1
 8006380:	080063cd 	.word	0x080063cd
 8006384:	080063cd 	.word	0x080063cd
 8006388:	080063cd 	.word	0x080063cd
 800638c:	080063cd 	.word	0x080063cd
 8006390:	080063cd 	.word	0x080063cd
 8006394:	080063cd 	.word	0x080063cd
 8006398:	080063cd 	.word	0x080063cd
 800639c:	080063cd 	.word	0x080063cd
 80063a0:	080063cd 	.word	0x080063cd
 80063a4:	080063c7 	.word	0x080063c7
		case 0x03:
			readHoldingRegs();
 80063a8:	f001 f816 	bl	80073d8 <readHoldingRegs>
			break;
 80063ac:	e013      	b.n	80063d6 <HAL_UARTEx_RxEventCallback+0x92>
		case 0x04:
			readInputRegs();
 80063ae:	f001 f885 	bl	80074bc <readInputRegs>
			break;
 80063b2:	e010      	b.n	80063d6 <HAL_UARTEx_RxEventCallback+0x92>
		case 0x01:
			readCoils();
 80063b4:	f001 f8f4 	bl	80075a0 <readCoils>
			break;
 80063b8:	e00d      	b.n	80063d6 <HAL_UARTEx_RxEventCallback+0x92>
		case 0x02:
			readInputs();
 80063ba:	f001 f99f 	bl	80076fc <readInputs>
			break;
 80063be:	e00a      	b.n	80063d6 <HAL_UARTEx_RxEventCallback+0x92>
		case 0x06:
			writeSingleReg();
 80063c0:	f001 fac4 	bl	800794c <writeSingleReg>
			break;
 80063c4:	e007      	b.n	80063d6 <HAL_UARTEx_RxEventCallback+0x92>
		case 0x10:
			writeHoldingRegs();
 80063c6:	f001 fa47 	bl	8007858 <writeHoldingRegs>
			break;
 80063ca:	e004      	b.n	80063d6 <HAL_UARTEx_RxEventCallback+0x92>
		default:
			modbusException(ILLEGAL_FUNCTION);
 80063cc:	2001      	movs	r0, #1
 80063ce:	f000 ffe3 	bl	8007398 <modbusException>
			break;
 80063d2:	e000      	b.n	80063d6 <HAL_UARTEx_RxEventCallback+0x92>
		}
	}
 80063d4:	bf00      	nop
	//else
		//printMsg("Wrong Slave ID /n");
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 256);
 80063d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063da:	4904      	ldr	r1, [pc, #16]	; (80063ec <HAL_UARTEx_RxEventCallback+0xa8>)
 80063dc:	4804      	ldr	r0, [pc, #16]	; (80063f0 <HAL_UARTEx_RxEventCallback+0xac>)
 80063de:	f006 fa47 	bl	800c870 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80063e2:	bf00      	nop
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	200005d8 	.word	0x200005d8
 80063f0:	20000540 	.word	0x20000540
 80063f4:	00000000 	.word	0x00000000

080063f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80063f8:	b598      	push	{r3, r4, r7, lr}
 80063fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80063fc:	f001 ffd4 	bl	80083a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006400:	f000 f9ee 	bl	80067e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006404:	f000 fcd8 	bl	8006db8 <MX_GPIO_Init>
  MX_DMA_Init();
 8006408:	f000 fcb8 	bl	8006d7c <MX_DMA_Init>
  MX_ADC1_Init();
 800640c:	f000 fa4c 	bl	80068a8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8006410:	f000 faec 	bl	80069ec <MX_TIM1_Init>
  MX_TIM2_Init();
 8006414:	f000 fb6c 	bl	8006af0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8006418:	f000 fbd8 	bl	8006bcc <MX_TIM3_Init>
  MX_TIM4_Init();
 800641c:	f000 fc30 	bl	8006c80 <MX_TIM4_Init>
  //MX_IWDG_Init();
  MX_SPI2_Init();
 8006420:	f000 faae 	bl	8006980 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8006424:	f000 fc80 	bl	8006d28 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8006428:	f000 fa8e 	bl	8006948 <MX_RTC_Init>
  MX_ADC2_Init();
 800642c:	f000 fa64 	bl	80068f8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 256);
 8006430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006434:	499c      	ldr	r1, [pc, #624]	; (80066a8 <main+0x2b0>)
 8006436:	489d      	ldr	r0, [pc, #628]	; (80066ac <main+0x2b4>)
 8006438:	f006 fa1a 	bl	800c870 <HAL_UARTEx_ReceiveToIdle_IT>
  Holding_Registers_Database[MB_REG_STATE]='0'; //teste
 800643c:	4b9c      	ldr	r3, [pc, #624]	; (80066b0 <main+0x2b8>)
 800643e:	2230      	movs	r2, #48	; 0x30
 8006440:	805a      	strh	r2, [r3, #2]
  Holding_Registers_Database[MB_REG_OCPP_Charge] = 1;
 8006442:	4b9b      	ldr	r3, [pc, #620]	; (80066b0 <main+0x2b8>)
 8006444:	2201      	movs	r2, #1
 8006446:	819a      	strh	r2, [r3, #12]
  Holding_Registers_Database[MB_REG_CurrentConfig] = corrente;
 8006448:	4b9a      	ldr	r3, [pc, #616]	; (80066b4 <main+0x2bc>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	b29a      	uxth	r2, r3
 800644e:	4b98      	ldr	r3, [pc, #608]	; (80066b0 <main+0x2b8>)
 8006450:	815a      	strh	r2, [r3, #10]

  HAL_Delay(500);
 8006452:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006456:	f002 f809 	bl	800846c <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 800645a:	4897      	ldr	r0, [pc, #604]	; (80066b8 <main+0x2c0>)
 800645c:	f005 f9e4 	bl	800b828 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8006460:	4896      	ldr	r0, [pc, #600]	; (80066bc <main+0x2c4>)
 8006462:	f005 f997 	bl	800b794 <HAL_TIM_Base_Start>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8006466:	213c      	movs	r1, #60	; 0x3c
 8006468:	4895      	ldr	r0, [pc, #596]	; (80066c0 <main+0x2c8>)
 800646a:	f005 fbc3 	bl	800bbf4 <HAL_TIM_Encoder_Start_IT>

  inicia_sistema();
 800646e:	f7fa fe97 	bl	80011a0 <inicia_sistema>
  }else{
	  Energy = *((float*)&read_energy);
  }
#endif
#ifndef guarda_val_energia
  Flash_Write_Data(0x0801FC00, (uint32_t*)&Energy, 1);
 8006472:	2201      	movs	r2, #1
 8006474:	4993      	ldr	r1, [pc, #588]	; (80066c4 <main+0x2cc>)
 8006476:	4894      	ldr	r0, [pc, #592]	; (80066c8 <main+0x2d0>)
 8006478:	f7fe fbd8 	bl	8004c2c <Flash_Write_Data>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_IWDG_Refresh(&hiwdg);
	  if(Flag_temp_70){
 800647c:	4b93      	ldr	r3, [pc, #588]	; (80066cc <main+0x2d4>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <main+0xa2>
		  tabela_estados[estado_atual](corrente_temp_alta);
 8006484:	4b92      	ldr	r3, [pc, #584]	; (80066d0 <main+0x2d8>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	461a      	mov	r2, r3
 800648a:	4b92      	ldr	r3, [pc, #584]	; (80066d4 <main+0x2dc>)
 800648c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006490:	4a91      	ldr	r2, [pc, #580]	; (80066d8 <main+0x2e0>)
 8006492:	6812      	ldr	r2, [r2, #0]
 8006494:	4610      	mov	r0, r2
 8006496:	4798      	blx	r3
 8006498:	e009      	b.n	80064ae <main+0xb6>
	  }else{
		  tabela_estados[estado_atual](corrente);
 800649a:	4b8d      	ldr	r3, [pc, #564]	; (80066d0 <main+0x2d8>)
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	461a      	mov	r2, r3
 80064a0:	4b8c      	ldr	r3, [pc, #560]	; (80066d4 <main+0x2dc>)
 80064a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a6:	4a83      	ldr	r2, [pc, #524]	; (80066b4 <main+0x2bc>)
 80064a8:	6812      	ldr	r2, [r2, #0]
 80064aa:	4610      	mov	r0, r2
 80064ac:	4798      	blx	r3
	  }

	  MBupdateRegisters(); 			//atualização de registrados Modbus.
 80064ae:	f001 fa97 	bl	80079e0 <MBupdateRegisters>
		  	atualiza_corrente_encoder(tela_state);
		  	tela_state = 0;
	  		Flag_Atualiza_Corrente = 0;
	  	}
#endif
	  if(timer_reset_display>=1800 && estado_atual==0)
 80064b2:	4b8a      	ldr	r3, [pc, #552]	; (80066dc <main+0x2e4>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80064ba:	db08      	blt.n	80064ce <main+0xd6>
 80064bc:	4b84      	ldr	r3, [pc, #528]	; (80066d0 <main+0x2d8>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d104      	bne.n	80064ce <main+0xd6>
	 	  {
	 		  timer_reset_display=0;
 80064c4:	4b85      	ldr	r3, [pc, #532]	; (80066dc <main+0x2e4>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	601a      	str	r2, [r3, #0]
	 		  GC9A01_Initial();
 80064ca:	f7fe fd5f 	bl	8004f8c <GC9A01_Initial>
	 	  }
	  if(Flag_Set_Time)
 80064ce:	4b84      	ldr	r3, [pc, #528]	; (80066e0 <main+0x2e8>)
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d016      	beq.n	8006504 <main+0x10c>
	  {
		  sTime.Hours = h;
 80064d6:	4b83      	ldr	r3, [pc, #524]	; (80066e4 <main+0x2ec>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	4b82      	ldr	r3, [pc, #520]	; (80066e8 <main+0x2f0>)
 80064de:	701a      	strb	r2, [r3, #0]
		  sTime.Minutes = m;
 80064e0:	4b82      	ldr	r3, [pc, #520]	; (80066ec <main+0x2f4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	4b80      	ldr	r3, [pc, #512]	; (80066e8 <main+0x2f0>)
 80064e8:	705a      	strb	r2, [r3, #1]
		  sTime.Seconds = s;
 80064ea:	4b81      	ldr	r3, [pc, #516]	; (80066f0 <main+0x2f8>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	4b7d      	ldr	r3, [pc, #500]	; (80066e8 <main+0x2f0>)
 80064f2:	709a      	strb	r2, [r3, #2]
		  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80064f4:	2200      	movs	r2, #0
 80064f6:	497c      	ldr	r1, [pc, #496]	; (80066e8 <main+0x2f0>)
 80064f8:	487e      	ldr	r0, [pc, #504]	; (80066f4 <main+0x2fc>)
 80064fa:	f004 fab3 	bl	800aa64 <HAL_RTC_SetTime>
		  Flag_Set_Time = 0;
 80064fe:	4b78      	ldr	r3, [pc, #480]	; (80066e0 <main+0x2e8>)
 8006500:	2200      	movs	r2, #0
 8006502:	701a      	strb	r2, [r3, #0]
	  }
	  if (Flag_1_segundo)
 8006504:	4b7c      	ldr	r3, [pc, #496]	; (80066f8 <main+0x300>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d004      	beq.n	8006516 <main+0x11e>
	  {
		  //acontece  a cada 1s
		  Flag_1_segundo = 0;
 800650c:	4b7a      	ldr	r3, [pc, #488]	; (80066f8 <main+0x300>)
 800650e:	2200      	movs	r2, #0
 8006510:	701a      	strb	r2, [r3, #0]
		  // atualiza a temperatura
		  atualiza_temperatura();
 8006512:	f7fe f825 	bl	8004560 <atualiza_temperatura>
		  //medidas de corrente e tensão para calculo de potência
		  //power_data_sample();
		  // calcula a poetência com as medidas de tensão e corrente instantânea
		  //power_calc();
	  }
	  if (Flag_tela) //ocorre a cada  segundos ou quando a flag é chamada
 8006516:	4b79      	ldr	r3, [pc, #484]	; (80066fc <main+0x304>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d0ae      	beq.n	800647c <main+0x84>
	  {
#ifndef VersaoPublica
		  atualiza_tela_Versao_Residencial(tela_state);
#endif
#ifdef VersaoPublica
		  atualiza_tela_Versao_Publica();
 800651e:	f7ff f873 	bl	8005608 <atualiza_tela_Versao_Publica>
#endif
		  Flag_tela = 0;
 8006522:	4b76      	ldr	r3, [pc, #472]	; (80066fc <main+0x304>)
 8006524:	2200      	movs	r2, #0
 8006526:	701a      	strb	r2, [r3, #0]

		  if(Flag_B_1||Flag_C1_1)
 8006528:	4b75      	ldr	r3, [pc, #468]	; (8006700 <main+0x308>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d103      	bne.n	8006538 <main+0x140>
 8006530:	4b74      	ldr	r3, [pc, #464]	; (8006704 <main+0x30c>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d049      	beq.n	80065cc <main+0x1d4>
		  {

			  //BRANCO
				// Liga o led branco
				// PWM do led vermelho
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8006538:	2100      	movs	r1, #0
 800653a:	4860      	ldr	r0, [pc, #384]	; (80066bc <main+0x2c4>)
 800653c:	f005 fa16 	bl	800b96c <HAL_TIM_PWM_Start>
				TIM3->CCR1 = (TIM3->ARR)*0.6;
 8006540:	4b71      	ldr	r3, [pc, #452]	; (8006708 <main+0x310>)
 8006542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006544:	4618      	mov	r0, r3
 8006546:	f7f9 ff4d 	bl	80003e4 <__aeabi_ui2d>
 800654a:	a353      	add	r3, pc, #332	; (adr r3, 8006698 <main+0x2a0>)
 800654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006550:	f7f9 ffc2 	bl	80004d8 <__aeabi_dmul>
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	4c6b      	ldr	r4, [pc, #428]	; (8006708 <main+0x310>)
 800655a:	4610      	mov	r0, r2
 800655c:	4619      	mov	r1, r3
 800655e:	f7fa fa93 	bl	8000a88 <__aeabi_d2uiz>
 8006562:	4603      	mov	r3, r0
 8006564:	6363      	str	r3, [r4, #52]	; 0x34
				// PWM do led verde
				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8006566:	210c      	movs	r1, #12
 8006568:	4868      	ldr	r0, [pc, #416]	; (800670c <main+0x314>)
 800656a:	f005 f9ff 	bl	800b96c <HAL_TIM_PWM_Start>
				TIM2->CCR4 = (TIM2->ARR)*0.7;
 800656e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	4618      	mov	r0, r3
 8006576:	f7f9 ff35 	bl	80003e4 <__aeabi_ui2d>
 800657a:	a349      	add	r3, pc, #292	; (adr r3, 80066a0 <main+0x2a8>)
 800657c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006580:	f7f9 ffaa 	bl	80004d8 <__aeabi_dmul>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800658c:	4610      	mov	r0, r2
 800658e:	4619      	mov	r1, r3
 8006590:	f7fa fa7a 	bl	8000a88 <__aeabi_d2uiz>
 8006594:	4603      	mov	r3, r0
 8006596:	6423      	str	r3, [r4, #64]	; 0x40
				// PWM do led azul
				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8006598:	2108      	movs	r1, #8
 800659a:	485c      	ldr	r0, [pc, #368]	; (800670c <main+0x314>)
 800659c:	f005 f9e6 	bl	800b96c <HAL_TIM_PWM_Start>
				TIM2->CCR3 = (TIM2->ARR)*1;
 80065a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80065a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065aa:	63d3      	str	r3, [r2, #60]	; 0x3c


		      Flag_B_1 = 0;
 80065ac:	4b54      	ldr	r3, [pc, #336]	; (8006700 <main+0x308>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	701a      	strb	r2, [r3, #0]
		      Flag_C1_1 = 0;
 80065b2:	4b54      	ldr	r3, [pc, #336]	; (8006704 <main+0x30c>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	701a      	strb	r2, [r3, #0]
		      Flag_Led_Branco_ligado = 1;
 80065b8:	4b55      	ldr	r3, [pc, #340]	; (8006710 <main+0x318>)
 80065ba:	2201      	movs	r2, #1
 80065bc:	701a      	strb	r2, [r3, #0]
		      Flag_Led_Verde_ligado = 0;
 80065be:	4b55      	ldr	r3, [pc, #340]	; (8006714 <main+0x31c>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	701a      	strb	r2, [r3, #0]
			  Flag_Led_Vermelhor_ligado = 0;
 80065c4:	4b54      	ldr	r3, [pc, #336]	; (8006718 <main+0x320>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	e0f1      	b.n	80067b0 <main+0x3b8>
		  }
		  else if(Flag_C2_1)
 80065cc:	4b53      	ldr	r3, [pc, #332]	; (800671c <main+0x324>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d036      	beq.n	8006642 <main+0x24a>
		  {
			  if(Flag_Sobrecorrente)
 80065d4:	4b52      	ldr	r3, [pc, #328]	; (8006720 <main+0x328>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00c      	beq.n	80065f6 <main+0x1fe>
			  {
				  //HAL_GPIO_WritePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin, 1);
				  //HAL_GPIO_WritePin(LED_VERMELHO_GPIO_Port, LED_VERMELHO_Pin, 1);
				  Flag_C2_1 = 0;
 80065dc:	4b4f      	ldr	r3, [pc, #316]	; (800671c <main+0x324>)
 80065de:	2200      	movs	r2, #0
 80065e0:	701a      	strb	r2, [r3, #0]
				  Flag_Led_Branco_ligado = 0;
 80065e2:	4b4b      	ldr	r3, [pc, #300]	; (8006710 <main+0x318>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	701a      	strb	r2, [r3, #0]
				  Flag_Led_Verde_ligado = 1;
 80065e8:	4b4a      	ldr	r3, [pc, #296]	; (8006714 <main+0x31c>)
 80065ea:	2201      	movs	r2, #1
 80065ec:	701a      	strb	r2, [r3, #0]
				  Flag_Led_Vermelhor_ligado = 1;
 80065ee:	4b4a      	ldr	r3, [pc, #296]	; (8006718 <main+0x320>)
 80065f0:	2201      	movs	r2, #1
 80065f2:	701a      	strb	r2, [r3, #0]
 80065f4:	e742      	b.n	800647c <main+0x84>
			  }
			  else
			  {
				  // PWM do led vermelho
				  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80065f6:	2100      	movs	r1, #0
 80065f8:	4830      	ldr	r0, [pc, #192]	; (80066bc <main+0x2c4>)
 80065fa:	f005 f9b7 	bl	800b96c <HAL_TIM_PWM_Start>
				  TIM3->CCR1 = 0;
 80065fe:	4b42      	ldr	r3, [pc, #264]	; (8006708 <main+0x310>)
 8006600:	2200      	movs	r2, #0
 8006602:	635a      	str	r2, [r3, #52]	; 0x34
				  // PWM do led azul
				  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8006604:	2108      	movs	r1, #8
 8006606:	4841      	ldr	r0, [pc, #260]	; (800670c <main+0x314>)
 8006608:	f005 f9b0 	bl	800b96c <HAL_TIM_PWM_Start>
				  TIM2->CCR3 = 0;
 800660c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006610:	2200      	movs	r2, #0
 8006612:	63da      	str	r2, [r3, #60]	; 0x3c
				  // PWM do led verde
				  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8006614:	210c      	movs	r1, #12
 8006616:	483d      	ldr	r0, [pc, #244]	; (800670c <main+0x314>)
 8006618:	f005 f9a8 	bl	800b96c <HAL_TIM_PWM_Start>
				  TIM2->CCR4 = (TIM2->ARR);
 800661c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006620:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006626:	6413      	str	r3, [r2, #64]	; 0x40

				  Flag_C2_1 = 0;
 8006628:	4b3c      	ldr	r3, [pc, #240]	; (800671c <main+0x324>)
 800662a:	2200      	movs	r2, #0
 800662c:	701a      	strb	r2, [r3, #0]
				  Flag_Led_Branco_ligado = 0;
 800662e:	4b38      	ldr	r3, [pc, #224]	; (8006710 <main+0x318>)
 8006630:	2200      	movs	r2, #0
 8006632:	701a      	strb	r2, [r3, #0]
				  Flag_Led_Verde_ligado = 1;
 8006634:	4b37      	ldr	r3, [pc, #220]	; (8006714 <main+0x31c>)
 8006636:	2201      	movs	r2, #1
 8006638:	701a      	strb	r2, [r3, #0]
				  Flag_Led_Vermelhor_ligado = 0;
 800663a:	4b37      	ldr	r3, [pc, #220]	; (8006718 <main+0x320>)
 800663c:	2200      	movs	r2, #0
 800663e:	701a      	strb	r2, [r3, #0]
 8006640:	e71c      	b.n	800647c <main+0x84>
			  }

		  }
		  else if(Flag_Erro_1)
 8006642:	4b38      	ldr	r3, [pc, #224]	; (8006724 <main+0x32c>)
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d06e      	beq.n	8006728 <main+0x330>
		  {
				// PWM do led vermelho
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800664a:	2100      	movs	r1, #0
 800664c:	481b      	ldr	r0, [pc, #108]	; (80066bc <main+0x2c4>)
 800664e:	f005 f98d 	bl	800b96c <HAL_TIM_PWM_Start>
				TIM3->CCR1 = (TIM3->ARR);
 8006652:	4b2d      	ldr	r3, [pc, #180]	; (8006708 <main+0x310>)
 8006654:	4a2c      	ldr	r2, [pc, #176]	; (8006708 <main+0x310>)
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	6353      	str	r3, [r2, #52]	; 0x34
				// PWM do led azul
				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800665a:	2108      	movs	r1, #8
 800665c:	482b      	ldr	r0, [pc, #172]	; (800670c <main+0x314>)
 800665e:	f005 f985 	bl	800b96c <HAL_TIM_PWM_Start>
				TIM2->CCR3 = 0;
 8006662:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006666:	2200      	movs	r2, #0
 8006668:	63da      	str	r2, [r3, #60]	; 0x3c
				// PWM do led verde
				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800666a:	210c      	movs	r1, #12
 800666c:	4827      	ldr	r0, [pc, #156]	; (800670c <main+0x314>)
 800666e:	f005 f97d 	bl	800b96c <HAL_TIM_PWM_Start>
				TIM2->CCR4 = 0;
 8006672:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006676:	2200      	movs	r2, #0
 8006678:	641a      	str	r2, [r3, #64]	; 0x40

		      Flag_Erro_1 = 0;
 800667a:	4b2a      	ldr	r3, [pc, #168]	; (8006724 <main+0x32c>)
 800667c:	2200      	movs	r2, #0
 800667e:	701a      	strb	r2, [r3, #0]
		      Flag_Led_Branco_ligado = 0;
 8006680:	4b23      	ldr	r3, [pc, #140]	; (8006710 <main+0x318>)
 8006682:	2200      	movs	r2, #0
 8006684:	701a      	strb	r2, [r3, #0]
		      Flag_Led_Verde_ligado = 0;
 8006686:	4b23      	ldr	r3, [pc, #140]	; (8006714 <main+0x31c>)
 8006688:	2200      	movs	r2, #0
 800668a:	701a      	strb	r2, [r3, #0]
		      Flag_Led_Vermelhor_ligado = 1;
 800668c:	4b22      	ldr	r3, [pc, #136]	; (8006718 <main+0x320>)
 800668e:	2201      	movs	r2, #1
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	e6f3      	b.n	800647c <main+0x84>
 8006694:	f3af 8000 	nop.w
 8006698:	33333333 	.word	0x33333333
 800669c:	3fe33333 	.word	0x3fe33333
 80066a0:	66666666 	.word	0x66666666
 80066a4:	3fe66666 	.word	0x3fe66666
 80066a8:	200005d8 	.word	0x200005d8
 80066ac:	20000540 	.word	0x20000540
 80066b0:	200002d4 	.word	0x200002d4
 80066b4:	20000030 	.word	0x20000030
 80066b8:	20000420 	.word	0x20000420
 80066bc:	200004b0 	.word	0x200004b0
 80066c0:	200004f8 	.word	0x200004f8
 80066c4:	200005a4 	.word	0x200005a4
 80066c8:	0801fc00 	.word	0x0801fc00
 80066cc:	200005d0 	.word	0x200005d0
 80066d0:	200007d9 	.word	0x200007d9
 80066d4:	20000000 	.word	0x20000000
 80066d8:	2000059c 	.word	0x2000059c
 80066dc:	2000058c 	.word	0x2000058c
 80066e0:	20000590 	.word	0x20000590
 80066e4:	200005b0 	.word	0x200005b0
 80066e8:	200005d4 	.word	0x200005d4
 80066ec:	200005b4 	.word	0x200005b4
 80066f0:	200005b8 	.word	0x200005b8
 80066f4:	20000370 	.word	0x20000370
 80066f8:	200005ce 	.word	0x200005ce
 80066fc:	20000588 	.word	0x20000588
 8006700:	200005c0 	.word	0x200005c0
 8006704:	200005c2 	.word	0x200005c2
 8006708:	40000400 	.word	0x40000400
 800670c:	20000468 	.word	0x20000468
 8006710:	200005ca 	.word	0x200005ca
 8006714:	200005cb 	.word	0x200005cb
 8006718:	200005cc 	.word	0x200005cc
 800671c:	200005c4 	.word	0x200005c4
 8006720:	200005cd 	.word	0x200005cd
 8006724:	200005c8 	.word	0x200005c8
		  }

		  else if(Flag_B_0|Flag_C1_0|Flag_C2_0|Flag_Erro_0|Flag_F_0)
 8006728:	4b22      	ldr	r3, [pc, #136]	; (80067b4 <main+0x3bc>)
 800672a:	781a      	ldrb	r2, [r3, #0]
 800672c:	4b22      	ldr	r3, [pc, #136]	; (80067b8 <main+0x3c0>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	4313      	orrs	r3, r2
 8006732:	b2da      	uxtb	r2, r3
 8006734:	4b21      	ldr	r3, [pc, #132]	; (80067bc <main+0x3c4>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	4313      	orrs	r3, r2
 800673a:	b2da      	uxtb	r2, r3
 800673c:	4b20      	ldr	r3, [pc, #128]	; (80067c0 <main+0x3c8>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	4313      	orrs	r3, r2
 8006742:	b2da      	uxtb	r2, r3
 8006744:	4b1f      	ldr	r3, [pc, #124]	; (80067c4 <main+0x3cc>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	4313      	orrs	r3, r2
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	f43f ae95 	beq.w	800647c <main+0x84>
		  {
				// PWM do led vermelho
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8006752:	2100      	movs	r1, #0
 8006754:	481c      	ldr	r0, [pc, #112]	; (80067c8 <main+0x3d0>)
 8006756:	f005 f909 	bl	800b96c <HAL_TIM_PWM_Start>
				TIM3->CCR1 = 0;
 800675a:	4b1c      	ldr	r3, [pc, #112]	; (80067cc <main+0x3d4>)
 800675c:	2200      	movs	r2, #0
 800675e:	635a      	str	r2, [r3, #52]	; 0x34
				// PWM do led azul
				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8006760:	2108      	movs	r1, #8
 8006762:	481b      	ldr	r0, [pc, #108]	; (80067d0 <main+0x3d8>)
 8006764:	f005 f902 	bl	800b96c <HAL_TIM_PWM_Start>
				TIM2->CCR3 = 0;
 8006768:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800676c:	2200      	movs	r2, #0
 800676e:	63da      	str	r2, [r3, #60]	; 0x3c
				// PWM do led verde
				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8006770:	210c      	movs	r1, #12
 8006772:	4817      	ldr	r0, [pc, #92]	; (80067d0 <main+0x3d8>)
 8006774:	f005 f8fa 	bl	800b96c <HAL_TIM_PWM_Start>
				TIM2->CCR4 = 0;
 8006778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800677c:	2200      	movs	r2, #0
 800677e:	641a      	str	r2, [r3, #64]	; 0x40

		      Flag_B_0=0;
 8006780:	4b0c      	ldr	r3, [pc, #48]	; (80067b4 <main+0x3bc>)
 8006782:	2200      	movs	r2, #0
 8006784:	701a      	strb	r2, [r3, #0]
		      Flag_C1_0=0;
 8006786:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <main+0x3c0>)
 8006788:	2200      	movs	r2, #0
 800678a:	701a      	strb	r2, [r3, #0]
		      Flag_C2_0=0;
 800678c:	4b0b      	ldr	r3, [pc, #44]	; (80067bc <main+0x3c4>)
 800678e:	2200      	movs	r2, #0
 8006790:	701a      	strb	r2, [r3, #0]
		      Flag_F_0=0;
 8006792:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <main+0x3cc>)
 8006794:	2200      	movs	r2, #0
 8006796:	701a      	strb	r2, [r3, #0]
		      Flag_Erro_0=0;
 8006798:	4b09      	ldr	r3, [pc, #36]	; (80067c0 <main+0x3c8>)
 800679a:	2200      	movs	r2, #0
 800679c:	701a      	strb	r2, [r3, #0]
		      Flag_Led_Branco_ligado = 0;
 800679e:	4b0d      	ldr	r3, [pc, #52]	; (80067d4 <main+0x3dc>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	701a      	strb	r2, [r3, #0]
		      Flag_Led_Verde_ligado = 0;
 80067a4:	4b0c      	ldr	r3, [pc, #48]	; (80067d8 <main+0x3e0>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	701a      	strb	r2, [r3, #0]
		      Flag_Led_Vermelhor_ligado = 0;
 80067aa:	4b0c      	ldr	r3, [pc, #48]	; (80067dc <main+0x3e4>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	701a      	strb	r2, [r3, #0]
	  if(Flag_temp_70){
 80067b0:	e664      	b.n	800647c <main+0x84>
 80067b2:	bf00      	nop
 80067b4:	200005c1 	.word	0x200005c1
 80067b8:	200005c3 	.word	0x200005c3
 80067bc:	200005c5 	.word	0x200005c5
 80067c0:	200005c9 	.word	0x200005c9
 80067c4:	200005c7 	.word	0x200005c7
 80067c8:	200004b0 	.word	0x200004b0
 80067cc:	40000400 	.word	0x40000400
 80067d0:	20000468 	.word	0x20000468
 80067d4:	200005ca 	.word	0x200005ca
 80067d8:	200005cb 	.word	0x200005cb
 80067dc:	200005cc 	.word	0x200005cc

080067e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b094      	sub	sp, #80	; 0x50
 80067e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80067e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067ea:	2228      	movs	r2, #40	; 0x28
 80067ec:	2100      	movs	r1, #0
 80067ee:	4618      	mov	r0, r3
 80067f0:	f006 fe44 	bl	800d47c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80067f4:	f107 0314 	add.w	r3, r7, #20
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	605a      	str	r2, [r3, #4]
 80067fe:	609a      	str	r2, [r3, #8]
 8006800:	60da      	str	r2, [r3, #12]
 8006802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006804:	1d3b      	adds	r3, r7, #4
 8006806:	2200      	movs	r2, #0
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	605a      	str	r2, [r3, #4]
 800680c:	609a      	str	r2, [r3, #8]
 800680e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8006810:	230d      	movs	r3, #13
 8006812:	62bb      	str	r3, [r7, #40]	; 0x28
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006818:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800681a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800681e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006820:	2301      	movs	r3, #1
 8006822:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006824:	2301      	movs	r3, #1
 8006826:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006828:	2301      	movs	r3, #1
 800682a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800682c:	2302      	movs	r3, #2
 800682e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006834:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006836:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800683a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800683c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006840:	4618      	mov	r0, r3
 8006842:	f003 fb05 	bl	8009e50 <HAL_RCC_OscConfig>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800684c:	f000 fd72 	bl	8007334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006850:	230f      	movs	r3, #15
 8006852:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006854:	2302      	movs	r3, #2
 8006856:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006858:	2300      	movs	r3, #0
 800685a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800685c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006860:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006862:	2300      	movs	r3, #0
 8006864:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006866:	f107 0314 	add.w	r3, r7, #20
 800686a:	2102      	movs	r1, #2
 800686c:	4618      	mov	r0, r3
 800686e:	f003 fd71 	bl	800a354 <HAL_RCC_ClockConfig>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8006878:	f000 fd5c 	bl	8007334 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800687c:	2303      	movs	r3, #3
 800687e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006880:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006884:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8006886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800688a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800688c:	1d3b      	adds	r3, r7, #4
 800688e:	4618      	mov	r0, r3
 8006890:	f003 fef0 	bl	800a674 <HAL_RCCEx_PeriphCLKConfig>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800689a:	f000 fd4b 	bl	8007334 <Error_Handler>
  }
}
 800689e:	bf00      	nop
 80068a0:	3750      	adds	r7, #80	; 0x50
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
	...

080068a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
	hadc1.Instance = ADC1;
 80068ac:	4b10      	ldr	r3, [pc, #64]	; (80068f0 <MX_ADC1_Init+0x48>)
 80068ae:	4a11      	ldr	r2, [pc, #68]	; (80068f4 <MX_ADC1_Init+0x4c>)
 80068b0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80068b2:	4b0f      	ldr	r3, [pc, #60]	; (80068f0 <MX_ADC1_Init+0x48>)
 80068b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068b8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80068ba:	4b0d      	ldr	r3, [pc, #52]	; (80068f0 <MX_ADC1_Init+0x48>)
 80068bc:	2201      	movs	r2, #1
 80068be:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80068c0:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <MX_ADC1_Init+0x48>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80068c6:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <MX_ADC1_Init+0x48>)
 80068c8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80068cc:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80068ce:	4b08      	ldr	r3, [pc, #32]	; (80068f0 <MX_ADC1_Init+0x48>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80068d4:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <MX_ADC1_Init+0x48>)
 80068d6:	2201      	movs	r2, #1
 80068d8:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80068da:	4805      	ldr	r0, [pc, #20]	; (80068f0 <MX_ADC1_Init+0x48>)
 80068dc:	f001 fdea 	bl	80084b4 <HAL_ADC_Init>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <MX_ADC1_Init+0x42>
	{
	  Error_Handler();
 80068e6:	f000 fd25 	bl	8007334 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
#endif
  /* USER CODE END ADC1_Init 2 */

}
 80068ea:	bf00      	nop
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20000310 	.word	0x20000310
 80068f4:	40012400 	.word	0x40012400

080068f8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */
	  hadc2.Instance = ADC2;
 80068fc:	4b10      	ldr	r3, [pc, #64]	; (8006940 <MX_ADC2_Init+0x48>)
 80068fe:	4a11      	ldr	r2, [pc, #68]	; (8006944 <MX_ADC2_Init+0x4c>)
 8006900:	601a      	str	r2, [r3, #0]
	  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8006902:	4b0f      	ldr	r3, [pc, #60]	; (8006940 <MX_ADC2_Init+0x48>)
 8006904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006908:	609a      	str	r2, [r3, #8]
	  hadc2.Init.ContinuousConvMode = ENABLE;
 800690a:	4b0d      	ldr	r3, [pc, #52]	; (8006940 <MX_ADC2_Init+0x48>)
 800690c:	2201      	movs	r2, #1
 800690e:	731a      	strb	r2, [r3, #12]
	  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006910:	4b0b      	ldr	r3, [pc, #44]	; (8006940 <MX_ADC2_Init+0x48>)
 8006912:	2200      	movs	r2, #0
 8006914:	751a      	strb	r2, [r3, #20]
	  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006916:	4b0a      	ldr	r3, [pc, #40]	; (8006940 <MX_ADC2_Init+0x48>)
 8006918:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800691c:	61da      	str	r2, [r3, #28]
	  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800691e:	4b08      	ldr	r3, [pc, #32]	; (8006940 <MX_ADC2_Init+0x48>)
 8006920:	2200      	movs	r2, #0
 8006922:	605a      	str	r2, [r3, #4]
	  hadc2.Init.NbrOfConversion = 1;
 8006924:	4b06      	ldr	r3, [pc, #24]	; (8006940 <MX_ADC2_Init+0x48>)
 8006926:	2201      	movs	r2, #1
 8006928:	611a      	str	r2, [r3, #16]
	  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800692a:	4805      	ldr	r0, [pc, #20]	; (8006940 <MX_ADC2_Init+0x48>)
 800692c:	f001 fdc2 	bl	80084b4 <HAL_ADC_Init>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <MX_ADC2_Init+0x42>
	  {
	    Error_Handler();
 8006936:	f000 fcfd 	bl	8007334 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
#endif
  /* USER CODE END ADC2_Init 2 */

}
 800693a:	bf00      	nop
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	20000340 	.word	0x20000340
 8006944:	40012800 	.word	0x40012800

08006948 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800694c:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <MX_RTC_Init+0x30>)
 800694e:	4a0b      	ldr	r2, [pc, #44]	; (800697c <MX_RTC_Init+0x34>)
 8006950:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8006952:	4b09      	ldr	r3, [pc, #36]	; (8006978 <MX_RTC_Init+0x30>)
 8006954:	f04f 32ff 	mov.w	r2, #4294967295
 8006958:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800695a:	4b07      	ldr	r3, [pc, #28]	; (8006978 <MX_RTC_Init+0x30>)
 800695c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006960:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006962:	4805      	ldr	r0, [pc, #20]	; (8006978 <MX_RTC_Init+0x30>)
 8006964:	f003 fff2 	bl	800a94c <HAL_RTC_Init>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 800696e:	f000 fce1 	bl	8007334 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
#endif
  /* USER CODE END RTC_Init 2 */

}
 8006972:	bf00      	nop
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20000370 	.word	0x20000370
 800697c:	40002800 	.word	0x40002800

08006980 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006984:	4b17      	ldr	r3, [pc, #92]	; (80069e4 <MX_SPI2_Init+0x64>)
 8006986:	4a18      	ldr	r2, [pc, #96]	; (80069e8 <MX_SPI2_Init+0x68>)
 8006988:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800698a:	4b16      	ldr	r3, [pc, #88]	; (80069e4 <MX_SPI2_Init+0x64>)
 800698c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006990:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006992:	4b14      	ldr	r3, [pc, #80]	; (80069e4 <MX_SPI2_Init+0x64>)
 8006994:	2200      	movs	r2, #0
 8006996:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006998:	4b12      	ldr	r3, [pc, #72]	; (80069e4 <MX_SPI2_Init+0x64>)
 800699a:	2200      	movs	r2, #0
 800699c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800699e:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <MX_SPI2_Init+0x64>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80069a4:	4b0f      	ldr	r3, [pc, #60]	; (80069e4 <MX_SPI2_Init+0x64>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80069aa:	4b0e      	ldr	r3, [pc, #56]	; (80069e4 <MX_SPI2_Init+0x64>)
 80069ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069b2:	4b0c      	ldr	r3, [pc, #48]	; (80069e4 <MX_SPI2_Init+0x64>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80069b8:	4b0a      	ldr	r3, [pc, #40]	; (80069e4 <MX_SPI2_Init+0x64>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80069be:	4b09      	ldr	r3, [pc, #36]	; (80069e4 <MX_SPI2_Init+0x64>)
 80069c0:	2200      	movs	r2, #0
 80069c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069c4:	4b07      	ldr	r3, [pc, #28]	; (80069e4 <MX_SPI2_Init+0x64>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80069ca:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <MX_SPI2_Init+0x64>)
 80069cc:	220a      	movs	r2, #10
 80069ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80069d0:	4804      	ldr	r0, [pc, #16]	; (80069e4 <MX_SPI2_Init+0x64>)
 80069d2:	f004 fc59 	bl	800b288 <HAL_SPI_Init>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80069dc:	f000 fcaa 	bl	8007334 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80069e0:	bf00      	nop
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	20000384 	.word	0x20000384
 80069e8:	40003800 	.word	0x40003800

080069ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b092      	sub	sp, #72	; 0x48
 80069f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80069f6:	2200      	movs	r2, #0
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80069fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a00:	2200      	movs	r2, #0
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	605a      	str	r2, [r3, #4]
 8006a06:	609a      	str	r2, [r3, #8]
 8006a08:	60da      	str	r2, [r3, #12]
 8006a0a:	611a      	str	r2, [r3, #16]
 8006a0c:	615a      	str	r2, [r3, #20]
 8006a0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006a10:	1d3b      	adds	r3, r7, #4
 8006a12:	2220      	movs	r2, #32
 8006a14:	2100      	movs	r1, #0
 8006a16:	4618      	mov	r0, r3
 8006a18:	f006 fd30 	bl	800d47c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006a1c:	4b32      	ldr	r3, [pc, #200]	; (8006ae8 <MX_TIM1_Init+0xfc>)
 8006a1e:	4a33      	ldr	r2, [pc, #204]	; (8006aec <MX_TIM1_Init+0x100>)
 8006a20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7200-1;
 8006a22:	4b31      	ldr	r3, [pc, #196]	; (8006ae8 <MX_TIM1_Init+0xfc>)
 8006a24:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8006a28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a2a:	4b2f      	ldr	r3, [pc, #188]	; (8006ae8 <MX_TIM1_Init+0xfc>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 8006a30:	4b2d      	ldr	r3, [pc, #180]	; (8006ae8 <MX_TIM1_Init+0xfc>)
 8006a32:	2209      	movs	r2, #9
 8006a34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a36:	4b2c      	ldr	r3, [pc, #176]	; (8006ae8 <MX_TIM1_Init+0xfc>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006a3c:	4b2a      	ldr	r3, [pc, #168]	; (8006ae8 <MX_TIM1_Init+0xfc>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a42:	4b29      	ldr	r3, [pc, #164]	; (8006ae8 <MX_TIM1_Init+0xfc>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006a48:	4827      	ldr	r0, [pc, #156]	; (8006ae8 <MX_TIM1_Init+0xfc>)
 8006a4a:	f004 ff3f 	bl	800b8cc <HAL_TIM_PWM_Init>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8006a54:	f000 fc6e 	bl	8007334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006a60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006a64:	4619      	mov	r1, r3
 8006a66:	4820      	ldr	r0, [pc, #128]	; (8006ae8 <MX_TIM1_Init+0xfc>)
 8006a68:	f005 fd6e 	bl	800c548 <HAL_TIMEx_MasterConfigSynchronization>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8006a72:	f000 fc5f 	bl	8007334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006a76:	2360      	movs	r3, #96	; 0x60
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006a82:	2300      	movs	r3, #0
 8006a84:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006a86:	2300      	movs	r3, #0
 8006a88:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a92:	220c      	movs	r2, #12
 8006a94:	4619      	mov	r1, r3
 8006a96:	4814      	ldr	r0, [pc, #80]	; (8006ae8 <MX_TIM1_Init+0xfc>)
 8006a98:	f005 fa62 	bl	800bf60 <HAL_TIM_PWM_ConfigChannel>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8006aa2:	f000 fc47 	bl	8007334 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006aba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006abe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006ac4:	1d3b      	adds	r3, r7, #4
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4807      	ldr	r0, [pc, #28]	; (8006ae8 <MX_TIM1_Init+0xfc>)
 8006aca:	f005 fd9b 	bl	800c604 <HAL_TIMEx_ConfigBreakDeadTime>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8006ad4:	f000 fc2e 	bl	8007334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006ad8:	4803      	ldr	r0, [pc, #12]	; (8006ae8 <MX_TIM1_Init+0xfc>)
 8006ada:	f001 fa09 	bl	8007ef0 <HAL_TIM_MspPostInit>

}
 8006ade:	bf00      	nop
 8006ae0:	3748      	adds	r7, #72	; 0x48
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	20000420 	.word	0x20000420
 8006aec:	40012c00 	.word	0x40012c00

08006af0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b08a      	sub	sp, #40	; 0x28
 8006af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006af6:	f107 0320 	add.w	r3, r7, #32
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006b00:	1d3b      	adds	r3, r7, #4
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	605a      	str	r2, [r3, #4]
 8006b08:	609a      	str	r2, [r3, #8]
 8006b0a:	60da      	str	r2, [r3, #12]
 8006b0c:	611a      	str	r2, [r3, #16]
 8006b0e:	615a      	str	r2, [r3, #20]
 8006b10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006b12:	4b2d      	ldr	r3, [pc, #180]	; (8006bc8 <MX_TIM2_Init+0xd8>)
 8006b14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006b18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8006b1a:	4b2b      	ldr	r3, [pc, #172]	; (8006bc8 <MX_TIM2_Init+0xd8>)
 8006b1c:	2247      	movs	r2, #71	; 0x47
 8006b1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b20:	4b29      	ldr	r3, [pc, #164]	; (8006bc8 <MX_TIM2_Init+0xd8>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8006b26:	4b28      	ldr	r3, [pc, #160]	; (8006bc8 <MX_TIM2_Init+0xd8>)
 8006b28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006b2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b2e:	4b26      	ldr	r3, [pc, #152]	; (8006bc8 <MX_TIM2_Init+0xd8>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b34:	4b24      	ldr	r3, [pc, #144]	; (8006bc8 <MX_TIM2_Init+0xd8>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006b3a:	4823      	ldr	r0, [pc, #140]	; (8006bc8 <MX_TIM2_Init+0xd8>)
 8006b3c:	f004 fec6 	bl	800b8cc <HAL_TIM_PWM_Init>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8006b46:	f000 fbf5 	bl	8007334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006b52:	f107 0320 	add.w	r3, r7, #32
 8006b56:	4619      	mov	r1, r3
 8006b58:	481b      	ldr	r0, [pc, #108]	; (8006bc8 <MX_TIM2_Init+0xd8>)
 8006b5a:	f005 fcf5 	bl	800c548 <HAL_TIMEx_MasterConfigSynchronization>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8006b64:	f000 fbe6 	bl	8007334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006b68:	2360      	movs	r3, #96	; 0x60
 8006b6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006b74:	2300      	movs	r3, #0
 8006b76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006b78:	1d3b      	adds	r3, r7, #4
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	4812      	ldr	r0, [pc, #72]	; (8006bc8 <MX_TIM2_Init+0xd8>)
 8006b80:	f005 f9ee 	bl	800bf60 <HAL_TIM_PWM_ConfigChannel>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8006b8a:	f000 fbd3 	bl	8007334 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006b8e:	1d3b      	adds	r3, r7, #4
 8006b90:	2208      	movs	r2, #8
 8006b92:	4619      	mov	r1, r3
 8006b94:	480c      	ldr	r0, [pc, #48]	; (8006bc8 <MX_TIM2_Init+0xd8>)
 8006b96:	f005 f9e3 	bl	800bf60 <HAL_TIM_PWM_ConfigChannel>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8006ba0:	f000 fbc8 	bl	8007334 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006ba4:	1d3b      	adds	r3, r7, #4
 8006ba6:	220c      	movs	r2, #12
 8006ba8:	4619      	mov	r1, r3
 8006baa:	4807      	ldr	r0, [pc, #28]	; (8006bc8 <MX_TIM2_Init+0xd8>)
 8006bac:	f005 f9d8 	bl	800bf60 <HAL_TIM_PWM_ConfigChannel>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8006bb6:	f000 fbbd 	bl	8007334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8006bba:	4803      	ldr	r0, [pc, #12]	; (8006bc8 <MX_TIM2_Init+0xd8>)
 8006bbc:	f001 f998 	bl	8007ef0 <HAL_TIM_MspPostInit>

}
 8006bc0:	bf00      	nop
 8006bc2:	3728      	adds	r7, #40	; 0x28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	20000468 	.word	0x20000468

08006bcc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08a      	sub	sp, #40	; 0x28
 8006bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006bd2:	f107 0320 	add.w	r3, r7, #32
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006bdc:	1d3b      	adds	r3, r7, #4
 8006bde:	2200      	movs	r2, #0
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	605a      	str	r2, [r3, #4]
 8006be4:	609a      	str	r2, [r3, #8]
 8006be6:	60da      	str	r2, [r3, #12]
 8006be8:	611a      	str	r2, [r3, #16]
 8006bea:	615a      	str	r2, [r3, #20]
 8006bec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006bee:	4b22      	ldr	r3, [pc, #136]	; (8006c78 <MX_TIM3_Init+0xac>)
 8006bf0:	4a22      	ldr	r2, [pc, #136]	; (8006c7c <MX_TIM3_Init+0xb0>)
 8006bf2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8006bf4:	4b20      	ldr	r3, [pc, #128]	; (8006c78 <MX_TIM3_Init+0xac>)
 8006bf6:	2247      	movs	r2, #71	; 0x47
 8006bf8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006bfa:	4b1f      	ldr	r3, [pc, #124]	; (8006c78 <MX_TIM3_Init+0xac>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16665;
 8006c00:	4b1d      	ldr	r3, [pc, #116]	; (8006c78 <MX_TIM3_Init+0xac>)
 8006c02:	f244 1219 	movw	r2, #16665	; 0x4119
 8006c06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c08:	4b1b      	ldr	r3, [pc, #108]	; (8006c78 <MX_TIM3_Init+0xac>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c0e:	4b1a      	ldr	r3, [pc, #104]	; (8006c78 <MX_TIM3_Init+0xac>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006c14:	4818      	ldr	r0, [pc, #96]	; (8006c78 <MX_TIM3_Init+0xac>)
 8006c16:	f004 fe59 	bl	800b8cc <HAL_TIM_PWM_Init>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006c20:	f000 fb88 	bl	8007334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c24:	2300      	movs	r3, #0
 8006c26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006c2c:	f107 0320 	add.w	r3, r7, #32
 8006c30:	4619      	mov	r1, r3
 8006c32:	4811      	ldr	r0, [pc, #68]	; (8006c78 <MX_TIM3_Init+0xac>)
 8006c34:	f005 fc88 	bl	800c548 <HAL_TIMEx_MasterConfigSynchronization>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006c3e:	f000 fb79 	bl	8007334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006c42:	2360      	movs	r3, #96	; 0x60
 8006c44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006c52:	1d3b      	adds	r3, r7, #4
 8006c54:	2200      	movs	r2, #0
 8006c56:	4619      	mov	r1, r3
 8006c58:	4807      	ldr	r0, [pc, #28]	; (8006c78 <MX_TIM3_Init+0xac>)
 8006c5a:	f005 f981 	bl	800bf60 <HAL_TIM_PWM_ConfigChannel>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006c64:	f000 fb66 	bl	8007334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006c68:	4803      	ldr	r0, [pc, #12]	; (8006c78 <MX_TIM3_Init+0xac>)
 8006c6a:	f001 f941 	bl	8007ef0 <HAL_TIM_MspPostInit>

}
 8006c6e:	bf00      	nop
 8006c70:	3728      	adds	r7, #40	; 0x28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	200004b0 	.word	0x200004b0
 8006c7c:	40000400 	.word	0x40000400

08006c80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08c      	sub	sp, #48	; 0x30
 8006c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006c86:	f107 030c 	add.w	r3, r7, #12
 8006c8a:	2224      	movs	r2, #36	; 0x24
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f006 fbf4 	bl	800d47c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c94:	1d3b      	adds	r3, r7, #4
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006c9c:	4b20      	ldr	r3, [pc, #128]	; (8006d20 <MX_TIM4_Init+0xa0>)
 8006c9e:	4a21      	ldr	r2, [pc, #132]	; (8006d24 <MX_TIM4_Init+0xa4>)
 8006ca0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006ca2:	4b1f      	ldr	r3, [pc, #124]	; (8006d20 <MX_TIM4_Init+0xa0>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ca8:	4b1d      	ldr	r3, [pc, #116]	; (8006d20 <MX_TIM4_Init+0xa0>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8006cae:	4b1c      	ldr	r3, [pc, #112]	; (8006d20 <MX_TIM4_Init+0xa0>)
 8006cb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006cb6:	4b1a      	ldr	r3, [pc, #104]	; (8006d20 <MX_TIM4_Init+0xa0>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006cbc:	4b18      	ldr	r3, [pc, #96]	; (8006d20 <MX_TIM4_Init+0xa0>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006ce6:	f107 030c 	add.w	r3, r7, #12
 8006cea:	4619      	mov	r1, r3
 8006cec:	480c      	ldr	r0, [pc, #48]	; (8006d20 <MX_TIM4_Init+0xa0>)
 8006cee:	f004 fedf 	bl	800bab0 <HAL_TIM_Encoder_Init>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8006cf8:	f000 fb1c 	bl	8007334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006d04:	1d3b      	adds	r3, r7, #4
 8006d06:	4619      	mov	r1, r3
 8006d08:	4805      	ldr	r0, [pc, #20]	; (8006d20 <MX_TIM4_Init+0xa0>)
 8006d0a:	f005 fc1d 	bl	800c548 <HAL_TIMEx_MasterConfigSynchronization>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8006d14:	f000 fb0e 	bl	8007334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8006d18:	bf00      	nop
 8006d1a:	3730      	adds	r7, #48	; 0x30
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	200004f8 	.word	0x200004f8
 8006d24:	40000800 	.word	0x40000800

08006d28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006d2c:	4b11      	ldr	r3, [pc, #68]	; (8006d74 <MX_USART1_UART_Init+0x4c>)
 8006d2e:	4a12      	ldr	r2, [pc, #72]	; (8006d78 <MX_USART1_UART_Init+0x50>)
 8006d30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006d32:	4b10      	ldr	r3, [pc, #64]	; (8006d74 <MX_USART1_UART_Init+0x4c>)
 8006d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006d38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006d3a:	4b0e      	ldr	r3, [pc, #56]	; (8006d74 <MX_USART1_UART_Init+0x4c>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006d40:	4b0c      	ldr	r3, [pc, #48]	; (8006d74 <MX_USART1_UART_Init+0x4c>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006d46:	4b0b      	ldr	r3, [pc, #44]	; (8006d74 <MX_USART1_UART_Init+0x4c>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006d4c:	4b09      	ldr	r3, [pc, #36]	; (8006d74 <MX_USART1_UART_Init+0x4c>)
 8006d4e:	220c      	movs	r2, #12
 8006d50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d52:	4b08      	ldr	r3, [pc, #32]	; (8006d74 <MX_USART1_UART_Init+0x4c>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d58:	4b06      	ldr	r3, [pc, #24]	; (8006d74 <MX_USART1_UART_Init+0x4c>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006d5e:	4805      	ldr	r0, [pc, #20]	; (8006d74 <MX_USART1_UART_Init+0x4c>)
 8006d60:	f005 fcb3 	bl	800c6ca <HAL_UART_Init>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006d6a:	f000 fae3 	bl	8007334 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006d6e:	bf00      	nop
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000540 	.word	0x20000540
 8006d78:	40013800 	.word	0x40013800

08006d7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006d82:	4b0c      	ldr	r3, [pc, #48]	; (8006db4 <MX_DMA_Init+0x38>)
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	4a0b      	ldr	r2, [pc, #44]	; (8006db4 <MX_DMA_Init+0x38>)
 8006d88:	f043 0301 	orr.w	r3, r3, #1
 8006d8c:	6153      	str	r3, [r2, #20]
 8006d8e:	4b09      	ldr	r3, [pc, #36]	; (8006db4 <MX_DMA_Init+0x38>)
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	607b      	str	r3, [r7, #4]
 8006d98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	200f      	movs	r0, #15
 8006da0:	f002 f991 	bl	80090c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8006da4:	200f      	movs	r0, #15
 8006da6:	f002 f9aa 	bl	80090fe <HAL_NVIC_EnableIRQ>

}
 8006daa:	bf00      	nop
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	40021000 	.word	0x40021000

08006db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b088      	sub	sp, #32
 8006dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dbe:	f107 0310 	add.w	r3, r7, #16
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	605a      	str	r2, [r3, #4]
 8006dc8:	609a      	str	r2, [r3, #8]
 8006dca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006dcc:	4b60      	ldr	r3, [pc, #384]	; (8006f50 <MX_GPIO_Init+0x198>)
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	4a5f      	ldr	r2, [pc, #380]	; (8006f50 <MX_GPIO_Init+0x198>)
 8006dd2:	f043 0310 	orr.w	r3, r3, #16
 8006dd6:	6193      	str	r3, [r2, #24]
 8006dd8:	4b5d      	ldr	r3, [pc, #372]	; (8006f50 <MX_GPIO_Init+0x198>)
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	f003 0310 	and.w	r3, r3, #16
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006de4:	4b5a      	ldr	r3, [pc, #360]	; (8006f50 <MX_GPIO_Init+0x198>)
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	4a59      	ldr	r2, [pc, #356]	; (8006f50 <MX_GPIO_Init+0x198>)
 8006dea:	f043 0320 	orr.w	r3, r3, #32
 8006dee:	6193      	str	r3, [r2, #24]
 8006df0:	4b57      	ldr	r3, [pc, #348]	; (8006f50 <MX_GPIO_Init+0x198>)
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	f003 0320 	and.w	r3, r3, #32
 8006df8:	60bb      	str	r3, [r7, #8]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dfc:	4b54      	ldr	r3, [pc, #336]	; (8006f50 <MX_GPIO_Init+0x198>)
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	4a53      	ldr	r2, [pc, #332]	; (8006f50 <MX_GPIO_Init+0x198>)
 8006e02:	f043 0304 	orr.w	r3, r3, #4
 8006e06:	6193      	str	r3, [r2, #24]
 8006e08:	4b51      	ldr	r3, [pc, #324]	; (8006f50 <MX_GPIO_Init+0x198>)
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	f003 0304 	and.w	r3, r3, #4
 8006e10:	607b      	str	r3, [r7, #4]
 8006e12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e14:	4b4e      	ldr	r3, [pc, #312]	; (8006f50 <MX_GPIO_Init+0x198>)
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	4a4d      	ldr	r2, [pc, #308]	; (8006f50 <MX_GPIO_Init+0x198>)
 8006e1a:	f043 0308 	orr.w	r3, r3, #8
 8006e1e:	6193      	str	r3, [r2, #24]
 8006e20:	4b4b      	ldr	r3, [pc, #300]	; (8006f50 <MX_GPIO_Init+0x198>)
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	f003 0308 	and.w	r3, r3, #8
 8006e28:	603b      	str	r3, [r7, #0]
 8006e2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_RST_Pin|RELE_F1_Pin, GPIO_PIN_RESET);
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f245 0108 	movw	r1, #20488	; 0x5008
 8006e32:	4848      	ldr	r0, [pc, #288]	; (8006f54 <MX_GPIO_Init+0x19c>)
 8006e34:	f002 ffc5 	bl	8009dc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IDR_TST_Pin|RELE_N_Pin|RELE_F3_Pin, GPIO_PIN_RESET);
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8006e3e:	4846      	ldr	r0, [pc, #280]	; (8006f58 <MX_GPIO_Init+0x1a0>)
 8006e40:	f002 ffbf 	bl	8009dc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8006e44:	2200      	movs	r2, #0
 8006e46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e4a:	4844      	ldr	r0, [pc, #272]	; (8006f5c <MX_GPIO_Init+0x1a4>)
 8006e4c:	f002 ffb9 	bl	8009dc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELE_F2_GPIO_Port, RELE_F2_Pin, GPIO_PIN_RESET);
 8006e50:	2200      	movs	r2, #0
 8006e52:	2104      	movs	r1, #4
 8006e54:	4842      	ldr	r0, [pc, #264]	; (8006f60 <MX_GPIO_Init+0x1a8>)
 8006e56:	f002 ffb4 	bl	8009dc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ZC1_Pin ACD_F2OUT_Pin */
  GPIO_InitStruct.Pin = ZC1_Pin|ACD_F2OUT_Pin;
 8006e5a:	f241 0301 	movw	r3, #4097	; 0x1001
 8006e5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e60:	2300      	movs	r3, #0
 8006e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e64:	2300      	movs	r3, #0
 8006e66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e68:	f107 0310 	add.w	r3, r7, #16
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	483b      	ldr	r0, [pc, #236]	; (8006f5c <MX_GPIO_Init+0x1a4>)
 8006e70:	f002 fe0c 	bl	8009a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ZC2_Pin ZC3_Pin ACD_NOUT_Pin ACD_F3OUT_Pin */
  GPIO_InitStruct.Pin = ZC2_Pin|ZC3_Pin|ACD_NOUT_Pin|ACD_F3OUT_Pin;
 8006e74:	f240 3303 	movw	r3, #771	; 0x303
 8006e78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e82:	f107 0310 	add.w	r3, r7, #16
 8006e86:	4619      	mov	r1, r3
 8006e88:	4832      	ldr	r0, [pc, #200]	; (8006f54 <MX_GPIO_Init+0x19c>)
 8006e8a:	f002 fdff 	bl	8009a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_RST_Pin RELE_F1_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|RELE_F1_Pin;
 8006e8e:	f245 0308 	movw	r3, #20488	; 0x5008
 8006e92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e94:	2301      	movs	r3, #1
 8006e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ea0:	f107 0310 	add.w	r3, r7, #16
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	482b      	ldr	r0, [pc, #172]	; (8006f54 <MX_GPIO_Init+0x19c>)
 8006ea8:	f002 fdf0 	bl	8009a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : IDR_AC_Pin IDR_DC_Pin ACD_F1OUT_Pin */
  GPIO_InitStruct.Pin = IDR_AC_Pin|IDR_DC_Pin|ACD_F1OUT_Pin;
 8006eac:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006eb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006eba:	f107 0310 	add.w	r3, r7, #16
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	4825      	ldr	r0, [pc, #148]	; (8006f58 <MX_GPIO_Init+0x1a0>)
 8006ec2:	f002 fde3 	bl	8009a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : IDR_TST_Pin RELE_N_Pin RELE_F3_Pin */
  GPIO_InitStruct.Pin = IDR_TST_Pin|RELE_N_Pin|RELE_F3_Pin;
 8006ec6:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 8006eca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ed8:	f107 0310 	add.w	r3, r7, #16
 8006edc:	4619      	mov	r1, r3
 8006ede:	481e      	ldr	r0, [pc, #120]	; (8006f58 <MX_GPIO_Init+0x1a0>)
 8006ee0:	f002 fdd4 	bl	8009a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8006ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006eea:	2301      	movs	r3, #1
 8006eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8006ef6:	f107 0310 	add.w	r3, r7, #16
 8006efa:	4619      	mov	r1, r3
 8006efc:	4817      	ldr	r0, [pc, #92]	; (8006f5c <MX_GPIO_Init+0x1a4>)
 8006efe:	f002 fdc5 	bl	8009a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : RELE_F2_Pin */
  GPIO_InitStruct.Pin = RELE_F2_Pin;
 8006f02:	2304      	movs	r3, #4
 8006f04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f06:	2301      	movs	r3, #1
 8006f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f0e:	2302      	movs	r3, #2
 8006f10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELE_F2_GPIO_Port, &GPIO_InitStruct);
 8006f12:	f107 0310 	add.w	r3, r7, #16
 8006f16:	4619      	mov	r1, r3
 8006f18:	4811      	ldr	r0, [pc, #68]	; (8006f60 <MX_GPIO_Init+0x1a8>)
 8006f1a:	f002 fdb7 	bl	8009a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006f1e:	2320      	movs	r3, #32
 8006f20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006f22:	4b10      	ldr	r3, [pc, #64]	; (8006f64 <MX_GPIO_Init+0x1ac>)
 8006f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f26:	2300      	movs	r3, #0
 8006f28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006f2a:	f107 0310 	add.w	r3, r7, #16
 8006f2e:	4619      	mov	r1, r3
 8006f30:	4808      	ldr	r0, [pc, #32]	; (8006f54 <MX_GPIO_Init+0x19c>)
 8006f32:	f002 fdab 	bl	8009a8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006f36:	2200      	movs	r2, #0
 8006f38:	2100      	movs	r1, #0
 8006f3a:	2017      	movs	r0, #23
 8006f3c:	f002 f8c3 	bl	80090c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006f40:	2017      	movs	r0, #23
 8006f42:	f002 f8dc 	bl	80090fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006f46:	bf00      	nop
 8006f48:	3720      	adds	r7, #32
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	40021000 	.word	0x40021000
 8006f54:	40010c00 	.word	0x40010c00
 8006f58:	40011000 	.word	0x40011000
 8006f5c:	40010800 	.word	0x40010800
 8006f60:	40011400 	.word	0x40011400
 8006f64:	10110000 	.word	0x10110000

08006f68 <HAL_TIM_PeriodElapsedCallback>:
	last_position_encoder = position_encoder;
}
#endif

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a44      	ldr	r2, [pc, #272]	; (8007084 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	f040 8081 	bne.w	800707c <HAL_TIM_PeriodElapsedCallback+0x114>
			timer_tela = 0;
			Flag_Atualiza_Corrente = 1;
			Flag_Corrente_Alterada = 0;
		}
#endif
		counter_timer_1s++;
 8006f7a:	4b43      	ldr	r3, [pc, #268]	; (8007088 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	4a41      	ldr	r2, [pc, #260]	; (8007088 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8006f82:	6013      	str	r3, [r2, #0]
		counter_timer_200ms++;
 8006f84:	4b41      	ldr	r3, [pc, #260]	; (800708c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	4a40      	ldr	r2, [pc, #256]	; (800708c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8006f8c:	6013      	str	r3, [r2, #0]
		if(counter_timer_200ms >= 200){
 8006f8e:	4b3f      	ldr	r3, [pc, #252]	; (800708c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2bc7      	cmp	r3, #199	; 0xc7
 8006f94:	dd05      	ble.n	8006fa2 <HAL_TIM_PeriodElapsedCallback+0x3a>
			counter_timer_200ms = 0;
 8006f96:	4b3d      	ldr	r3, [pc, #244]	; (800708c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]
			Flag_tela = 1;
 8006f9c:	4b3c      	ldr	r3, [pc, #240]	; (8007090 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	701a      	strb	r2, [r3, #0]
		}
		if(counter_timer_1s >= 1000)	//entra a cada 1s
 8006fa2:	4b39      	ldr	r3, [pc, #228]	; (8007088 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006faa:	db67      	blt.n	800707c <HAL_TIM_PeriodElapsedCallback+0x114>
				{
					Flag_Blink_0 = 1;
				}
			}
#endif
			counter_timer_1s = 0;
 8006fac:	4b36      	ldr	r3, [pc, #216]	; (8007088 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8006fae:	2200      	movs	r2, #0
 8006fb0:	601a      	str	r2, [r3, #0]
			Energy += (power/3600); //Wh
 8006fb2:	4b38      	ldr	r3, [pc, #224]	; (8007094 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4938      	ldr	r1, [pc, #224]	; (8007098 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7f9 ff97 	bl	8000eec <__aeabi_fdiv>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	4b36      	ldr	r3, [pc, #216]	; (800709c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	4610      	mov	r0, r2
 8006fca:	f7f9 fdd3 	bl	8000b74 <__addsf3>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	4b32      	ldr	r3, [pc, #200]	; (800709c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8006fd4:	601a      	str	r2, [r3, #0]
			//Flag_tela = 1;
			Flag_1_segundo = 1;
 8006fd6:	4b32      	ldr	r3, [pc, #200]	; (80070a0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8006fd8:	2201      	movs	r2, #1
 8006fda:	701a      	strb	r2, [r3, #0]
			timer_reset_display++;
 8006fdc:	4b31      	ldr	r3, [pc, #196]	; (80070a4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	4a30      	ldr	r2, [pc, #192]	; (80070a4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8006fe4:	6013      	str	r3, [r2, #0]
				{
					Flag_Clock = 1;
				}
			}
#endif
			if(estado_atual == ESTADO_BB){
 8006fe6:	4b30      	ldr	r3, [pc, #192]	; (80070a8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d10a      	bne.n	8007004 <HAL_TIM_PeriodElapsedCallback+0x9c>
				if(tela_state == 2){
					tela_state = 0;
					Flag_Atualiza_Ajuste = 1;
				}
#endif
				if(!Flag_Led_Branco_ligado){
 8006fee:	4b2f      	ldr	r3, [pc, #188]	; (80070ac <HAL_TIM_PeriodElapsedCallback+0x144>)
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d103      	bne.n	8006ffe <HAL_TIM_PeriodElapsedCallback+0x96>
					Flag_B_1 = 1;
 8006ff6:	4b2e      	ldr	r3, [pc, #184]	; (80070b0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	e002      	b.n	8007004 <HAL_TIM_PeriodElapsedCallback+0x9c>
				}
				else{
					Flag_B_0 = 1;
 8006ffe:	4b2d      	ldr	r3, [pc, #180]	; (80070b4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8007000:	2201      	movs	r2, #1
 8007002:	701a      	strb	r2, [r3, #0]
						tela_state = 0;
						Flag_Atualiza_Ajuste = 1;
					}
				}
#endif
			if(estado_atual == ESTADO_C1){
 8007004:	4b28      	ldr	r3, [pc, #160]	; (80070a8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	2b03      	cmp	r3, #3
 800700a:	d10a      	bne.n	8007022 <HAL_TIM_PeriodElapsedCallback+0xba>
				if(tela_state == 2){
					tela_state = 0;
					Flag_Atualiza_Ajuste = 1;
				}
#endif
					if(!Flag_Led_Verde_ligado){
 800700c:	4b2a      	ldr	r3, [pc, #168]	; (80070b8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d103      	bne.n	800701c <HAL_TIM_PeriodElapsedCallback+0xb4>
						Flag_C1_1 = 1;
 8007014:	4b29      	ldr	r3, [pc, #164]	; (80070bc <HAL_TIM_PeriodElapsedCallback+0x154>)
 8007016:	2201      	movs	r2, #1
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	e002      	b.n	8007022 <HAL_TIM_PeriodElapsedCallback+0xba>
					}
					else{
						Flag_C2_0 = 1;
 800701c:	4b28      	ldr	r3, [pc, #160]	; (80070c0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800701e:	2201      	movs	r2, #1
 8007020:	701a      	strb	r2, [r3, #0]
					}
			}
			if(estado_atual == ESTADO_C2){
 8007022:	4b21      	ldr	r3, [pc, #132]	; (80070a8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	2b04      	cmp	r3, #4
 8007028:	d10a      	bne.n	8007040 <HAL_TIM_PeriodElapsedCallback+0xd8>
					if(tela_state == 2){
						tela_state = 0;
						Flag_Atualiza_Ajuste = 1;
					}
#endif
					if(!Flag_Led_Verde_ligado){
 800702a:	4b23      	ldr	r3, [pc, #140]	; (80070b8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d103      	bne.n	800703a <HAL_TIM_PeriodElapsedCallback+0xd2>
						Flag_C2_1 = 1;
 8007032:	4b24      	ldr	r3, [pc, #144]	; (80070c4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8007034:	2201      	movs	r2, #1
 8007036:	701a      	strb	r2, [r3, #0]
 8007038:	e002      	b.n	8007040 <HAL_TIM_PeriodElapsedCallback+0xd8>
					}
					else{
						Flag_C2_0 = 1;
 800703a:	4b21      	ldr	r3, [pc, #132]	; (80070c0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800703c:	2201      	movs	r2, #1
 800703e:	701a      	strb	r2, [r3, #0]
					}
			}
			if(estado_atual == ESTADO_ERRO){
 8007040:	4b19      	ldr	r3, [pc, #100]	; (80070a8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b06      	cmp	r3, #6
 8007046:	d10a      	bne.n	800705e <HAL_TIM_PeriodElapsedCallback+0xf6>
					if(tela_state == 2){
						tela_state = 0;
						Flag_Atualiza_Ajuste = 1;
					}
#endif
					if(!Flag_Led_Vermelhor_ligado){
 8007048:	4b1f      	ldr	r3, [pc, #124]	; (80070c8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d103      	bne.n	8007058 <HAL_TIM_PeriodElapsedCallback+0xf0>
						Flag_Erro_1 = 1;
 8007050:	4b1e      	ldr	r3, [pc, #120]	; (80070cc <HAL_TIM_PeriodElapsedCallback+0x164>)
 8007052:	2201      	movs	r2, #1
 8007054:	701a      	strb	r2, [r3, #0]
 8007056:	e002      	b.n	800705e <HAL_TIM_PeriodElapsedCallback+0xf6>
					}
					else{
						Flag_Erro_0 = 1;
 8007058:	4b1d      	ldr	r3, [pc, #116]	; (80070d0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800705a:	2201      	movs	r2, #1
 800705c:	701a      	strb	r2, [r3, #0]
					}
			}
			if(estado_atual == ESTADO_F){
 800705e:	4b12      	ldr	r3, [pc, #72]	; (80070a8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	2b05      	cmp	r3, #5
 8007064:	d10a      	bne.n	800707c <HAL_TIM_PeriodElapsedCallback+0x114>
					if(!Flag_Led_Vermelhor_ligado){
 8007066:	4b18      	ldr	r3, [pc, #96]	; (80070c8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d103      	bne.n	8007076 <HAL_TIM_PeriodElapsedCallback+0x10e>
						Flag_F_1 = 1;
 800706e:	4b19      	ldr	r3, [pc, #100]	; (80070d4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8007070:	2201      	movs	r2, #1
 8007072:	701a      	strb	r2, [r3, #0]
						Flag_F_0 = 1;
					}
			}
		}
	}
}
 8007074:	e002      	b.n	800707c <HAL_TIM_PeriodElapsedCallback+0x114>
						Flag_F_0 = 1;
 8007076:	4b18      	ldr	r3, [pc, #96]	; (80070d8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8007078:	2201      	movs	r2, #1
 800707a:	701a      	strb	r2, [r3, #0]
}
 800707c:	bf00      	nop
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20000420 	.word	0x20000420
 8007088:	20000594 	.word	0x20000594
 800708c:	20000598 	.word	0x20000598
 8007090:	20000588 	.word	0x20000588
 8007094:	200005a0 	.word	0x200005a0
 8007098:	45610000 	.word	0x45610000
 800709c:	200005a4 	.word	0x200005a4
 80070a0:	200005ce 	.word	0x200005ce
 80070a4:	2000058c 	.word	0x2000058c
 80070a8:	200007d9 	.word	0x200007d9
 80070ac:	200005ca 	.word	0x200005ca
 80070b0:	200005c0 	.word	0x200005c0
 80070b4:	200005c1 	.word	0x200005c1
 80070b8:	200005cb 	.word	0x200005cb
 80070bc:	200005c2 	.word	0x200005c2
 80070c0:	200005c5 	.word	0x200005c5
 80070c4:	200005c4 	.word	0x200005c4
 80070c8:	200005cc 	.word	0x200005cc
 80070cc:	200005c8 	.word	0x200005c8
 80070d0:	200005c9 	.word	0x200005c9
 80070d4:	200005c6 	.word	0x200005c6
 80070d8:	200005c7 	.word	0x200005c7

080070dc <ADC_Select_CH1>:
	    Error_Handler();
	  }
}

void ADC_Select_CH1 (void)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80070e2:	1d3b      	adds	r3, r7, #4
 80070e4:	2200      	movs	r2, #0
 80070e6:	601a      	str	r2, [r3, #0]
 80070e8:	605a      	str	r2, [r3, #4]
 80070ea:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 80070ec:	2301      	movs	r3, #1
 80070ee:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80070f0:	2301      	movs	r3, #1
 80070f2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80070f4:	2300      	movs	r3, #0
 80070f6:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80070f8:	1d3b      	adds	r3, r7, #4
 80070fa:	4619      	mov	r1, r3
 80070fc:	4805      	ldr	r0, [pc, #20]	; (8007114 <ADC_Select_CH1+0x38>)
 80070fe:	f001 fd6f 	bl	8008be0 <HAL_ADC_ConfigChannel>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <ADC_Select_CH1+0x30>
	  {
	    Error_Handler();
 8007108:	f000 f914 	bl	8007334 <Error_Handler>
	  }
}
 800710c:	bf00      	nop
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	20000310 	.word	0x20000310

08007118 <ADC_Select_CH2>:

void ADC_Select_CH2 (void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800711e:	1d3b      	adds	r3, r7, #4
 8007120:	2200      	movs	r2, #0
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	605a      	str	r2, [r3, #4]
 8007126:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8007128:	2302      	movs	r3, #2
 800712a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 800712c:	2301      	movs	r3, #1
 800712e:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007130:	2300      	movs	r3, #0
 8007132:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007134:	1d3b      	adds	r3, r7, #4
 8007136:	4619      	mov	r1, r3
 8007138:	4805      	ldr	r0, [pc, #20]	; (8007150 <ADC_Select_CH2+0x38>)
 800713a:	f001 fd51 	bl	8008be0 <HAL_ADC_ConfigChannel>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d001      	beq.n	8007148 <ADC_Select_CH2+0x30>
	  {
	    Error_Handler();
 8007144:	f000 f8f6 	bl	8007334 <Error_Handler>
	  }
}
 8007148:	bf00      	nop
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	20000310 	.word	0x20000310

08007154 <ADC_Select_CH3>:

void ADC_Select_CH3 (void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800715a:	1d3b      	adds	r3, r7, #4
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	605a      	str	r2, [r3, #4]
 8007162:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 8007164:	2303      	movs	r3, #3
 8007166:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8007168:	2301      	movs	r3, #1
 800716a:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800716c:	2300      	movs	r3, #0
 800716e:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007170:	1d3b      	adds	r3, r7, #4
 8007172:	4619      	mov	r1, r3
 8007174:	4805      	ldr	r0, [pc, #20]	; (800718c <ADC_Select_CH3+0x38>)
 8007176:	f001 fd33 	bl	8008be0 <HAL_ADC_ConfigChannel>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <ADC_Select_CH3+0x30>
	  {
	    Error_Handler();
 8007180:	f000 f8d8 	bl	8007334 <Error_Handler>
	  }
}
 8007184:	bf00      	nop
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20000310 	.word	0x20000310

08007190 <ADC_Select_CH4>:

void ADC_Select_CH4 (void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8007196:	1d3b      	adds	r3, r7, #4
 8007198:	2200      	movs	r2, #0
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	605a      	str	r2, [r3, #4]
 800719e:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_4;
 80071a0:	2304      	movs	r3, #4
 80071a2:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80071a4:	2301      	movs	r3, #1
 80071a6:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80071a8:	2300      	movs	r3, #0
 80071aa:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80071ac:	1d3b      	adds	r3, r7, #4
 80071ae:	4619      	mov	r1, r3
 80071b0:	4805      	ldr	r0, [pc, #20]	; (80071c8 <ADC_Select_CH4+0x38>)
 80071b2:	f001 fd15 	bl	8008be0 <HAL_ADC_ConfigChannel>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <ADC_Select_CH4+0x30>
	  {
	    Error_Handler();
 80071bc:	f000 f8ba 	bl	8007334 <Error_Handler>
	  }
}
 80071c0:	bf00      	nop
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	20000310 	.word	0x20000310

080071cc <ADC_Select_CH7>:

void ADC_Select_CH7 (void)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80071d2:	1d3b      	adds	r3, r7, #4
 80071d4:	2200      	movs	r2, #0
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	605a      	str	r2, [r3, #4]
 80071da:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_7;
 80071dc:	2307      	movs	r3, #7
 80071de:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80071e0:	2301      	movs	r3, #1
 80071e2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80071e8:	1d3b      	adds	r3, r7, #4
 80071ea:	4619      	mov	r1, r3
 80071ec:	4805      	ldr	r0, [pc, #20]	; (8007204 <ADC_Select_CH7+0x38>)
 80071ee:	f001 fcf7 	bl	8008be0 <HAL_ADC_ConfigChannel>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d001      	beq.n	80071fc <ADC_Select_CH7+0x30>
	  {
	    Error_Handler();
 80071f8:	f000 f89c 	bl	8007334 <Error_Handler>
	  }
}
 80071fc:	bf00      	nop
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	20000310 	.word	0x20000310

08007208 <ADC_Select_CH10>:
	    Error_Handler();
	  }
}

void ADC_Select_CH10 (void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800720e:	1d3b      	adds	r3, r7, #4
 8007210:	2200      	movs	r2, #0
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	605a      	str	r2, [r3, #4]
 8007216:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_10;
 8007218:	230a      	movs	r3, #10
 800721a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 800721c:	2301      	movs	r3, #1
 800721e:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007220:	2300      	movs	r3, #0
 8007222:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007224:	1d3b      	adds	r3, r7, #4
 8007226:	4619      	mov	r1, r3
 8007228:	4805      	ldr	r0, [pc, #20]	; (8007240 <ADC_Select_CH10+0x38>)
 800722a:	f001 fcd9 	bl	8008be0 <HAL_ADC_ConfigChannel>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <ADC_Select_CH10+0x30>
	  {
	    Error_Handler();
 8007234:	f000 f87e 	bl	8007334 <Error_Handler>
	  }
}
 8007238:	bf00      	nop
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	20000310 	.word	0x20000310

08007244 <ADC_Select_CH11>:

void ADC_Select_CH11 (void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800724a:	1d3b      	adds	r3, r7, #4
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	605a      	str	r2, [r3, #4]
 8007252:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_11;
 8007254:	230b      	movs	r3, #11
 8007256:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8007258:	2301      	movs	r3, #1
 800725a:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007260:	1d3b      	adds	r3, r7, #4
 8007262:	4619      	mov	r1, r3
 8007264:	4805      	ldr	r0, [pc, #20]	; (800727c <ADC_Select_CH11+0x38>)
 8007266:	f001 fcbb 	bl	8008be0 <HAL_ADC_ConfigChannel>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d001      	beq.n	8007274 <ADC_Select_CH11+0x30>
	  {
	    Error_Handler();
 8007270:	f000 f860 	bl	8007334 <Error_Handler>
	  }
}
 8007274:	bf00      	nop
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	20000310 	.word	0x20000310

08007280 <ADC_Select_CH12>:

void ADC_Select_CH12 (void)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8007286:	1d3b      	adds	r3, r7, #4
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]
 800728c:	605a      	str	r2, [r3, #4]
 800728e:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_12;
 8007290:	230c      	movs	r3, #12
 8007292:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8007294:	2301      	movs	r3, #1
 8007296:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007298:	2300      	movs	r3, #0
 800729a:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800729c:	1d3b      	adds	r3, r7, #4
 800729e:	4619      	mov	r1, r3
 80072a0:	4805      	ldr	r0, [pc, #20]	; (80072b8 <ADC_Select_CH12+0x38>)
 80072a2:	f001 fc9d 	bl	8008be0 <HAL_ADC_ConfigChannel>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <ADC_Select_CH12+0x30>
	  {
	    Error_Handler();
 80072ac:	f000 f842 	bl	8007334 <Error_Handler>
	  }
}
 80072b0:	bf00      	nop
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	20000310 	.word	0x20000310

080072bc <ADC_Select_CH14>:
	    Error_Handler();
	  }
}

void ADC_Select_CH14 (void)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80072c2:	1d3b      	adds	r3, r7, #4
 80072c4:	2200      	movs	r2, #0
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	605a      	str	r2, [r3, #4]
 80072ca:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_14;
 80072cc:	230e      	movs	r3, #14
 80072ce:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80072d0:	2301      	movs	r3, #1
 80072d2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80072d8:	1d3b      	adds	r3, r7, #4
 80072da:	4619      	mov	r1, r3
 80072dc:	4805      	ldr	r0, [pc, #20]	; (80072f4 <ADC_Select_CH14+0x38>)
 80072de:	f001 fc7f 	bl	8008be0 <HAL_ADC_ConfigChannel>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <ADC_Select_CH14+0x30>
	  {
	    Error_Handler();
 80072e8:	f000 f824 	bl	8007334 <Error_Handler>
	  }
}
 80072ec:	bf00      	nop
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	20000310 	.word	0x20000310

080072f8 <ADC_Select_CH15>:

void ADC_Select_CH15 (void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80072fe:	1d3b      	adds	r3, r7, #4
 8007300:	2200      	movs	r2, #0
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	605a      	str	r2, [r3, #4]
 8007306:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_15;
 8007308:	230f      	movs	r3, #15
 800730a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 800730c:	2301      	movs	r3, #1
 800730e:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007310:	2300      	movs	r3, #0
 8007312:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007314:	1d3b      	adds	r3, r7, #4
 8007316:	4619      	mov	r1, r3
 8007318:	4805      	ldr	r0, [pc, #20]	; (8007330 <ADC_Select_CH15+0x38>)
 800731a:	f001 fc61 	bl	8008be0 <HAL_ADC_ConfigChannel>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <ADC_Select_CH15+0x30>
	  {
	    Error_Handler();
 8007324:	f000 f806 	bl	8007334 <Error_Handler>
	  }
}
 8007328:	bf00      	nop
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	20000310 	.word	0x20000310

08007334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007334:	b480      	push	{r7}
 8007336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007338:	b672      	cpsid	i
}
 800733a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800733c:	e7fe      	b.n	800733c <Error_Handler+0x8>
	...

08007340 <sendData>:
extern int vfase;
extern int V_fase_neutro;
extern int vneutro;

void sendData (uint8_t *data, int size)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
	// we will calculate the CRC in this function itself
	uint16_t crc = crc16(data, size);
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	b29b      	uxth	r3, r3
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fbb7 	bl	8007ac4 <crc16>
 8007356:	4603      	mov	r3, r0
 8007358:	81fb      	strh	r3, [r7, #14]
	data[size] = crc&0xFF;   // CRC LOW
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	4413      	add	r3, r2
 8007360:	89fa      	ldrh	r2, [r7, #14]
 8007362:	b2d2      	uxtb	r2, r2
 8007364:	701a      	strb	r2, [r3, #0]
	data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8007366:	89fb      	ldrh	r3, [r7, #14]
 8007368:	0a1b      	lsrs	r3, r3, #8
 800736a:	b299      	uxth	r1, r3
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	3301      	adds	r3, #1
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	4413      	add	r3, r2
 8007374:	b2ca      	uxtb	r2, r1
 8007376:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, data, size+2, 1000);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	b29b      	uxth	r3, r3
 800737c:	3302      	adds	r3, #2
 800737e:	b29a      	uxth	r2, r3
 8007380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007384:	6879      	ldr	r1, [r7, #4]
 8007386:	4803      	ldr	r0, [pc, #12]	; (8007394 <sendData+0x54>)
 8007388:	f005 f9ef 	bl	800c76a <HAL_UART_Transmit>
}
 800738c:	bf00      	nop
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	20000540 	.word	0x20000540

08007398 <modbusException>:

void modbusException (uint8_t exceptioncode)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	4603      	mov	r3, r0
 80073a0:	71fb      	strb	r3, [r7, #7]
	//| SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	//| 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	TxData[0] = RxData[0];       // slave ID
 80073a2:	4b0b      	ldr	r3, [pc, #44]	; (80073d0 <modbusException+0x38>)
 80073a4:	781a      	ldrb	r2, [r3, #0]
 80073a6:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <modbusException+0x3c>)
 80073a8:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1]|0x80;  // adding 1 to the MSB of the function code
 80073aa:	4b09      	ldr	r3, [pc, #36]	; (80073d0 <modbusException+0x38>)
 80073ac:	785b      	ldrb	r3, [r3, #1]
 80073ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	4b07      	ldr	r3, [pc, #28]	; (80073d4 <modbusException+0x3c>)
 80073b6:	705a      	strb	r2, [r3, #1]
	TxData[2] = exceptioncode;   // Load the Exception code
 80073b8:	4a06      	ldr	r2, [pc, #24]	; (80073d4 <modbusException+0x3c>)
 80073ba:	79fb      	ldrb	r3, [r7, #7]
 80073bc:	7093      	strb	r3, [r2, #2]
	sendData(TxData, 3);         // send Data... CRC will be calculated in the function
 80073be:	2103      	movs	r1, #3
 80073c0:	4804      	ldr	r0, [pc, #16]	; (80073d4 <modbusException+0x3c>)
 80073c2:	f7ff ffbd 	bl	8007340 <sendData>
}
 80073c6:	bf00      	nop
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	200005d8 	.word	0x200005d8
 80073d4:	200006d8 	.word	0x200006d8

080073d8 <readHoldingRegs>:

uint8_t readHoldingRegs (void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 80073de:	4b34      	ldr	r3, [pc, #208]	; (80074b0 <readHoldingRegs+0xd8>)
 80073e0:	789b      	ldrb	r3, [r3, #2]
 80073e2:	021b      	lsls	r3, r3, #8
 80073e4:	b21a      	sxth	r2, r3
 80073e6:	4b32      	ldr	r3, [pc, #200]	; (80074b0 <readHoldingRegs+0xd8>)
 80073e8:	78db      	ldrb	r3, [r3, #3]
 80073ea:	b21b      	sxth	r3, r3
 80073ec:	4313      	orrs	r3, r2
 80073ee:	b21b      	sxth	r3, r3
 80073f0:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 80073f2:	4b2f      	ldr	r3, [pc, #188]	; (80074b0 <readHoldingRegs+0xd8>)
 80073f4:	791b      	ldrb	r3, [r3, #4]
 80073f6:	021b      	lsls	r3, r3, #8
 80073f8:	b21a      	sxth	r2, r3
 80073fa:	4b2d      	ldr	r3, [pc, #180]	; (80074b0 <readHoldingRegs+0xd8>)
 80073fc:	795b      	ldrb	r3, [r3, #5]
 80073fe:	b21b      	sxth	r3, r3
 8007400:	4313      	orrs	r3, r2
 8007402:	b21b      	sxth	r3, r3
 8007404:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 8007406:	887b      	ldrh	r3, [r7, #2]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <readHoldingRegs+0x3a>
 800740c:	887b      	ldrh	r3, [r7, #2]
 800740e:	2b7d      	cmp	r3, #125	; 0x7d
 8007410:	d904      	bls.n	800741c <readHoldingRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8007412:	2003      	movs	r0, #3
 8007414:	f7ff ffc0 	bl	8007398 <modbusException>
		return 0;
 8007418:	2300      	movs	r3, #0
 800741a:	e044      	b.n	80074a6 <readHoldingRegs+0xce>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 800741c:	89fa      	ldrh	r2, [r7, #14]
 800741e:	887b      	ldrh	r3, [r7, #2]
 8007420:	4413      	add	r3, r2
 8007422:	b29b      	uxth	r3, r3
 8007424:	3b01      	subs	r3, #1
 8007426:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 8007428:	883b      	ldrh	r3, [r7, #0]
 800742a:	2b31      	cmp	r3, #49	; 0x31
 800742c:	d904      	bls.n	8007438 <readHoldingRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 800742e:	2002      	movs	r0, #2
 8007430:	f7ff ffb2 	bl	8007398 <modbusException>
		return 0;
 8007434:	2300      	movs	r3, #0
 8007436:	e036      	b.n	80074a6 <readHoldingRegs+0xce>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 8007438:	4b1e      	ldr	r3, [pc, #120]	; (80074b4 <readHoldingRegs+0xdc>)
 800743a:	2207      	movs	r2, #7
 800743c:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 800743e:	4b1c      	ldr	r3, [pc, #112]	; (80074b0 <readHoldingRegs+0xd8>)
 8007440:	785a      	ldrb	r2, [r3, #1]
 8007442:	4b1c      	ldr	r3, [pc, #112]	; (80074b4 <readHoldingRegs+0xdc>)
 8007444:	705a      	strb	r2, [r3, #1]
	TxData[2] = numRegs*2;  // Byte count
 8007446:	887b      	ldrh	r3, [r7, #2]
 8007448:	b2db      	uxtb	r3, r3
 800744a:	005b      	lsls	r3, r3, #1
 800744c:	b2da      	uxtb	r2, r3
 800744e:	4b19      	ldr	r3, [pc, #100]	; (80074b4 <readHoldingRegs+0xdc>)
 8007450:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8007452:	2303      	movs	r3, #3
 8007454:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8007456:	2300      	movs	r3, #0
 8007458:	607b      	str	r3, [r7, #4]
 800745a:	e01b      	b.n	8007494 <readHoldingRegs+0xbc>
	{
		TxData[indx++] = (Holding_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 800745c:	89fb      	ldrh	r3, [r7, #14]
 800745e:	4a16      	ldr	r2, [pc, #88]	; (80074b8 <readHoldingRegs+0xe0>)
 8007460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007464:	0a1b      	lsrs	r3, r3, #8
 8007466:	b299      	uxth	r1, r3
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	1c5a      	adds	r2, r3, #1
 800746c:	60ba      	str	r2, [r7, #8]
 800746e:	b2c9      	uxtb	r1, r1
 8007470:	4a10      	ldr	r2, [pc, #64]	; (80074b4 <readHoldingRegs+0xdc>)
 8007472:	54d1      	strb	r1, [r2, r3]
		TxData[indx++] = (Holding_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 8007474:	89fb      	ldrh	r3, [r7, #14]
 8007476:	4a10      	ldr	r2, [pc, #64]	; (80074b8 <readHoldingRegs+0xe0>)
 8007478:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	1c5a      	adds	r2, r3, #1
 8007480:	60ba      	str	r2, [r7, #8]
 8007482:	b2c9      	uxtb	r1, r1
 8007484:	4a0b      	ldr	r2, [pc, #44]	; (80074b4 <readHoldingRegs+0xdc>)
 8007486:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 8007488:	89fb      	ldrh	r3, [r7, #14]
 800748a:	3301      	adds	r3, #1
 800748c:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3301      	adds	r3, #1
 8007492:	607b      	str	r3, [r7, #4]
 8007494:	887b      	ldrh	r3, [r7, #2]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	429a      	cmp	r2, r3
 800749a:	dbdf      	blt.n	800745c <readHoldingRegs+0x84>
	}

	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 800749c:	68b9      	ldr	r1, [r7, #8]
 800749e:	4805      	ldr	r0, [pc, #20]	; (80074b4 <readHoldingRegs+0xdc>)
 80074a0:	f7ff ff4e 	bl	8007340 <sendData>
	return 1;   // success
 80074a4:	2301      	movs	r3, #1
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	200005d8 	.word	0x200005d8
 80074b4:	200006d8 	.word	0x200006d8
 80074b8:	200002d4 	.word	0x200002d4

080074bc <readInputRegs>:

uint8_t readInputRegs (void)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 80074c2:	4b34      	ldr	r3, [pc, #208]	; (8007594 <readInputRegs+0xd8>)
 80074c4:	789b      	ldrb	r3, [r3, #2]
 80074c6:	021b      	lsls	r3, r3, #8
 80074c8:	b21a      	sxth	r2, r3
 80074ca:	4b32      	ldr	r3, [pc, #200]	; (8007594 <readInputRegs+0xd8>)
 80074cc:	78db      	ldrb	r3, [r3, #3]
 80074ce:	b21b      	sxth	r3, r3
 80074d0:	4313      	orrs	r3, r2
 80074d2:	b21b      	sxth	r3, r3
 80074d4:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 80074d6:	4b2f      	ldr	r3, [pc, #188]	; (8007594 <readInputRegs+0xd8>)
 80074d8:	791b      	ldrb	r3, [r3, #4]
 80074da:	021b      	lsls	r3, r3, #8
 80074dc:	b21a      	sxth	r2, r3
 80074de:	4b2d      	ldr	r3, [pc, #180]	; (8007594 <readInputRegs+0xd8>)
 80074e0:	795b      	ldrb	r3, [r3, #5]
 80074e2:	b21b      	sxth	r3, r3
 80074e4:	4313      	orrs	r3, r2
 80074e6:	b21b      	sxth	r3, r3
 80074e8:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 80074ea:	887b      	ldrh	r3, [r7, #2]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d002      	beq.n	80074f6 <readInputRegs+0x3a>
 80074f0:	887b      	ldrh	r3, [r7, #2]
 80074f2:	2b7d      	cmp	r3, #125	; 0x7d
 80074f4:	d904      	bls.n	8007500 <readInputRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 80074f6:	2003      	movs	r0, #3
 80074f8:	f7ff ff4e 	bl	8007398 <modbusException>
		return 0;
 80074fc:	2300      	movs	r3, #0
 80074fe:	e044      	b.n	800758a <readInputRegs+0xce>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8007500:	89fa      	ldrh	r2, [r7, #14]
 8007502:	887b      	ldrh	r3, [r7, #2]
 8007504:	4413      	add	r3, r2
 8007506:	b29b      	uxth	r3, r3
 8007508:	3b01      	subs	r3, #1
 800750a:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 800750c:	883b      	ldrh	r3, [r7, #0]
 800750e:	2b31      	cmp	r3, #49	; 0x31
 8007510:	d904      	bls.n	800751c <readInputRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8007512:	2002      	movs	r0, #2
 8007514:	f7ff ff40 	bl	8007398 <modbusException>
		return 0;
 8007518:	2300      	movs	r3, #0
 800751a:	e036      	b.n	800758a <readInputRegs+0xce>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 800751c:	4b1e      	ldr	r3, [pc, #120]	; (8007598 <readInputRegs+0xdc>)
 800751e:	2207      	movs	r2, #7
 8007520:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 8007522:	4b1c      	ldr	r3, [pc, #112]	; (8007594 <readInputRegs+0xd8>)
 8007524:	785a      	ldrb	r2, [r3, #1]
 8007526:	4b1c      	ldr	r3, [pc, #112]	; (8007598 <readInputRegs+0xdc>)
 8007528:	705a      	strb	r2, [r3, #1]
	TxData[2] = numRegs*2;  // Byte count
 800752a:	887b      	ldrh	r3, [r7, #2]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	b2da      	uxtb	r2, r3
 8007532:	4b19      	ldr	r3, [pc, #100]	; (8007598 <readInputRegs+0xdc>)
 8007534:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8007536:	2303      	movs	r3, #3
 8007538:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 800753a:	2300      	movs	r3, #0
 800753c:	607b      	str	r3, [r7, #4]
 800753e:	e01b      	b.n	8007578 <readInputRegs+0xbc>
	{
		TxData[indx++] = (Input_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 8007540:	89fb      	ldrh	r3, [r7, #14]
 8007542:	4a16      	ldr	r2, [pc, #88]	; (800759c <readInputRegs+0xe0>)
 8007544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007548:	0a1b      	lsrs	r3, r3, #8
 800754a:	b299      	uxth	r1, r3
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	60ba      	str	r2, [r7, #8]
 8007552:	b2c9      	uxtb	r1, r1
 8007554:	4a10      	ldr	r2, [pc, #64]	; (8007598 <readInputRegs+0xdc>)
 8007556:	54d1      	strb	r1, [r2, r3]
		TxData[indx++] = (Input_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 8007558:	89fb      	ldrh	r3, [r7, #14]
 800755a:	4a10      	ldr	r2, [pc, #64]	; (800759c <readInputRegs+0xe0>)
 800755c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	60ba      	str	r2, [r7, #8]
 8007566:	b2c9      	uxtb	r1, r1
 8007568:	4a0b      	ldr	r2, [pc, #44]	; (8007598 <readInputRegs+0xdc>)
 800756a:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 800756c:	89fb      	ldrh	r3, [r7, #14]
 800756e:	3301      	adds	r3, #1
 8007570:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	3301      	adds	r3, #1
 8007576:	607b      	str	r3, [r7, #4]
 8007578:	887b      	ldrh	r3, [r7, #2]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	429a      	cmp	r2, r3
 800757e:	dbdf      	blt.n	8007540 <readInputRegs+0x84>
	}

	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8007580:	68b9      	ldr	r1, [r7, #8]
 8007582:	4805      	ldr	r0, [pc, #20]	; (8007598 <readInputRegs+0xdc>)
 8007584:	f7ff fedc 	bl	8007340 <sendData>
	return 1;   // success
 8007588:	2301      	movs	r3, #1
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	200005d8 	.word	0x200005d8
 8007598:	200006d8 	.word	0x200006d8
 800759c:	20000304 	.word	0x20000304

080075a0 <readCoils>:

uint8_t readCoils (void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b088      	sub	sp, #32
 80075a4:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Coil Address
 80075a6:	4b52      	ldr	r3, [pc, #328]	; (80076f0 <readCoils+0x150>)
 80075a8:	789b      	ldrb	r3, [r3, #2]
 80075aa:	021b      	lsls	r3, r3, #8
 80075ac:	b21a      	sxth	r2, r3
 80075ae:	4b50      	ldr	r3, [pc, #320]	; (80076f0 <readCoils+0x150>)
 80075b0:	78db      	ldrb	r3, [r3, #3]
 80075b2:	b21b      	sxth	r3, r3
 80075b4:	4313      	orrs	r3, r2
 80075b6:	b21b      	sxth	r3, r3
 80075b8:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData[4]<<8)|RxData[5]);   // number to coils master has requested
 80075ba:	4b4d      	ldr	r3, [pc, #308]	; (80076f0 <readCoils+0x150>)
 80075bc:	791b      	ldrb	r3, [r3, #4]
 80075be:	021b      	lsls	r3, r3, #8
 80075c0:	b21a      	sxth	r2, r3
 80075c2:	4b4b      	ldr	r3, [pc, #300]	; (80076f0 <readCoils+0x150>)
 80075c4:	795b      	ldrb	r3, [r3, #5]
 80075c6:	b21b      	sxth	r3, r3
 80075c8:	4313      	orrs	r3, r2
 80075ca:	b21b      	sxth	r3, r3
 80075cc:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>2000))  // maximum no. of coils as per the PDF
 80075ce:	893b      	ldrh	r3, [r7, #8]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d003      	beq.n	80075dc <readCoils+0x3c>
 80075d4:	893b      	ldrh	r3, [r7, #8]
 80075d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80075da:	d904      	bls.n	80075e6 <readCoils+0x46>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 80075dc:	2003      	movs	r0, #3
 80075de:	f7ff fedb 	bl	8007398 <modbusException>
		return 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	e080      	b.n	80076e8 <readCoils+0x148>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 80075e6:	897a      	ldrh	r2, [r7, #10]
 80075e8:	893b      	ldrh	r3, [r7, #8]
 80075ea:	4413      	add	r3, r2
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	3b01      	subs	r3, #1
 80075f0:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 80075f2:	88fb      	ldrh	r3, [r7, #6]
 80075f4:	2bc7      	cmp	r3, #199	; 0xc7
 80075f6:	d904      	bls.n	8007602 <readCoils+0x62>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 80075f8:	2002      	movs	r0, #2
 80075fa:	f7ff fecd 	bl	8007398 <modbusException>
		return 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	e072      	b.n	80076e8 <readCoils+0x148>
	}


	//reset TxData buffer
	memset (TxData, '\0', 256);
 8007602:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007606:	2100      	movs	r1, #0
 8007608:	483a      	ldr	r0, [pc, #232]	; (80076f4 <readCoils+0x154>)
 800760a:	f005 ff37 	bl	800d47c <memset>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 800760e:	4b39      	ldr	r3, [pc, #228]	; (80076f4 <readCoils+0x154>)
 8007610:	2207      	movs	r2, #7
 8007612:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 8007614:	4b36      	ldr	r3, [pc, #216]	; (80076f0 <readCoils+0x150>)
 8007616:	785a      	ldrb	r2, [r3, #1]
 8007618:	4b36      	ldr	r3, [pc, #216]	; (80076f4 <readCoils+0x154>)
 800761a:	705a      	strb	r2, [r3, #1]
	TxData[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);  // Byte count
 800761c:	893b      	ldrh	r3, [r7, #8]
 800761e:	08db      	lsrs	r3, r3, #3
 8007620:	b29b      	uxth	r3, r3
 8007622:	b2db      	uxtb	r3, r3
 8007624:	893a      	ldrh	r2, [r7, #8]
 8007626:	f002 0207 	and.w	r2, r2, #7
 800762a:	b292      	uxth	r2, r2
 800762c:	2a00      	cmp	r2, #0
 800762e:	bf14      	ite	ne
 8007630:	2201      	movne	r2, #1
 8007632:	2200      	moveq	r2, #0
 8007634:	b2d2      	uxtb	r2, r2
 8007636:	4413      	add	r3, r2
 8007638:	b2da      	uxtb	r2, r3
 800763a:	4b2e      	ldr	r3, [pc, #184]	; (80076f4 <readCoils+0x154>)
 800763c:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 800763e:	2303      	movs	r3, #3
 8007640:	61fb      	str	r3, [r7, #28]
	 * Then we will keep shifting the database[1] to the right and read the bits.
	 * Once the bitposition has crossed the value 7, we will increment the startbyte
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy into the next byte of the TxData
	 * This keeps going until the number of coils required have been copied
	 */
	int startByte = startAddr/8;  // which byte we have to start extracting the data from
 8007642:	897b      	ldrh	r3, [r7, #10]
 8007644:	08db      	lsrs	r3, r3, #3
 8007646:	b29b      	uxth	r3, r3
 8007648:	61bb      	str	r3, [r7, #24]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 800764a:	897b      	ldrh	r3, [r7, #10]
 800764c:	f003 0307 	and.w	r3, r3, #7
 8007650:	82fb      	strh	r3, [r7, #22]
	int indxPosition = 0;  // The shift position in the current indx of the TxData buffer
 8007652:	2300      	movs	r3, #0
 8007654:	613b      	str	r3, [r7, #16]

	// Load the actual data into TxData buffer
	for (int i=0; i<numCoils; i++)
 8007656:	2300      	movs	r3, #0
 8007658:	60fb      	str	r3, [r7, #12]
 800765a:	e033      	b.n	80076c4 <readCoils+0x124>
	{
		TxData[indx] |= ((Coils_Database[startByte] >> bitPosition) &0x01) << indxPosition;
 800765c:	4a25      	ldr	r2, [pc, #148]	; (80076f4 <readCoils+0x154>)
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	4413      	add	r3, r2
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	b25a      	sxtb	r2, r3
 8007666:	4924      	ldr	r1, [pc, #144]	; (80076f8 <readCoils+0x158>)
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	440b      	add	r3, r1
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	4619      	mov	r1, r3
 8007670:	8afb      	ldrh	r3, [r7, #22]
 8007672:	fa41 f303 	asr.w	r3, r1, r3
 8007676:	f003 0101 	and.w	r1, r3, #1
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	fa01 f303 	lsl.w	r3, r1, r3
 8007680:	b25b      	sxtb	r3, r3
 8007682:	4313      	orrs	r3, r2
 8007684:	b25b      	sxtb	r3, r3
 8007686:	b2d9      	uxtb	r1, r3
 8007688:	4a1a      	ldr	r2, [pc, #104]	; (80076f4 <readCoils+0x154>)
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	4413      	add	r3, r2
 800768e:	460a      	mov	r2, r1
 8007690:	701a      	strb	r2, [r3, #0]
		indxPosition++; bitPosition++;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	3301      	adds	r3, #1
 8007696:	613b      	str	r3, [r7, #16]
 8007698:	8afb      	ldrh	r3, [r7, #22]
 800769a:	3301      	adds	r3, #1
 800769c:	82fb      	strh	r3, [r7, #22]
		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	2b07      	cmp	r3, #7
 80076a2:	dd04      	ble.n	80076ae <readCoils+0x10e>
		{
			indxPosition = 0;
 80076a4:	2300      	movs	r3, #0
 80076a6:	613b      	str	r3, [r7, #16]
			indx++;
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	3301      	adds	r3, #1
 80076ac:	61fb      	str	r3, [r7, #28]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 80076ae:	8afb      	ldrh	r3, [r7, #22]
 80076b0:	2b07      	cmp	r3, #7
 80076b2:	d904      	bls.n	80076be <readCoils+0x11e>
		{
			bitPosition=0;
 80076b4:	2300      	movs	r3, #0
 80076b6:	82fb      	strh	r3, [r7, #22]
			startByte++;
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	3301      	adds	r3, #1
 80076bc:	61bb      	str	r3, [r7, #24]
	for (int i=0; i<numCoils; i++)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3301      	adds	r3, #1
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	893b      	ldrh	r3, [r7, #8]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	dbc7      	blt.n	800765c <readCoils+0xbc>
		}
	}

	if (numCoils%8 != 0)indx++;  // increment the indx variable, only if the numcoils is not a multiple of 8
 80076cc:	893b      	ldrh	r3, [r7, #8]
 80076ce:	f003 0307 	and.w	r3, r3, #7
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <readCoils+0x13e>
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	3301      	adds	r3, #1
 80076dc:	61fb      	str	r3, [r7, #28]
	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 80076de:	69f9      	ldr	r1, [r7, #28]
 80076e0:	4804      	ldr	r0, [pc, #16]	; (80076f4 <readCoils+0x154>)
 80076e2:	f7ff fe2d 	bl	8007340 <sendData>
	return 1;   // success
 80076e6:	2301      	movs	r3, #1
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3720      	adds	r7, #32
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	200005d8 	.word	0x200005d8
 80076f4:	200006d8 	.word	0x200006d8
 80076f8:	20000308 	.word	0x20000308

080076fc <readInputs>:

uint8_t readInputs (void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b088      	sub	sp, #32
 8007700:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8007702:	4b52      	ldr	r3, [pc, #328]	; (800784c <readInputs+0x150>)
 8007704:	789b      	ldrb	r3, [r3, #2]
 8007706:	021b      	lsls	r3, r3, #8
 8007708:	b21a      	sxth	r2, r3
 800770a:	4b50      	ldr	r3, [pc, #320]	; (800784c <readInputs+0x150>)
 800770c:	78db      	ldrb	r3, [r3, #3]
 800770e:	b21b      	sxth	r3, r3
 8007710:	4313      	orrs	r3, r2
 8007712:	b21b      	sxth	r3, r3
 8007714:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData[4]<<8)|RxData[5]);   // number to coils master has requested
 8007716:	4b4d      	ldr	r3, [pc, #308]	; (800784c <readInputs+0x150>)
 8007718:	791b      	ldrb	r3, [r3, #4]
 800771a:	021b      	lsls	r3, r3, #8
 800771c:	b21a      	sxth	r2, r3
 800771e:	4b4b      	ldr	r3, [pc, #300]	; (800784c <readInputs+0x150>)
 8007720:	795b      	ldrb	r3, [r3, #5]
 8007722:	b21b      	sxth	r3, r3
 8007724:	4313      	orrs	r3, r2
 8007726:	b21b      	sxth	r3, r3
 8007728:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>2000))  // maximum no. of coils as per the PDF
 800772a:	893b      	ldrh	r3, [r7, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d003      	beq.n	8007738 <readInputs+0x3c>
 8007730:	893b      	ldrh	r3, [r7, #8]
 8007732:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007736:	d904      	bls.n	8007742 <readInputs+0x46>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8007738:	2003      	movs	r0, #3
 800773a:	f7ff fe2d 	bl	8007398 <modbusException>
		return 0;
 800773e:	2300      	movs	r3, #0
 8007740:	e080      	b.n	8007844 <readInputs+0x148>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 8007742:	897a      	ldrh	r2, [r7, #10]
 8007744:	893b      	ldrh	r3, [r7, #8]
 8007746:	4413      	add	r3, r2
 8007748:	b29b      	uxth	r3, r3
 800774a:	3b01      	subs	r3, #1
 800774c:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 800774e:	88fb      	ldrh	r3, [r7, #6]
 8007750:	2bc7      	cmp	r3, #199	; 0xc7
 8007752:	d904      	bls.n	800775e <readInputs+0x62>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8007754:	2002      	movs	r0, #2
 8007756:	f7ff fe1f 	bl	8007398 <modbusException>
		return 0;
 800775a:	2300      	movs	r3, #0
 800775c:	e072      	b.n	8007844 <readInputs+0x148>
	}


	//reset TxData buffer
	memset (TxData, '\0', 256);
 800775e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007762:	2100      	movs	r1, #0
 8007764:	483a      	ldr	r0, [pc, #232]	; (8007850 <readInputs+0x154>)
 8007766:	f005 fe89 	bl	800d47c <memset>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 800776a:	4b39      	ldr	r3, [pc, #228]	; (8007850 <readInputs+0x154>)
 800776c:	2207      	movs	r2, #7
 800776e:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 8007770:	4b36      	ldr	r3, [pc, #216]	; (800784c <readInputs+0x150>)
 8007772:	785a      	ldrb	r2, [r3, #1]
 8007774:	4b36      	ldr	r3, [pc, #216]	; (8007850 <readInputs+0x154>)
 8007776:	705a      	strb	r2, [r3, #1]
	TxData[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);  // Byte count
 8007778:	893b      	ldrh	r3, [r7, #8]
 800777a:	08db      	lsrs	r3, r3, #3
 800777c:	b29b      	uxth	r3, r3
 800777e:	b2db      	uxtb	r3, r3
 8007780:	893a      	ldrh	r2, [r7, #8]
 8007782:	f002 0207 	and.w	r2, r2, #7
 8007786:	b292      	uxth	r2, r2
 8007788:	2a00      	cmp	r2, #0
 800778a:	bf14      	ite	ne
 800778c:	2201      	movne	r2, #1
 800778e:	2200      	moveq	r2, #0
 8007790:	b2d2      	uxtb	r2, r2
 8007792:	4413      	add	r3, r2
 8007794:	b2da      	uxtb	r2, r3
 8007796:	4b2e      	ldr	r3, [pc, #184]	; (8007850 <readInputs+0x154>)
 8007798:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 800779a:	2303      	movs	r3, #3
 800779c:	61fb      	str	r3, [r7, #28]
	 * Then we will keep shifting the database[1] to the right and read the bits.
	 * Once the bitposition has crossed the value 7, we will increment the startbyte
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy into the next byte of the TxData
	 * This keeps going until the number of coils required have been copied
	 */
	int startByte = startAddr/8;  // which byte we have to start extracting the data from
 800779e:	897b      	ldrh	r3, [r7, #10]
 80077a0:	08db      	lsrs	r3, r3, #3
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	61bb      	str	r3, [r7, #24]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 80077a6:	897b      	ldrh	r3, [r7, #10]
 80077a8:	f003 0307 	and.w	r3, r3, #7
 80077ac:	82fb      	strh	r3, [r7, #22]
	int indxPosition = 0;  // The shift position in the current indx of the TxData buffer
 80077ae:	2300      	movs	r3, #0
 80077b0:	613b      	str	r3, [r7, #16]

	// Load the actual data into TxData buffer
	for (int i=0; i<numCoils; i++)
 80077b2:	2300      	movs	r3, #0
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	e033      	b.n	8007820 <readInputs+0x124>
	{
		TxData[indx] |= ((Inputs_Database[startByte] >> bitPosition) &0x01) << indxPosition;
 80077b8:	4a25      	ldr	r2, [pc, #148]	; (8007850 <readInputs+0x154>)
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	4413      	add	r3, r2
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	b25a      	sxtb	r2, r3
 80077c2:	4924      	ldr	r1, [pc, #144]	; (8007854 <readInputs+0x158>)
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	440b      	add	r3, r1
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	4619      	mov	r1, r3
 80077cc:	8afb      	ldrh	r3, [r7, #22]
 80077ce:	fa41 f303 	asr.w	r3, r1, r3
 80077d2:	f003 0101 	and.w	r1, r3, #1
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	fa01 f303 	lsl.w	r3, r1, r3
 80077dc:	b25b      	sxtb	r3, r3
 80077de:	4313      	orrs	r3, r2
 80077e0:	b25b      	sxtb	r3, r3
 80077e2:	b2d9      	uxtb	r1, r3
 80077e4:	4a1a      	ldr	r2, [pc, #104]	; (8007850 <readInputs+0x154>)
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	4413      	add	r3, r2
 80077ea:	460a      	mov	r2, r1
 80077ec:	701a      	strb	r2, [r3, #0]
		indxPosition++; bitPosition++;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	3301      	adds	r3, #1
 80077f2:	613b      	str	r3, [r7, #16]
 80077f4:	8afb      	ldrh	r3, [r7, #22]
 80077f6:	3301      	adds	r3, #1
 80077f8:	82fb      	strh	r3, [r7, #22]
		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	2b07      	cmp	r3, #7
 80077fe:	dd04      	ble.n	800780a <readInputs+0x10e>
		{
			indxPosition = 0;
 8007800:	2300      	movs	r3, #0
 8007802:	613b      	str	r3, [r7, #16]
			indx++;
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	3301      	adds	r3, #1
 8007808:	61fb      	str	r3, [r7, #28]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 800780a:	8afb      	ldrh	r3, [r7, #22]
 800780c:	2b07      	cmp	r3, #7
 800780e:	d904      	bls.n	800781a <readInputs+0x11e>
		{
			bitPosition=0;
 8007810:	2300      	movs	r3, #0
 8007812:	82fb      	strh	r3, [r7, #22]
			startByte++;
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	3301      	adds	r3, #1
 8007818:	61bb      	str	r3, [r7, #24]
	for (int i=0; i<numCoils; i++)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	3301      	adds	r3, #1
 800781e:	60fb      	str	r3, [r7, #12]
 8007820:	893b      	ldrh	r3, [r7, #8]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	429a      	cmp	r2, r3
 8007826:	dbc7      	blt.n	80077b8 <readInputs+0xbc>
		}
	}

	if (numCoils%8 != 0)indx++;  // increment the indx variable, only if the numcoils is not a multiple of 8
 8007828:	893b      	ldrh	r3, [r7, #8]
 800782a:	f003 0307 	and.w	r3, r3, #7
 800782e:	b29b      	uxth	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	d002      	beq.n	800783a <readInputs+0x13e>
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	3301      	adds	r3, #1
 8007838:	61fb      	str	r3, [r7, #28]
	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 800783a:	69f9      	ldr	r1, [r7, #28]
 800783c:	4804      	ldr	r0, [pc, #16]	; (8007850 <readInputs+0x154>)
 800783e:	f7ff fd7f 	bl	8007340 <sendData>
	return 1;   // success
 8007842:	2301      	movs	r3, #1
}
 8007844:	4618      	mov	r0, r3
 8007846:	3720      	adds	r7, #32
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	200005d8 	.word	0x200005d8
 8007850:	200006d8 	.word	0x200006d8
 8007854:	2000030c 	.word	0x2000030c

08007858 <writeHoldingRegs>:

uint8_t writeHoldingRegs (void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 800785e:	4b38      	ldr	r3, [pc, #224]	; (8007940 <writeHoldingRegs+0xe8>)
 8007860:	789b      	ldrb	r3, [r3, #2]
 8007862:	021b      	lsls	r3, r3, #8
 8007864:	b21a      	sxth	r2, r3
 8007866:	4b36      	ldr	r3, [pc, #216]	; (8007940 <writeHoldingRegs+0xe8>)
 8007868:	78db      	ldrb	r3, [r3, #3]
 800786a:	b21b      	sxth	r3, r3
 800786c:	4313      	orrs	r3, r2
 800786e:	b21b      	sxth	r3, r3
 8007870:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 8007872:	4b33      	ldr	r3, [pc, #204]	; (8007940 <writeHoldingRegs+0xe8>)
 8007874:	791b      	ldrb	r3, [r3, #4]
 8007876:	021b      	lsls	r3, r3, #8
 8007878:	b21a      	sxth	r2, r3
 800787a:	4b31      	ldr	r3, [pc, #196]	; (8007940 <writeHoldingRegs+0xe8>)
 800787c:	795b      	ldrb	r3, [r3, #5]
 800787e:	b21b      	sxth	r3, r3
 8007880:	4313      	orrs	r3, r2
 8007882:	b21b      	sxth	r3, r3
 8007884:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per the PDF
 8007886:	887b      	ldrh	r3, [r7, #2]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d002      	beq.n	8007892 <writeHoldingRegs+0x3a>
 800788c:	887b      	ldrh	r3, [r7, #2]
 800788e:	2b7b      	cmp	r3, #123	; 0x7b
 8007890:	d904      	bls.n	800789c <writeHoldingRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8007892:	2003      	movs	r0, #3
 8007894:	f7ff fd80 	bl	8007398 <modbusException>
		return 0;
 8007898:	2300      	movs	r3, #0
 800789a:	e04c      	b.n	8007936 <writeHoldingRegs+0xde>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 800789c:	89fa      	ldrh	r2, [r7, #14]
 800789e:	887b      	ldrh	r3, [r7, #2]
 80078a0:	4413      	add	r3, r2
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	3b01      	subs	r3, #1
 80078a6:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 80078a8:	883b      	ldrh	r3, [r7, #0]
 80078aa:	2b31      	cmp	r3, #49	; 0x31
 80078ac:	d904      	bls.n	80078b8 <writeHoldingRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 80078ae:	2002      	movs	r0, #2
 80078b0:	f7ff fd72 	bl	8007398 <modbusException>
		return 0;
 80078b4:	2300      	movs	r3, #0
 80078b6:	e03e      	b.n	8007936 <writeHoldingRegs+0xde>

	/* start saving 16 bit data
	 * Data starts from RxData[7] and we need to combine 2 bytes together
	 * 16 bit Data = firstByte<<8|secondByte
	 */
	int indx = 7;  // we need to keep track of index in RxData
 80078b8:	2307      	movs	r3, #7
 80078ba:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<numRegs; i++)
 80078bc:	2300      	movs	r3, #0
 80078be:	607b      	str	r3, [r7, #4]
 80078c0:	e019      	b.n	80078f6 <writeHoldingRegs+0x9e>
	{
		Holding_Registers_Database[startAddr++] = (RxData[indx++]<<8)|RxData[indx++];
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	1c5a      	adds	r2, r3, #1
 80078c6:	60ba      	str	r2, [r7, #8]
 80078c8:	4a1d      	ldr	r2, [pc, #116]	; (8007940 <writeHoldingRegs+0xe8>)
 80078ca:	5cd3      	ldrb	r3, [r2, r3]
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	b21a      	sxth	r2, r3
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	1c59      	adds	r1, r3, #1
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	491a      	ldr	r1, [pc, #104]	; (8007940 <writeHoldingRegs+0xe8>)
 80078d8:	5ccb      	ldrb	r3, [r1, r3]
 80078da:	b21b      	sxth	r3, r3
 80078dc:	4313      	orrs	r3, r2
 80078de:	b219      	sxth	r1, r3
 80078e0:	89fb      	ldrh	r3, [r7, #14]
 80078e2:	1c5a      	adds	r2, r3, #1
 80078e4:	81fa      	strh	r2, [r7, #14]
 80078e6:	461a      	mov	r2, r3
 80078e8:	b289      	uxth	r1, r1
 80078ea:	4b16      	ldr	r3, [pc, #88]	; (8007944 <writeHoldingRegs+0xec>)
 80078ec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i=0; i<numRegs; i++)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	3301      	adds	r3, #1
 80078f4:	607b      	str	r3, [r7, #4]
 80078f6:	887b      	ldrh	r3, [r7, #2]
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	dbe1      	blt.n	80078c2 <writeHoldingRegs+0x6a>
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | num of Regs    | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES      | 2 BYTES |

	TxData[0] = SLAVE_ID;    // slave ID
 80078fe:	4b12      	ldr	r3, [pc, #72]	; (8007948 <writeHoldingRegs+0xf0>)
 8007900:	2207      	movs	r2, #7
 8007902:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];   // function code
 8007904:	4b0e      	ldr	r3, [pc, #56]	; (8007940 <writeHoldingRegs+0xe8>)
 8007906:	785a      	ldrb	r2, [r3, #1]
 8007908:	4b0f      	ldr	r3, [pc, #60]	; (8007948 <writeHoldingRegs+0xf0>)
 800790a:	705a      	strb	r2, [r3, #1]
	TxData[2] = RxData[2];   // Start Addr HIGH Byte
 800790c:	4b0c      	ldr	r3, [pc, #48]	; (8007940 <writeHoldingRegs+0xe8>)
 800790e:	789a      	ldrb	r2, [r3, #2]
 8007910:	4b0d      	ldr	r3, [pc, #52]	; (8007948 <writeHoldingRegs+0xf0>)
 8007912:	709a      	strb	r2, [r3, #2]
	TxData[3] = RxData[3];   // Start Addr LOW Byte
 8007914:	4b0a      	ldr	r3, [pc, #40]	; (8007940 <writeHoldingRegs+0xe8>)
 8007916:	78da      	ldrb	r2, [r3, #3]
 8007918:	4b0b      	ldr	r3, [pc, #44]	; (8007948 <writeHoldingRegs+0xf0>)
 800791a:	70da      	strb	r2, [r3, #3]
	TxData[4] = RxData[4];   // num of Regs HIGH Byte
 800791c:	4b08      	ldr	r3, [pc, #32]	; (8007940 <writeHoldingRegs+0xe8>)
 800791e:	791a      	ldrb	r2, [r3, #4]
 8007920:	4b09      	ldr	r3, [pc, #36]	; (8007948 <writeHoldingRegs+0xf0>)
 8007922:	711a      	strb	r2, [r3, #4]
	TxData[5] = RxData[5];   // num of Regs LOW Byte
 8007924:	4b06      	ldr	r3, [pc, #24]	; (8007940 <writeHoldingRegs+0xe8>)
 8007926:	795a      	ldrb	r2, [r3, #5]
 8007928:	4b07      	ldr	r3, [pc, #28]	; (8007948 <writeHoldingRegs+0xf0>)
 800792a:	715a      	strb	r2, [r3, #5]

	sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 800792c:	2106      	movs	r1, #6
 800792e:	4806      	ldr	r0, [pc, #24]	; (8007948 <writeHoldingRegs+0xf0>)
 8007930:	f7ff fd06 	bl	8007340 <sendData>
	return 1;   // success
 8007934:	2301      	movs	r3, #1
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	200005d8 	.word	0x200005d8
 8007944:	200002d4 	.word	0x200002d4
 8007948:	200006d8 	.word	0x200006d8

0800794c <writeSingleReg>:

uint8_t writeSingleReg (void)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8007952:	4b20      	ldr	r3, [pc, #128]	; (80079d4 <writeSingleReg+0x88>)
 8007954:	789b      	ldrb	r3, [r3, #2]
 8007956:	021b      	lsls	r3, r3, #8
 8007958:	b21a      	sxth	r2, r3
 800795a:	4b1e      	ldr	r3, [pc, #120]	; (80079d4 <writeSingleReg+0x88>)
 800795c:	78db      	ldrb	r3, [r3, #3]
 800795e:	b21b      	sxth	r3, r3
 8007960:	4313      	orrs	r3, r2
 8007962:	b21b      	sxth	r3, r3
 8007964:	80fb      	strh	r3, [r7, #6]

	if (startAddr>49)  // The Register Address can not be more than 49 as we only have record of 50 Registers in total
 8007966:	88fb      	ldrh	r3, [r7, #6]
 8007968:	2b31      	cmp	r3, #49	; 0x31
 800796a:	d904      	bls.n	8007976 <writeSingleReg+0x2a>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 800796c:	2002      	movs	r0, #2
 800796e:	f7ff fd13 	bl	8007398 <modbusException>
		return 0;
 8007972:	2300      	movs	r3, #0
 8007974:	e029      	b.n	80079ca <writeSingleReg+0x7e>

	/* Save the 16 bit data
	 * Data is the combination of 2 bytes, RxData[4] and RxData[5]
	 */

	Holding_Registers_Database[startAddr] = (RxData[4]<<8)|RxData[5];
 8007976:	4b17      	ldr	r3, [pc, #92]	; (80079d4 <writeSingleReg+0x88>)
 8007978:	791b      	ldrb	r3, [r3, #4]
 800797a:	021b      	lsls	r3, r3, #8
 800797c:	b21a      	sxth	r2, r3
 800797e:	4b15      	ldr	r3, [pc, #84]	; (80079d4 <writeSingleReg+0x88>)
 8007980:	795b      	ldrb	r3, [r3, #5]
 8007982:	b21b      	sxth	r3, r3
 8007984:	4313      	orrs	r3, r2
 8007986:	b21a      	sxth	r2, r3
 8007988:	88fb      	ldrh	r3, [r7, #6]
 800798a:	b291      	uxth	r1, r2
 800798c:	4a12      	ldr	r2, [pc, #72]	; (80079d8 <writeSingleReg+0x8c>)
 800798e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

	TxData[0] = SLAVE_ID;    // slave ID
 8007992:	4b12      	ldr	r3, [pc, #72]	; (80079dc <writeSingleReg+0x90>)
 8007994:	2207      	movs	r2, #7
 8007996:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];   // function code
 8007998:	4b0e      	ldr	r3, [pc, #56]	; (80079d4 <writeSingleReg+0x88>)
 800799a:	785a      	ldrb	r2, [r3, #1]
 800799c:	4b0f      	ldr	r3, [pc, #60]	; (80079dc <writeSingleReg+0x90>)
 800799e:	705a      	strb	r2, [r3, #1]
	TxData[2] = RxData[2];   // Start Addr HIGH Byte
 80079a0:	4b0c      	ldr	r3, [pc, #48]	; (80079d4 <writeSingleReg+0x88>)
 80079a2:	789a      	ldrb	r2, [r3, #2]
 80079a4:	4b0d      	ldr	r3, [pc, #52]	; (80079dc <writeSingleReg+0x90>)
 80079a6:	709a      	strb	r2, [r3, #2]
	TxData[3] = RxData[3];   // Start Addr LOW Byte
 80079a8:	4b0a      	ldr	r3, [pc, #40]	; (80079d4 <writeSingleReg+0x88>)
 80079aa:	78da      	ldrb	r2, [r3, #3]
 80079ac:	4b0b      	ldr	r3, [pc, #44]	; (80079dc <writeSingleReg+0x90>)
 80079ae:	70da      	strb	r2, [r3, #3]
	TxData[4] = RxData[4];   // Reg Data HIGH Byte
 80079b0:	4b08      	ldr	r3, [pc, #32]	; (80079d4 <writeSingleReg+0x88>)
 80079b2:	791a      	ldrb	r2, [r3, #4]
 80079b4:	4b09      	ldr	r3, [pc, #36]	; (80079dc <writeSingleReg+0x90>)
 80079b6:	711a      	strb	r2, [r3, #4]
	TxData[5] = RxData[5];   // Reg Data LOW  Byte
 80079b8:	4b06      	ldr	r3, [pc, #24]	; (80079d4 <writeSingleReg+0x88>)
 80079ba:	795a      	ldrb	r2, [r3, #5]
 80079bc:	4b07      	ldr	r3, [pc, #28]	; (80079dc <writeSingleReg+0x90>)
 80079be:	715a      	strb	r2, [r3, #5]

	sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 80079c0:	2106      	movs	r1, #6
 80079c2:	4806      	ldr	r0, [pc, #24]	; (80079dc <writeSingleReg+0x90>)
 80079c4:	f7ff fcbc 	bl	8007340 <sendData>
	return 1;   // success
 80079c8:	2301      	movs	r3, #1
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	200005d8 	.word	0x200005d8
 80079d8:	200002d4 	.word	0x200002d4
 80079dc:	200006d8 	.word	0x200006d8

080079e0 <MBupdateRegisters>:
void MBupdateRegisters(void)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	af00      	add	r7, sp, #0
	//MASTER can read ONLY:
	Holding_Registers_Database[MB_REG_STATE]=estado_atual;
 80079e4:	4b29      	ldr	r3, [pc, #164]	; (8007a8c <MBupdateRegisters+0xac>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	4b29      	ldr	r3, [pc, #164]	; (8007a90 <MBupdateRegisters+0xb0>)
 80079ec:	805a      	strh	r2, [r3, #2]
	Holding_Registers_Database[MB_REG_Wh]=(unsigned int)Energy;
 80079ee:	4b29      	ldr	r3, [pc, #164]	; (8007a94 <MBupdateRegisters+0xb4>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7f9 fbb2 	bl	800115c <__aeabi_f2uiz>
 80079f8:	4603      	mov	r3, r0
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	4b24      	ldr	r3, [pc, #144]	; (8007a90 <MBupdateRegisters+0xb0>)
 80079fe:	809a      	strh	r2, [r3, #4]
	Holding_Registers_Database[MB_REG_CP_voltage]=(unsigned int)medida_CP_atual;
 8007a00:	4b25      	ldr	r3, [pc, #148]	; (8007a98 <MBupdateRegisters+0xb8>)
 8007a02:	881a      	ldrh	r2, [r3, #0]
 8007a04:	4b22      	ldr	r3, [pc, #136]	; (8007a90 <MBupdateRegisters+0xb0>)
 8007a06:	80da      	strh	r2, [r3, #6]
	Holding_Registers_Database[MB_REG_IRMS]=(unsigned int)Irms;
 8007a08:	4b24      	ldr	r3, [pc, #144]	; (8007a9c <MBupdateRegisters+0xbc>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7f9 fba5 	bl	800115c <__aeabi_f2uiz>
 8007a12:	4603      	mov	r3, r0
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	4b1e      	ldr	r3, [pc, #120]	; (8007a90 <MBupdateRegisters+0xb0>)
 8007a18:	811a      	strh	r2, [r3, #8]
	Holding_Registers_Database[MB_REG_TEMPERATURE] = (unsigned int)temp;
 8007a1a:	4b21      	ldr	r3, [pc, #132]	; (8007aa0 <MBupdateRegisters+0xc0>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7f9 fb9c 	bl	800115c <__aeabi_f2uiz>
 8007a24:	4603      	mov	r3, r0
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	4b19      	ldr	r3, [pc, #100]	; (8007a90 <MBupdateRegisters+0xb0>)
 8007a2a:	845a      	strh	r2, [r3, #34]	; 0x22
	Holding_Registers_Database[MB_REG_POWER] = (unsigned int)power;
 8007a2c:	4b1d      	ldr	r3, [pc, #116]	; (8007aa4 <MBupdateRegisters+0xc4>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7f9 fb93 	bl	800115c <__aeabi_f2uiz>
 8007a36:	4603      	mov	r3, r0
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	4b15      	ldr	r3, [pc, #84]	; (8007a90 <MBupdateRegisters+0xb0>)
 8007a3c:	849a      	strh	r2, [r3, #36]	; 0x24
	Holding_Registers_Database[MB_REG_ERROS] = (unsigned int)Erros;
 8007a3e:	4b1a      	ldr	r3, [pc, #104]	; (8007aa8 <MBupdateRegisters+0xc8>)
 8007a40:	881a      	ldrh	r2, [r3, #0]
 8007a42:	4b13      	ldr	r3, [pc, #76]	; (8007a90 <MBupdateRegisters+0xb0>)
 8007a44:	84da      	strh	r2, [r3, #38]	; 0x26
	Holding_Registers_Database[MB_REG_STATUS] = (unsigned int)Status;
 8007a46:	4b19      	ldr	r3, [pc, #100]	; (8007aac <MBupdateRegisters+0xcc>)
 8007a48:	881a      	ldrh	r2, [r3, #0]
 8007a4a:	4b11      	ldr	r3, [pc, #68]	; (8007a90 <MBupdateRegisters+0xb0>)
 8007a4c:	851a      	strh	r2, [r3, #40]	; 0x28
	Holding_Registers_Database[MB_REG_VFASE] = vfase;
 8007a4e:	4b18      	ldr	r3, [pc, #96]	; (8007ab0 <MBupdateRegisters+0xd0>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	4b0e      	ldr	r3, [pc, #56]	; (8007a90 <MBupdateRegisters+0xb0>)
 8007a56:	859a      	strh	r2, [r3, #44]	; 0x2c
	Holding_Registers_Database[MB_REG_VFASE_NEUTRO] = V_fase_neutro;
 8007a58:	4b16      	ldr	r3, [pc, #88]	; (8007ab4 <MBupdateRegisters+0xd4>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	4b0c      	ldr	r3, [pc, #48]	; (8007a90 <MBupdateRegisters+0xb0>)
 8007a60:	861a      	strh	r2, [r3, #48]	; 0x30
	Holding_Registers_Database[MB_REG_VNEUTRO] = vneutro;
 8007a62:	4b15      	ldr	r3, [pc, #84]	; (8007ab8 <MBupdateRegisters+0xd8>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	4b09      	ldr	r3, [pc, #36]	; (8007a90 <MBupdateRegisters+0xb0>)
 8007a6a:	85da      	strh	r2, [r3, #46]	; 0x2e

	Holding_Registers_Database[MB_REG_FIRMWARE_VERSION] =400;// TODO: concatenar version: EVSE_FW_VERSION;
 8007a6c:	4b08      	ldr	r3, [pc, #32]	; (8007a90 <MBupdateRegisters+0xb0>)
 8007a6e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007a72:	855a      	strh	r2, [r3, #42]	; 0x2a
	//MASTER can WRITE:
	OCPP_Charge=Holding_Registers_Database[MB_REG_OCPP_Charge];
 8007a74:	4b06      	ldr	r3, [pc, #24]	; (8007a90 <MBupdateRegisters+0xb0>)
 8007a76:	899b      	ldrh	r3, [r3, #12]
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	4b10      	ldr	r3, [pc, #64]	; (8007abc <MBupdateRegisters+0xdc>)
 8007a7c:	701a      	strb	r2, [r3, #0]
	isOnline=Holding_Registers_Database[MB_REG_IsOnline];
 8007a7e:	4b04      	ldr	r3, [pc, #16]	; (8007a90 <MBupdateRegisters+0xb0>)
 8007a80:	8a1b      	ldrh	r3, [r3, #16]
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	4b0e      	ldr	r3, [pc, #56]	; (8007ac0 <MBupdateRegisters+0xe0>)
 8007a86:	701a      	strb	r2, [r3, #0]
#endif
	if(Holding_Registers_Database[MB_REG_date_FLAG])
	{

	}
}
 8007a88:	bf00      	nop
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	200007d9 	.word	0x200007d9
 8007a90:	200002d4 	.word	0x200002d4
 8007a94:	200005a4 	.word	0x200005a4
 8007a98:	200005d2 	.word	0x200005d2
 8007a9c:	20000268 	.word	0x20000268
 8007aa0:	200005a8 	.word	0x200005a8
 8007aa4:	200005a0 	.word	0x200005a0
 8007aa8:	200005bc 	.word	0x200005bc
 8007aac:	200005be 	.word	0x200005be
 8007ab0:	20000238 	.word	0x20000238
 8007ab4:	2000023c 	.word	0x2000023c
 8007ab8:	20000254 	.word	0x20000254
 8007abc:	20000034 	.word	0x20000034
 8007ac0:	200005cf 	.word	0x200005cf

08007ac4 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8007ad0:	23ff      	movs	r3, #255	; 0xff
 8007ad2:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8007ad4:	23ff      	movs	r3, #255	; 0xff
 8007ad6:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8007ad8:	e013      	b.n	8007b02 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	1c5a      	adds	r2, r3, #1
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	781a      	ldrb	r2, [r3, #0]
 8007ae2:	7bbb      	ldrb	r3, [r7, #14]
 8007ae4:	4053      	eors	r3, r2
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8007aea:	4a0f      	ldr	r2, [pc, #60]	; (8007b28 <crc16+0x64>)
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	4413      	add	r3, r2
 8007af0:	781a      	ldrb	r2, [r3, #0]
 8007af2:	7bfb      	ldrb	r3, [r7, #15]
 8007af4:	4053      	eors	r3, r2
 8007af6:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8007af8:	4a0c      	ldr	r2, [pc, #48]	; (8007b2c <crc16+0x68>)
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	4413      	add	r3, r2
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8007b02:	887b      	ldrh	r3, [r7, #2]
 8007b04:	1e5a      	subs	r2, r3, #1
 8007b06:	807a      	strh	r2, [r7, #2]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1e6      	bne.n	8007ada <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
 8007b0e:	021b      	lsls	r3, r3, #8
 8007b10:	b21a      	sxth	r2, r3
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	b21b      	sxth	r3, r3
 8007b16:	4313      	orrs	r3, r2
 8007b18:	b21b      	sxth	r3, r3
 8007b1a:	b29b      	uxth	r3, r3
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bc80      	pop	{r7}
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	08012ad0 	.word	0x08012ad0
 8007b2c:	08012bd0 	.word	0x08012bd0

08007b30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007b36:	4b15      	ldr	r3, [pc, #84]	; (8007b8c <HAL_MspInit+0x5c>)
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	4a14      	ldr	r2, [pc, #80]	; (8007b8c <HAL_MspInit+0x5c>)
 8007b3c:	f043 0301 	orr.w	r3, r3, #1
 8007b40:	6193      	str	r3, [r2, #24]
 8007b42:	4b12      	ldr	r3, [pc, #72]	; (8007b8c <HAL_MspInit+0x5c>)
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	60bb      	str	r3, [r7, #8]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b4e:	4b0f      	ldr	r3, [pc, #60]	; (8007b8c <HAL_MspInit+0x5c>)
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	4a0e      	ldr	r2, [pc, #56]	; (8007b8c <HAL_MspInit+0x5c>)
 8007b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b58:	61d3      	str	r3, [r2, #28]
 8007b5a:	4b0c      	ldr	r3, [pc, #48]	; (8007b8c <HAL_MspInit+0x5c>)
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b62:	607b      	str	r3, [r7, #4]
 8007b64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007b66:	4b0a      	ldr	r3, [pc, #40]	; (8007b90 <HAL_MspInit+0x60>)
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	4a04      	ldr	r2, [pc, #16]	; (8007b90 <HAL_MspInit+0x60>)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007b82:	bf00      	nop
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bc80      	pop	{r7}
 8007b8a:	4770      	bx	lr
 8007b8c:	40021000 	.word	0x40021000
 8007b90:	40010000 	.word	0x40010000

08007b94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b08c      	sub	sp, #48	; 0x30
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b9c:	f107 0320 	add.w	r3, r7, #32
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	605a      	str	r2, [r3, #4]
 8007ba6:	609a      	str	r2, [r3, #8]
 8007ba8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a3b      	ldr	r2, [pc, #236]	; (8007c9c <HAL_ADC_MspInit+0x108>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d140      	bne.n	8007c36 <HAL_ADC_MspInit+0xa2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007bb4:	4b3a      	ldr	r3, [pc, #232]	; (8007ca0 <HAL_ADC_MspInit+0x10c>)
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	4a39      	ldr	r2, [pc, #228]	; (8007ca0 <HAL_ADC_MspInit+0x10c>)
 8007bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007bbe:	6193      	str	r3, [r2, #24]
 8007bc0:	4b37      	ldr	r3, [pc, #220]	; (8007ca0 <HAL_ADC_MspInit+0x10c>)
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bc8:	61fb      	str	r3, [r7, #28]
 8007bca:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007bcc:	4b34      	ldr	r3, [pc, #208]	; (8007ca0 <HAL_ADC_MspInit+0x10c>)
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	4a33      	ldr	r2, [pc, #204]	; (8007ca0 <HAL_ADC_MspInit+0x10c>)
 8007bd2:	f043 0310 	orr.w	r3, r3, #16
 8007bd6:	6193      	str	r3, [r2, #24]
 8007bd8:	4b31      	ldr	r3, [pc, #196]	; (8007ca0 <HAL_ADC_MspInit+0x10c>)
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	f003 0310 	and.w	r3, r3, #16
 8007be0:	61bb      	str	r3, [r7, #24]
 8007be2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007be4:	4b2e      	ldr	r3, [pc, #184]	; (8007ca0 <HAL_ADC_MspInit+0x10c>)
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	4a2d      	ldr	r2, [pc, #180]	; (8007ca0 <HAL_ADC_MspInit+0x10c>)
 8007bea:	f043 0304 	orr.w	r3, r3, #4
 8007bee:	6193      	str	r3, [r2, #24]
 8007bf0:	4b2b      	ldr	r3, [pc, #172]	; (8007ca0 <HAL_ADC_MspInit+0x10c>)
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	f003 0304 	and.w	r3, r3, #4
 8007bf8:	617b      	str	r3, [r7, #20]
 8007bfa:	697b      	ldr	r3, [r7, #20]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = V_FASE_NEUTRO_Pin|V_FASE2_NEUTRO_Pin|V_FASE3_NEUTRO_Pin|ADC_RCABO_Pin
 8007bfc:	233f      	movs	r3, #63	; 0x3f
 8007bfe:	623b      	str	r3, [r7, #32]
                          |I_F2_Pin|I_F3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c00:	2303      	movs	r3, #3
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c04:	f107 0320 	add.w	r3, r7, #32
 8007c08:	4619      	mov	r1, r3
 8007c0a:	4826      	ldr	r0, [pc, #152]	; (8007ca4 <HAL_ADC_MspInit+0x110>)
 8007c0c:	f001 ff3e 	bl	8009a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NTC5_Pin|PILOT_READ_Pin|VAC_F1_Pin|VAC_F2_Pin
 8007c10:	23fa      	movs	r3, #250	; 0xfa
 8007c12:	623b      	str	r3, [r7, #32]
                          |VAC_F3_Pin|I_F1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c14:	2303      	movs	r3, #3
 8007c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c18:	f107 0320 	add.w	r3, r7, #32
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4822      	ldr	r0, [pc, #136]	; (8007ca8 <HAL_ADC_MspInit+0x114>)
 8007c20:	f001 ff34 	bl	8009a8c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8007c24:	2200      	movs	r2, #0
 8007c26:	2100      	movs	r1, #0
 8007c28:	2012      	movs	r0, #18
 8007c2a:	f001 fa4c 	bl	80090c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8007c2e:	2012      	movs	r0, #18
 8007c30:	f001 fa65 	bl	80090fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8007c34:	e02e      	b.n	8007c94 <HAL_ADC_MspInit+0x100>
  else if(hadc->Instance==ADC2)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a1c      	ldr	r2, [pc, #112]	; (8007cac <HAL_ADC_MspInit+0x118>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d129      	bne.n	8007c94 <HAL_ADC_MspInit+0x100>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007c40:	4b17      	ldr	r3, [pc, #92]	; (8007ca0 <HAL_ADC_MspInit+0x10c>)
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	4a16      	ldr	r2, [pc, #88]	; (8007ca0 <HAL_ADC_MspInit+0x10c>)
 8007c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007c4a:	6193      	str	r3, [r2, #24]
 8007c4c:	4b14      	ldr	r3, [pc, #80]	; (8007ca0 <HAL_ADC_MspInit+0x10c>)
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c54:	613b      	str	r3, [r7, #16]
 8007c56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c58:	4b11      	ldr	r3, [pc, #68]	; (8007ca0 <HAL_ADC_MspInit+0x10c>)
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	4a10      	ldr	r2, [pc, #64]	; (8007ca0 <HAL_ADC_MspInit+0x10c>)
 8007c5e:	f043 0304 	orr.w	r3, r3, #4
 8007c62:	6193      	str	r3, [r2, #24]
 8007c64:	4b0e      	ldr	r3, [pc, #56]	; (8007ca0 <HAL_ADC_MspInit+0x10c>)
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	f003 0304 	and.w	r3, r3, #4
 8007c6c:	60fb      	str	r3, [r7, #12]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VAC_N_Pin;
 8007c70:	2304      	movs	r3, #4
 8007c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c74:	2303      	movs	r3, #3
 8007c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VAC_N_GPIO_Port, &GPIO_InitStruct);
 8007c78:	f107 0320 	add.w	r3, r7, #32
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	480a      	ldr	r0, [pc, #40]	; (8007ca8 <HAL_ADC_MspInit+0x114>)
 8007c80:	f001 ff04 	bl	8009a8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8007c84:	2200      	movs	r2, #0
 8007c86:	2100      	movs	r1, #0
 8007c88:	2012      	movs	r0, #18
 8007c8a:	f001 fa1c 	bl	80090c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8007c8e:	2012      	movs	r0, #18
 8007c90:	f001 fa35 	bl	80090fe <HAL_NVIC_EnableIRQ>
}
 8007c94:	bf00      	nop
 8007c96:	3730      	adds	r7, #48	; 0x30
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	40012400 	.word	0x40012400
 8007ca0:	40021000 	.word	0x40021000
 8007ca4:	40011000 	.word	0x40011000
 8007ca8:	40010800 	.word	0x40010800
 8007cac:	40012800 	.word	0x40012800

08007cb0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a0b      	ldr	r2, [pc, #44]	; (8007cec <HAL_RTC_MspInit+0x3c>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d110      	bne.n	8007ce4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8007cc2:	f002 f8b9 	bl	8009e38 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8007cc6:	4b0a      	ldr	r3, [pc, #40]	; (8007cf0 <HAL_RTC_MspInit+0x40>)
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	4a09      	ldr	r2, [pc, #36]	; (8007cf0 <HAL_RTC_MspInit+0x40>)
 8007ccc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007cd0:	61d3      	str	r3, [r2, #28]
 8007cd2:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <HAL_RTC_MspInit+0x40>)
 8007cd4:	69db      	ldr	r3, [r3, #28]
 8007cd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007cde:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <HAL_RTC_MspInit+0x44>)
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007ce4:	bf00      	nop
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	40002800 	.word	0x40002800
 8007cf0:	40021000 	.word	0x40021000
 8007cf4:	4242043c 	.word	0x4242043c

08007cf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b088      	sub	sp, #32
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d00:	f107 0310 	add.w	r3, r7, #16
 8007d04:	2200      	movs	r2, #0
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	605a      	str	r2, [r3, #4]
 8007d0a:	609a      	str	r2, [r3, #8]
 8007d0c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a29      	ldr	r2, [pc, #164]	; (8007db8 <HAL_SPI_MspInit+0xc0>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d14a      	bne.n	8007dae <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007d18:	4b28      	ldr	r3, [pc, #160]	; (8007dbc <HAL_SPI_MspInit+0xc4>)
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	4a27      	ldr	r2, [pc, #156]	; (8007dbc <HAL_SPI_MspInit+0xc4>)
 8007d1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d22:	61d3      	str	r3, [r2, #28]
 8007d24:	4b25      	ldr	r3, [pc, #148]	; (8007dbc <HAL_SPI_MspInit+0xc4>)
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d2c:	60fb      	str	r3, [r7, #12]
 8007d2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d30:	4b22      	ldr	r3, [pc, #136]	; (8007dbc <HAL_SPI_MspInit+0xc4>)
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	4a21      	ldr	r2, [pc, #132]	; (8007dbc <HAL_SPI_MspInit+0xc4>)
 8007d36:	f043 0308 	orr.w	r3, r3, #8
 8007d3a:	6193      	str	r3, [r2, #24]
 8007d3c:	4b1f      	ldr	r3, [pc, #124]	; (8007dbc <HAL_SPI_MspInit+0xc4>)
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	f003 0308 	and.w	r3, r3, #8
 8007d44:	60bb      	str	r3, [r7, #8]
 8007d46:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8007d48:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8007d4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d4e:	2302      	movs	r3, #2
 8007d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007d52:	2303      	movs	r3, #3
 8007d54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d56:	f107 0310 	add.w	r3, r7, #16
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4818      	ldr	r0, [pc, #96]	; (8007dc0 <HAL_SPI_MspInit+0xc8>)
 8007d5e:	f001 fe95 	bl	8009a8c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8007d62:	4b18      	ldr	r3, [pc, #96]	; (8007dc4 <HAL_SPI_MspInit+0xcc>)
 8007d64:	4a18      	ldr	r2, [pc, #96]	; (8007dc8 <HAL_SPI_MspInit+0xd0>)
 8007d66:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007d68:	4b16      	ldr	r3, [pc, #88]	; (8007dc4 <HAL_SPI_MspInit+0xcc>)
 8007d6a:	2210      	movs	r2, #16
 8007d6c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007d6e:	4b15      	ldr	r3, [pc, #84]	; (8007dc4 <HAL_SPI_MspInit+0xcc>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007d74:	4b13      	ldr	r3, [pc, #76]	; (8007dc4 <HAL_SPI_MspInit+0xcc>)
 8007d76:	2280      	movs	r2, #128	; 0x80
 8007d78:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007d7a:	4b12      	ldr	r3, [pc, #72]	; (8007dc4 <HAL_SPI_MspInit+0xcc>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007d80:	4b10      	ldr	r3, [pc, #64]	; (8007dc4 <HAL_SPI_MspInit+0xcc>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8007d86:	4b0f      	ldr	r3, [pc, #60]	; (8007dc4 <HAL_SPI_MspInit+0xcc>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007d8c:	4b0d      	ldr	r3, [pc, #52]	; (8007dc4 <HAL_SPI_MspInit+0xcc>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8007d92:	480c      	ldr	r0, [pc, #48]	; (8007dc4 <HAL_SPI_MspInit+0xcc>)
 8007d94:	f001 f9ce 	bl	8009134 <HAL_DMA_Init>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 8007d9e:	f7ff fac9 	bl	8007334 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a07      	ldr	r2, [pc, #28]	; (8007dc4 <HAL_SPI_MspInit+0xcc>)
 8007da6:	649a      	str	r2, [r3, #72]	; 0x48
 8007da8:	4a06      	ldr	r2, [pc, #24]	; (8007dc4 <HAL_SPI_MspInit+0xcc>)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007dae:	bf00      	nop
 8007db0:	3720      	adds	r7, #32
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	40003800 	.word	0x40003800
 8007dbc:	40021000 	.word	0x40021000
 8007dc0:	40010c00 	.word	0x40010c00
 8007dc4:	200003dc 	.word	0x200003dc
 8007dc8:	40020058 	.word	0x40020058

08007dcc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a1f      	ldr	r2, [pc, #124]	; (8007e58 <HAL_TIM_PWM_MspInit+0x8c>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d114      	bne.n	8007e08 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007dde:	4b1f      	ldr	r3, [pc, #124]	; (8007e5c <HAL_TIM_PWM_MspInit+0x90>)
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	4a1e      	ldr	r2, [pc, #120]	; (8007e5c <HAL_TIM_PWM_MspInit+0x90>)
 8007de4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007de8:	6193      	str	r3, [r2, #24]
 8007dea:	4b1c      	ldr	r3, [pc, #112]	; (8007e5c <HAL_TIM_PWM_MspInit+0x90>)
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007df2:	617b      	str	r3, [r7, #20]
 8007df4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8007df6:	2200      	movs	r2, #0
 8007df8:	2100      	movs	r1, #0
 8007dfa:	2019      	movs	r0, #25
 8007dfc:	f001 f963 	bl	80090c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8007e00:	2019      	movs	r0, #25
 8007e02:	f001 f97c 	bl	80090fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8007e06:	e022      	b.n	8007e4e <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM2)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e10:	d10c      	bne.n	8007e2c <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007e12:	4b12      	ldr	r3, [pc, #72]	; (8007e5c <HAL_TIM_PWM_MspInit+0x90>)
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	4a11      	ldr	r2, [pc, #68]	; (8007e5c <HAL_TIM_PWM_MspInit+0x90>)
 8007e18:	f043 0301 	orr.w	r3, r3, #1
 8007e1c:	61d3      	str	r3, [r2, #28]
 8007e1e:	4b0f      	ldr	r3, [pc, #60]	; (8007e5c <HAL_TIM_PWM_MspInit+0x90>)
 8007e20:	69db      	ldr	r3, [r3, #28]
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	613b      	str	r3, [r7, #16]
 8007e28:	693b      	ldr	r3, [r7, #16]
}
 8007e2a:	e010      	b.n	8007e4e <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM3)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a0b      	ldr	r2, [pc, #44]	; (8007e60 <HAL_TIM_PWM_MspInit+0x94>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d10b      	bne.n	8007e4e <HAL_TIM_PWM_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007e36:	4b09      	ldr	r3, [pc, #36]	; (8007e5c <HAL_TIM_PWM_MspInit+0x90>)
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	4a08      	ldr	r2, [pc, #32]	; (8007e5c <HAL_TIM_PWM_MspInit+0x90>)
 8007e3c:	f043 0302 	orr.w	r3, r3, #2
 8007e40:	61d3      	str	r3, [r2, #28]
 8007e42:	4b06      	ldr	r3, [pc, #24]	; (8007e5c <HAL_TIM_PWM_MspInit+0x90>)
 8007e44:	69db      	ldr	r3, [r3, #28]
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
}
 8007e4e:	bf00      	nop
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	40012c00 	.word	0x40012c00
 8007e5c:	40021000 	.word	0x40021000
 8007e60:	40000400 	.word	0x40000400

08007e64 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b088      	sub	sp, #32
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e6c:	f107 0310 	add.w	r3, r7, #16
 8007e70:	2200      	movs	r2, #0
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	605a      	str	r2, [r3, #4]
 8007e76:	609a      	str	r2, [r3, #8]
 8007e78:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a19      	ldr	r2, [pc, #100]	; (8007ee4 <HAL_TIM_Encoder_MspInit+0x80>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d12b      	bne.n	8007edc <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007e84:	4b18      	ldr	r3, [pc, #96]	; (8007ee8 <HAL_TIM_Encoder_MspInit+0x84>)
 8007e86:	69db      	ldr	r3, [r3, #28]
 8007e88:	4a17      	ldr	r2, [pc, #92]	; (8007ee8 <HAL_TIM_Encoder_MspInit+0x84>)
 8007e8a:	f043 0304 	orr.w	r3, r3, #4
 8007e8e:	61d3      	str	r3, [r2, #28]
 8007e90:	4b15      	ldr	r3, [pc, #84]	; (8007ee8 <HAL_TIM_Encoder_MspInit+0x84>)
 8007e92:	69db      	ldr	r3, [r3, #28]
 8007e94:	f003 0304 	and.w	r3, r3, #4
 8007e98:	60fb      	str	r3, [r7, #12]
 8007e9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e9c:	4b12      	ldr	r3, [pc, #72]	; (8007ee8 <HAL_TIM_Encoder_MspInit+0x84>)
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	4a11      	ldr	r2, [pc, #68]	; (8007ee8 <HAL_TIM_Encoder_MspInit+0x84>)
 8007ea2:	f043 0308 	orr.w	r3, r3, #8
 8007ea6:	6193      	str	r3, [r2, #24]
 8007ea8:	4b0f      	ldr	r3, [pc, #60]	; (8007ee8 <HAL_TIM_Encoder_MspInit+0x84>)
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	f003 0308 	and.w	r3, r3, #8
 8007eb0:	60bb      	str	r3, [r7, #8]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007eb4:	23c0      	movs	r3, #192	; 0xc0
 8007eb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ec0:	f107 0310 	add.w	r3, r7, #16
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	4809      	ldr	r0, [pc, #36]	; (8007eec <HAL_TIM_Encoder_MspInit+0x88>)
 8007ec8:	f001 fde0 	bl	8009a8c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2100      	movs	r1, #0
 8007ed0:	201e      	movs	r0, #30
 8007ed2:	f001 f8f8 	bl	80090c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007ed6:	201e      	movs	r0, #30
 8007ed8:	f001 f911 	bl	80090fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007edc:	bf00      	nop
 8007ede:	3720      	adds	r7, #32
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	40000800 	.word	0x40000800
 8007ee8:	40021000 	.word	0x40021000
 8007eec:	40010c00 	.word	0x40010c00

08007ef0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b08c      	sub	sp, #48	; 0x30
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ef8:	f107 0318 	add.w	r3, r7, #24
 8007efc:	2200      	movs	r2, #0
 8007efe:	601a      	str	r2, [r3, #0]
 8007f00:	605a      	str	r2, [r3, #4]
 8007f02:	609a      	str	r2, [r3, #8]
 8007f04:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a4d      	ldr	r2, [pc, #308]	; (8008040 <HAL_TIM_MspPostInit+0x150>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d119      	bne.n	8007f44 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f10:	4b4c      	ldr	r3, [pc, #304]	; (8008044 <HAL_TIM_MspPostInit+0x154>)
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	4a4b      	ldr	r2, [pc, #300]	; (8008044 <HAL_TIM_MspPostInit+0x154>)
 8007f16:	f043 0304 	orr.w	r3, r3, #4
 8007f1a:	6193      	str	r3, [r2, #24]
 8007f1c:	4b49      	ldr	r3, [pc, #292]	; (8008044 <HAL_TIM_MspPostInit+0x154>)
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	f003 0304 	and.w	r3, r3, #4
 8007f24:	617b      	str	r3, [r7, #20]
 8007f26:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LCD_BLK_Pin;
 8007f28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f2e:	2302      	movs	r3, #2
 8007f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f32:	2302      	movs	r3, #2
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_BLK_GPIO_Port, &GPIO_InitStruct);
 8007f36:	f107 0318 	add.w	r3, r7, #24
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	4842      	ldr	r0, [pc, #264]	; (8008048 <HAL_TIM_MspPostInit+0x158>)
 8007f3e:	f001 fda5 	bl	8009a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007f42:	e078      	b.n	8008036 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM2)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f4c:	d144      	bne.n	8007fd8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f4e:	4b3d      	ldr	r3, [pc, #244]	; (8008044 <HAL_TIM_MspPostInit+0x154>)
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	4a3c      	ldr	r2, [pc, #240]	; (8008044 <HAL_TIM_MspPostInit+0x154>)
 8007f54:	f043 0308 	orr.w	r3, r3, #8
 8007f58:	6193      	str	r3, [r2, #24]
 8007f5a:	4b3a      	ldr	r3, [pc, #232]	; (8008044 <HAL_TIM_MspPostInit+0x154>)
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	f003 0308 	and.w	r3, r3, #8
 8007f62:	613b      	str	r3, [r7, #16]
 8007f64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f66:	4b37      	ldr	r3, [pc, #220]	; (8008044 <HAL_TIM_MspPostInit+0x154>)
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	4a36      	ldr	r2, [pc, #216]	; (8008044 <HAL_TIM_MspPostInit+0x154>)
 8007f6c:	f043 0304 	orr.w	r3, r3, #4
 8007f70:	6193      	str	r3, [r2, #24]
 8007f72:	4b34      	ldr	r3, [pc, #208]	; (8008044 <HAL_TIM_MspPostInit+0x154>)
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	f003 0304 	and.w	r3, r3, #4
 8007f7a:	60fb      	str	r3, [r7, #12]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_AZUL_Pin|LED_VERDE_Pin;
 8007f7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f84:	2302      	movs	r3, #2
 8007f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f88:	2302      	movs	r3, #2
 8007f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f8c:	f107 0318 	add.w	r3, r7, #24
 8007f90:	4619      	mov	r1, r3
 8007f92:	482e      	ldr	r0, [pc, #184]	; (800804c <HAL_TIM_MspPostInit+0x15c>)
 8007f94:	f001 fd7a 	bl	8009a8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_Pin;
 8007f98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8007fa6:	f107 0318 	add.w	r3, r7, #24
 8007faa:	4619      	mov	r1, r3
 8007fac:	4826      	ldr	r0, [pc, #152]	; (8008048 <HAL_TIM_MspPostInit+0x158>)
 8007fae:	f001 fd6d 	bl	8009a8c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_ENABLE();
 8007fb2:	4b27      	ldr	r3, [pc, #156]	; (8008050 <HAL_TIM_MspPostInit+0x160>)
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8007fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fd0:	4a1f      	ldr	r2, [pc, #124]	; (8008050 <HAL_TIM_MspPostInit+0x160>)
 8007fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd4:	6053      	str	r3, [r2, #4]
}
 8007fd6:	e02e      	b.n	8008036 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM3)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a1d      	ldr	r2, [pc, #116]	; (8008054 <HAL_TIM_MspPostInit+0x164>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d129      	bne.n	8008036 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007fe2:	4b18      	ldr	r3, [pc, #96]	; (8008044 <HAL_TIM_MspPostInit+0x154>)
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	4a17      	ldr	r2, [pc, #92]	; (8008044 <HAL_TIM_MspPostInit+0x154>)
 8007fe8:	f043 0310 	orr.w	r3, r3, #16
 8007fec:	6193      	str	r3, [r2, #24]
 8007fee:	4b15      	ldr	r3, [pc, #84]	; (8008044 <HAL_TIM_MspPostInit+0x154>)
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	f003 0310 	and.w	r3, r3, #16
 8007ff6:	60bb      	str	r3, [r7, #8]
 8007ff8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LED_VERMELHO_Pin;
 8007ffa:	2340      	movs	r3, #64	; 0x40
 8007ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ffe:	2302      	movs	r3, #2
 8008000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008002:	2302      	movs	r3, #2
 8008004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_VERMELHO_GPIO_Port, &GPIO_InitStruct);
 8008006:	f107 0318 	add.w	r3, r7, #24
 800800a:	4619      	mov	r1, r3
 800800c:	4812      	ldr	r0, [pc, #72]	; (8008058 <HAL_TIM_MspPostInit+0x168>)
 800800e:	f001 fd3d 	bl	8009a8c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8008012:	4b0f      	ldr	r3, [pc, #60]	; (8008050 <HAL_TIM_MspPostInit+0x160>)
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800801e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008022:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8008026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800802e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008030:	4a07      	ldr	r2, [pc, #28]	; (8008050 <HAL_TIM_MspPostInit+0x160>)
 8008032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008034:	6053      	str	r3, [r2, #4]
}
 8008036:	bf00      	nop
 8008038:	3730      	adds	r7, #48	; 0x30
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	40012c00 	.word	0x40012c00
 8008044:	40021000 	.word	0x40021000
 8008048:	40010800 	.word	0x40010800
 800804c:	40010c00 	.word	0x40010c00
 8008050:	40010000 	.word	0x40010000
 8008054:	40000400 	.word	0x40000400
 8008058:	40011000 	.word	0x40011000

0800805c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b088      	sub	sp, #32
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008064:	f107 0310 	add.w	r3, r7, #16
 8008068:	2200      	movs	r2, #0
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	605a      	str	r2, [r3, #4]
 800806e:	609a      	str	r2, [r3, #8]
 8008070:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a20      	ldr	r2, [pc, #128]	; (80080f8 <HAL_UART_MspInit+0x9c>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d139      	bne.n	80080f0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800807c:	4b1f      	ldr	r3, [pc, #124]	; (80080fc <HAL_UART_MspInit+0xa0>)
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	4a1e      	ldr	r2, [pc, #120]	; (80080fc <HAL_UART_MspInit+0xa0>)
 8008082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008086:	6193      	str	r3, [r2, #24]
 8008088:	4b1c      	ldr	r3, [pc, #112]	; (80080fc <HAL_UART_MspInit+0xa0>)
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008090:	60fb      	str	r3, [r7, #12]
 8008092:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008094:	4b19      	ldr	r3, [pc, #100]	; (80080fc <HAL_UART_MspInit+0xa0>)
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	4a18      	ldr	r2, [pc, #96]	; (80080fc <HAL_UART_MspInit+0xa0>)
 800809a:	f043 0304 	orr.w	r3, r3, #4
 800809e:	6193      	str	r3, [r2, #24]
 80080a0:	4b16      	ldr	r3, [pc, #88]	; (80080fc <HAL_UART_MspInit+0xa0>)
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	f003 0304 	and.w	r3, r3, #4
 80080a8:	60bb      	str	r3, [r7, #8]
 80080aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80080ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080b2:	2302      	movs	r3, #2
 80080b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80080b6:	2303      	movs	r3, #3
 80080b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080ba:	f107 0310 	add.w	r3, r7, #16
 80080be:	4619      	mov	r1, r3
 80080c0:	480f      	ldr	r0, [pc, #60]	; (8008100 <HAL_UART_MspInit+0xa4>)
 80080c2:	f001 fce3 	bl	8009a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80080c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80080cc:	2300      	movs	r3, #0
 80080ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080d0:	2300      	movs	r3, #0
 80080d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080d4:	f107 0310 	add.w	r3, r7, #16
 80080d8:	4619      	mov	r1, r3
 80080da:	4809      	ldr	r0, [pc, #36]	; (8008100 <HAL_UART_MspInit+0xa4>)
 80080dc:	f001 fcd6 	bl	8009a8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80080e0:	2200      	movs	r2, #0
 80080e2:	2100      	movs	r1, #0
 80080e4:	2025      	movs	r0, #37	; 0x25
 80080e6:	f000 ffee 	bl	80090c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80080ea:	2025      	movs	r0, #37	; 0x25
 80080ec:	f001 f807 	bl	80090fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80080f0:	bf00      	nop
 80080f2:	3720      	adds	r7, #32
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	40013800 	.word	0x40013800
 80080fc:	40021000 	.word	0x40021000
 8008100:	40010800 	.word	0x40010800

08008104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008104:	b480      	push	{r7}
 8008106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008108:	e7fe      	b.n	8008108 <NMI_Handler+0x4>

0800810a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800810a:	b480      	push	{r7}
 800810c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800810e:	e7fe      	b.n	800810e <HardFault_Handler+0x4>

08008110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008110:	b480      	push	{r7}
 8008112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008114:	e7fe      	b.n	8008114 <MemManage_Handler+0x4>

08008116 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008116:	b480      	push	{r7}
 8008118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800811a:	e7fe      	b.n	800811a <BusFault_Handler+0x4>

0800811c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800811c:	b480      	push	{r7}
 800811e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008120:	e7fe      	b.n	8008120 <UsageFault_Handler+0x4>

08008122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008122:	b480      	push	{r7}
 8008124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008126:	bf00      	nop
 8008128:	46bd      	mov	sp, r7
 800812a:	bc80      	pop	{r7}
 800812c:	4770      	bx	lr

0800812e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800812e:	b480      	push	{r7}
 8008130:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008132:	bf00      	nop
 8008134:	46bd      	mov	sp, r7
 8008136:	bc80      	pop	{r7}
 8008138:	4770      	bx	lr

0800813a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800813a:	b480      	push	{r7}
 800813c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800813e:	bf00      	nop
 8008140:	46bd      	mov	sp, r7
 8008142:	bc80      	pop	{r7}
 8008144:	4770      	bx	lr

08008146 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800814a:	f000 f973 	bl	8008434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800814e:	bf00      	nop
 8008150:	bd80      	pop	{r7, pc}
	...

08008154 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8008158:	4802      	ldr	r0, [pc, #8]	; (8008164 <DMA1_Channel5_IRQHandler+0x10>)
 800815a:	f001 f959 	bl	8009410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800815e:	bf00      	nop
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	200003dc 	.word	0x200003dc

08008168 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800816c:	4803      	ldr	r0, [pc, #12]	; (800817c <ADC1_2_IRQHandler+0x14>)
 800816e:	f000 fc65 	bl	8008a3c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8008172:	4803      	ldr	r0, [pc, #12]	; (8008180 <ADC1_2_IRQHandler+0x18>)
 8008174:	f000 fc62 	bl	8008a3c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8008178:	bf00      	nop
 800817a:	bd80      	pop	{r7, pc}
 800817c:	20000310 	.word	0x20000310
 8008180:	20000340 	.word	0x20000340

08008184 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
#ifndef VersaoPublica
	Flag_Button = SET;
#endif
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8008188:	2020      	movs	r0, #32
 800818a:	f001 fe33 	bl	8009df4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800818e:	bf00      	nop
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008198:	4802      	ldr	r0, [pc, #8]	; (80081a4 <TIM1_UP_IRQHandler+0x10>)
 800819a:	f003 fdd9 	bl	800bd50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800819e:	bf00      	nop
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20000420 	.word	0x20000420

080081a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80081ac:	4802      	ldr	r0, [pc, #8]	; (80081b8 <TIM4_IRQHandler+0x10>)
 80081ae:	f003 fdcf 	bl	800bd50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80081b2:	bf00      	nop
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	200004f8 	.word	0x200004f8

080081bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80081c0:	4802      	ldr	r0, [pc, #8]	; (80081cc <USART1_IRQHandler+0x10>)
 80081c2:	f004 fbb3 	bl	800c92c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80081c6:	bf00      	nop
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	20000540 	.word	0x20000540

080081d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80081d0:	b480      	push	{r7}
 80081d2:	af00      	add	r7, sp, #0
  return 1;
 80081d4:	2301      	movs	r3, #1
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr

080081de <_kill>:

int _kill(int pid, int sig)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b082      	sub	sp, #8
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80081e8:	f005 f91e 	bl	800d428 <__errno>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2216      	movs	r2, #22
 80081f0:	601a      	str	r2, [r3, #0]
  return -1;
 80081f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <_exit>:

void _exit (int status)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b082      	sub	sp, #8
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008206:	f04f 31ff 	mov.w	r1, #4294967295
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7ff ffe7 	bl	80081de <_kill>
  while (1) {}    /* Make sure we hang here */
 8008210:	e7fe      	b.n	8008210 <_exit+0x12>

08008212 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b086      	sub	sp, #24
 8008216:	af00      	add	r7, sp, #0
 8008218:	60f8      	str	r0, [r7, #12]
 800821a:	60b9      	str	r1, [r7, #8]
 800821c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800821e:	2300      	movs	r3, #0
 8008220:	617b      	str	r3, [r7, #20]
 8008222:	e00a      	b.n	800823a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008224:	f3af 8000 	nop.w
 8008228:	4601      	mov	r1, r0
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	1c5a      	adds	r2, r3, #1
 800822e:	60ba      	str	r2, [r7, #8]
 8008230:	b2ca      	uxtb	r2, r1
 8008232:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	3301      	adds	r3, #1
 8008238:	617b      	str	r3, [r7, #20]
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	429a      	cmp	r2, r3
 8008240:	dbf0      	blt.n	8008224 <_read+0x12>
  }

  return len;
 8008242:	687b      	ldr	r3, [r7, #4]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3718      	adds	r7, #24
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008258:	2300      	movs	r3, #0
 800825a:	617b      	str	r3, [r7, #20]
 800825c:	e009      	b.n	8008272 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	1c5a      	adds	r2, r3, #1
 8008262:	60ba      	str	r2, [r7, #8]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	4618      	mov	r0, r3
 8008268:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	3301      	adds	r3, #1
 8008270:	617b      	str	r3, [r7, #20]
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	429a      	cmp	r2, r3
 8008278:	dbf1      	blt.n	800825e <_write+0x12>
  }
  return len;
 800827a:	687b      	ldr	r3, [r7, #4]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3718      	adds	r7, #24
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <_close>:

int _close(int file)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800828c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008290:	4618      	mov	r0, r3
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	bc80      	pop	{r7}
 8008298:	4770      	bx	lr

0800829a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800829a:	b480      	push	{r7}
 800829c:	b083      	sub	sp, #12
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80082aa:	605a      	str	r2, [r3, #4]
  return 0;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bc80      	pop	{r7}
 80082b6:	4770      	bx	lr

080082b8 <_isatty>:

int _isatty(int file)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80082c0:	2301      	movs	r3, #1
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bc80      	pop	{r7}
 80082ca:	4770      	bx	lr

080082cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	bc80      	pop	{r7}
 80082e2:	4770      	bx	lr

080082e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80082ec:	4a14      	ldr	r2, [pc, #80]	; (8008340 <_sbrk+0x5c>)
 80082ee:	4b15      	ldr	r3, [pc, #84]	; (8008344 <_sbrk+0x60>)
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80082f8:	4b13      	ldr	r3, [pc, #76]	; (8008348 <_sbrk+0x64>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d102      	bne.n	8008306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008300:	4b11      	ldr	r3, [pc, #68]	; (8008348 <_sbrk+0x64>)
 8008302:	4a12      	ldr	r2, [pc, #72]	; (800834c <_sbrk+0x68>)
 8008304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008306:	4b10      	ldr	r3, [pc, #64]	; (8008348 <_sbrk+0x64>)
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4413      	add	r3, r2
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	429a      	cmp	r2, r3
 8008312:	d207      	bcs.n	8008324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008314:	f005 f888 	bl	800d428 <__errno>
 8008318:	4603      	mov	r3, r0
 800831a:	220c      	movs	r2, #12
 800831c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800831e:	f04f 33ff 	mov.w	r3, #4294967295
 8008322:	e009      	b.n	8008338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008324:	4b08      	ldr	r3, [pc, #32]	; (8008348 <_sbrk+0x64>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800832a:	4b07      	ldr	r3, [pc, #28]	; (8008348 <_sbrk+0x64>)
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4413      	add	r3, r2
 8008332:	4a05      	ldr	r2, [pc, #20]	; (8008348 <_sbrk+0x64>)
 8008334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008336:	68fb      	ldr	r3, [r7, #12]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3718      	adds	r7, #24
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	20005000 	.word	0x20005000
 8008344:	00000400 	.word	0x00000400
 8008348:	200007dc 	.word	0x200007dc
 800834c:	20000818 	.word	0x20000818

08008350 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008350:	b480      	push	{r7}
 8008352:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008354:	bf00      	nop
 8008356:	46bd      	mov	sp, r7
 8008358:	bc80      	pop	{r7}
 800835a:	4770      	bx	lr

0800835c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800835c:	f7ff fff8 	bl	8008350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008360:	480b      	ldr	r0, [pc, #44]	; (8008390 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8008362:	490c      	ldr	r1, [pc, #48]	; (8008394 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8008364:	4a0c      	ldr	r2, [pc, #48]	; (8008398 <LoopFillZerobss+0x16>)
  movs r3, #0
 8008366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008368:	e002      	b.n	8008370 <LoopCopyDataInit>

0800836a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800836a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800836c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800836e:	3304      	adds	r3, #4

08008370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008374:	d3f9      	bcc.n	800836a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008376:	4a09      	ldr	r2, [pc, #36]	; (800839c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8008378:	4c09      	ldr	r4, [pc, #36]	; (80083a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800837a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800837c:	e001      	b.n	8008382 <LoopFillZerobss>

0800837e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800837e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008380:	3204      	adds	r2, #4

08008382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008384:	d3fb      	bcc.n	800837e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008386:	f005 f855 	bl	800d434 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800838a:	f7fe f835 	bl	80063f8 <main>
  bx lr
 800838e:	4770      	bx	lr
  ldr r0, =_sdata
 8008390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008394:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8008398:	080130f4 	.word	0x080130f4
  ldr r2, =_sbss
 800839c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80083a0:	20000818 	.word	0x20000818

080083a4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80083a4:	e7fe      	b.n	80083a4 <CAN1_RX1_IRQHandler>
	...

080083a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80083ac:	4b08      	ldr	r3, [pc, #32]	; (80083d0 <HAL_Init+0x28>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a07      	ldr	r2, [pc, #28]	; (80083d0 <HAL_Init+0x28>)
 80083b2:	f043 0310 	orr.w	r3, r3, #16
 80083b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80083b8:	2003      	movs	r0, #3
 80083ba:	f000 fe79 	bl	80090b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80083be:	200f      	movs	r0, #15
 80083c0:	f000 f808 	bl	80083d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80083c4:	f7ff fbb4 	bl	8007b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	40022000 	.word	0x40022000

080083d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80083dc:	4b12      	ldr	r3, [pc, #72]	; (8008428 <HAL_InitTick+0x54>)
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	4b12      	ldr	r3, [pc, #72]	; (800842c <HAL_InitTick+0x58>)
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	4619      	mov	r1, r3
 80083e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80083ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80083ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 fe91 	bl	800911a <HAL_SYSTICK_Config>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e00e      	b.n	8008420 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2b0f      	cmp	r3, #15
 8008406:	d80a      	bhi.n	800841e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008408:	2200      	movs	r2, #0
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	f04f 30ff 	mov.w	r0, #4294967295
 8008410:	f000 fe59 	bl	80090c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008414:	4a06      	ldr	r2, [pc, #24]	; (8008430 <HAL_InitTick+0x5c>)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	e000      	b.n	8008420 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
}
 8008420:	4618      	mov	r0, r3
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	20000038 	.word	0x20000038
 800842c:	20000040 	.word	0x20000040
 8008430:	2000003c 	.word	0x2000003c

08008434 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008434:	b480      	push	{r7}
 8008436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008438:	4b05      	ldr	r3, [pc, #20]	; (8008450 <HAL_IncTick+0x1c>)
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	461a      	mov	r2, r3
 800843e:	4b05      	ldr	r3, [pc, #20]	; (8008454 <HAL_IncTick+0x20>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4413      	add	r3, r2
 8008444:	4a03      	ldr	r2, [pc, #12]	; (8008454 <HAL_IncTick+0x20>)
 8008446:	6013      	str	r3, [r2, #0]
}
 8008448:	bf00      	nop
 800844a:	46bd      	mov	sp, r7
 800844c:	bc80      	pop	{r7}
 800844e:	4770      	bx	lr
 8008450:	20000040 	.word	0x20000040
 8008454:	200007e0 	.word	0x200007e0

08008458 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008458:	b480      	push	{r7}
 800845a:	af00      	add	r7, sp, #0
  return uwTick;
 800845c:	4b02      	ldr	r3, [pc, #8]	; (8008468 <HAL_GetTick+0x10>)
 800845e:	681b      	ldr	r3, [r3, #0]
}
 8008460:	4618      	mov	r0, r3
 8008462:	46bd      	mov	sp, r7
 8008464:	bc80      	pop	{r7}
 8008466:	4770      	bx	lr
 8008468:	200007e0 	.word	0x200007e0

0800846c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008474:	f7ff fff0 	bl	8008458 <HAL_GetTick>
 8008478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008484:	d005      	beq.n	8008492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008486:	4b0a      	ldr	r3, [pc, #40]	; (80084b0 <HAL_Delay+0x44>)
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	461a      	mov	r2, r3
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4413      	add	r3, r2
 8008490:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008492:	bf00      	nop
 8008494:	f7ff ffe0 	bl	8008458 <HAL_GetTick>
 8008498:	4602      	mov	r2, r0
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d8f7      	bhi.n	8008494 <HAL_Delay+0x28>
  {
  }
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	20000040 	.word	0x20000040

080084b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e0be      	b.n	8008654 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d109      	bne.n	80084f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7ff fb4e 	bl	8007b94 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fcc3 	bl	8008e84 <ADC_ConversionStop_Disable>
 80084fe:	4603      	mov	r3, r0
 8008500:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008506:	f003 0310 	and.w	r3, r3, #16
 800850a:	2b00      	cmp	r3, #0
 800850c:	f040 8099 	bne.w	8008642 <HAL_ADC_Init+0x18e>
 8008510:	7dfb      	ldrb	r3, [r7, #23]
 8008512:	2b00      	cmp	r3, #0
 8008514:	f040 8095 	bne.w	8008642 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008520:	f023 0302 	bic.w	r3, r3, #2
 8008524:	f043 0202 	orr.w	r2, r3, #2
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8008534:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	7b1b      	ldrb	r3, [r3, #12]
 800853a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800853c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800853e:	68ba      	ldr	r2, [r7, #8]
 8008540:	4313      	orrs	r3, r2
 8008542:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800854c:	d003      	beq.n	8008556 <HAL_ADC_Init+0xa2>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d102      	bne.n	800855c <HAL_ADC_Init+0xa8>
 8008556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800855a:	e000      	b.n	800855e <HAL_ADC_Init+0xaa>
 800855c:	2300      	movs	r3, #0
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	4313      	orrs	r3, r2
 8008562:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	7d1b      	ldrb	r3, [r3, #20]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d119      	bne.n	80085a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	7b1b      	ldrb	r3, [r3, #12]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d109      	bne.n	8008588 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	3b01      	subs	r3, #1
 800857a:	035a      	lsls	r2, r3, #13
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	4313      	orrs	r3, r2
 8008580:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008584:	613b      	str	r3, [r7, #16]
 8008586:	e00b      	b.n	80085a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858c:	f043 0220 	orr.w	r2, r3, #32
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008598:	f043 0201 	orr.w	r2, r3, #1
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	693a      	ldr	r2, [r7, #16]
 80085b0:	430a      	orrs	r2, r1
 80085b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	689a      	ldr	r2, [r3, #8]
 80085ba:	4b28      	ldr	r3, [pc, #160]	; (800865c <HAL_ADC_Init+0x1a8>)
 80085bc:	4013      	ands	r3, r2
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	6812      	ldr	r2, [r2, #0]
 80085c2:	68b9      	ldr	r1, [r7, #8]
 80085c4:	430b      	orrs	r3, r1
 80085c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085d0:	d003      	beq.n	80085da <HAL_ADC_Init+0x126>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d104      	bne.n	80085e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	3b01      	subs	r3, #1
 80085e0:	051b      	lsls	r3, r3, #20
 80085e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	430a      	orrs	r2, r1
 80085f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	689a      	ldr	r2, [r3, #8]
 80085fe:	4b18      	ldr	r3, [pc, #96]	; (8008660 <HAL_ADC_Init+0x1ac>)
 8008600:	4013      	ands	r3, r2
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	429a      	cmp	r2, r3
 8008606:	d10b      	bne.n	8008620 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008612:	f023 0303 	bic.w	r3, r3, #3
 8008616:	f043 0201 	orr.w	r2, r3, #1
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800861e:	e018      	b.n	8008652 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008624:	f023 0312 	bic.w	r3, r3, #18
 8008628:	f043 0210 	orr.w	r2, r3, #16
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008634:	f043 0201 	orr.w	r2, r3, #1
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8008640:	e007      	b.n	8008652 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008646:	f043 0210 	orr.w	r2, r3, #16
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8008652:	7dfb      	ldrb	r3, [r7, #23]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3718      	adds	r7, #24
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	ffe1f7fd 	.word	0xffe1f7fd
 8008660:	ff1f0efe 	.word	0xff1f0efe

08008664 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008676:	2b01      	cmp	r3, #1
 8008678:	d101      	bne.n	800867e <HAL_ADC_Start+0x1a>
 800867a:	2302      	movs	r3, #2
 800867c:	e098      	b.n	80087b0 <HAL_ADC_Start+0x14c>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 fba2 	bl	8008dd0 <ADC_Enable>
 800868c:	4603      	mov	r3, r0
 800868e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8008690:	7bfb      	ldrb	r3, [r7, #15]
 8008692:	2b00      	cmp	r3, #0
 8008694:	f040 8087 	bne.w	80087a6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086a0:	f023 0301 	bic.w	r3, r3, #1
 80086a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a41      	ldr	r2, [pc, #260]	; (80087b8 <HAL_ADC_Start+0x154>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d105      	bne.n	80086c2 <HAL_ADC_Start+0x5e>
 80086b6:	4b41      	ldr	r3, [pc, #260]	; (80087bc <HAL_ADC_Start+0x158>)
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d115      	bne.n	80086ee <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d026      	beq.n	800872a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80086e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80086ec:	e01d      	b.n	800872a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a2f      	ldr	r2, [pc, #188]	; (80087bc <HAL_ADC_Start+0x158>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d004      	beq.n	800870e <HAL_ADC_Start+0xaa>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a2b      	ldr	r2, [pc, #172]	; (80087b8 <HAL_ADC_Start+0x154>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d10d      	bne.n	800872a <HAL_ADC_Start+0xc6>
 800870e:	4b2b      	ldr	r3, [pc, #172]	; (80087bc <HAL_ADC_Start+0x158>)
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008716:	2b00      	cmp	r3, #0
 8008718:	d007      	beq.n	800872a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008722:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d006      	beq.n	8008744 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873a:	f023 0206 	bic.w	r2, r3, #6
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	62da      	str	r2, [r3, #44]	; 0x2c
 8008742:	e002      	b.n	800874a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f06f 0202 	mvn.w	r2, #2
 800875a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8008766:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800876a:	d113      	bne.n	8008794 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8008770:	4a11      	ldr	r2, [pc, #68]	; (80087b8 <HAL_ADC_Start+0x154>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d105      	bne.n	8008782 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8008776:	4b11      	ldr	r3, [pc, #68]	; (80087bc <HAL_ADC_Start+0x158>)
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800877e:	2b00      	cmp	r3, #0
 8008780:	d108      	bne.n	8008794 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	689a      	ldr	r2, [r3, #8]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8008790:	609a      	str	r2, [r3, #8]
 8008792:	e00c      	b.n	80087ae <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	689a      	ldr	r2, [r3, #8]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80087a2:	609a      	str	r2, [r3, #8]
 80087a4:	e003      	b.n	80087ae <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	40012800 	.word	0x40012800
 80087bc:	40012400 	.word	0x40012400

080087c0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d101      	bne.n	80087da <HAL_ADC_Stop+0x1a>
 80087d6:	2302      	movs	r3, #2
 80087d8:	e01a      	b.n	8008810 <HAL_ADC_Stop+0x50>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fb4e 	bl	8008e84 <ADC_ConversionStop_Disable>
 80087e8:	4603      	mov	r3, r0
 80087ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d109      	bne.n	8008806 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80087fa:	f023 0301 	bic.w	r3, r3, #1
 80087fe:	f043 0201 	orr.w	r2, r3, #1
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800880e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8008818:	b590      	push	{r4, r7, lr}
 800881a:	b087      	sub	sp, #28
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008822:	2300      	movs	r3, #0
 8008824:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8008826:	2300      	movs	r3, #0
 8008828:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800882a:	2300      	movs	r3, #0
 800882c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800882e:	f7ff fe13 	bl	8008458 <HAL_GetTick>
 8008832:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00b      	beq.n	800885a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008846:	f043 0220 	orr.w	r2, r3, #32
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e0d3      	b.n	8008a02 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008864:	2b00      	cmp	r3, #0
 8008866:	d131      	bne.n	80088cc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8008872:	2b00      	cmp	r3, #0
 8008874:	d12a      	bne.n	80088cc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8008876:	e021      	b.n	80088bc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887e:	d01d      	beq.n	80088bc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d007      	beq.n	8008896 <HAL_ADC_PollForConversion+0x7e>
 8008886:	f7ff fde7 	bl	8008458 <HAL_GetTick>
 800888a:	4602      	mov	r2, r0
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	429a      	cmp	r2, r3
 8008894:	d212      	bcs.n	80088bc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0302 	and.w	r3, r3, #2
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10b      	bne.n	80088bc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a8:	f043 0204 	orr.w	r2, r3, #4
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e0a2      	b.n	8008a02 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0302 	and.w	r3, r3, #2
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0d6      	beq.n	8008878 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80088ca:	e070      	b.n	80089ae <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80088cc:	4b4f      	ldr	r3, [pc, #316]	; (8008a0c <HAL_ADC_PollForConversion+0x1f4>)
 80088ce:	681c      	ldr	r4, [r3, #0]
 80088d0:	2002      	movs	r0, #2
 80088d2:	f001 ff85 	bl	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80088d6:	4603      	mov	r3, r0
 80088d8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6919      	ldr	r1, [r3, #16]
 80088e2:	4b4b      	ldr	r3, [pc, #300]	; (8008a10 <HAL_ADC_PollForConversion+0x1f8>)
 80088e4:	400b      	ands	r3, r1
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d118      	bne.n	800891c <HAL_ADC_PollForConversion+0x104>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68d9      	ldr	r1, [r3, #12]
 80088f0:	4b48      	ldr	r3, [pc, #288]	; (8008a14 <HAL_ADC_PollForConversion+0x1fc>)
 80088f2:	400b      	ands	r3, r1
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d111      	bne.n	800891c <HAL_ADC_PollForConversion+0x104>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6919      	ldr	r1, [r3, #16]
 80088fe:	4b46      	ldr	r3, [pc, #280]	; (8008a18 <HAL_ADC_PollForConversion+0x200>)
 8008900:	400b      	ands	r3, r1
 8008902:	2b00      	cmp	r3, #0
 8008904:	d108      	bne.n	8008918 <HAL_ADC_PollForConversion+0x100>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	68d9      	ldr	r1, [r3, #12]
 800890c:	4b43      	ldr	r3, [pc, #268]	; (8008a1c <HAL_ADC_PollForConversion+0x204>)
 800890e:	400b      	ands	r3, r1
 8008910:	2b00      	cmp	r3, #0
 8008912:	d101      	bne.n	8008918 <HAL_ADC_PollForConversion+0x100>
 8008914:	2314      	movs	r3, #20
 8008916:	e020      	b.n	800895a <HAL_ADC_PollForConversion+0x142>
 8008918:	2329      	movs	r3, #41	; 0x29
 800891a:	e01e      	b.n	800895a <HAL_ADC_PollForConversion+0x142>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6919      	ldr	r1, [r3, #16]
 8008922:	4b3d      	ldr	r3, [pc, #244]	; (8008a18 <HAL_ADC_PollForConversion+0x200>)
 8008924:	400b      	ands	r3, r1
 8008926:	2b00      	cmp	r3, #0
 8008928:	d106      	bne.n	8008938 <HAL_ADC_PollForConversion+0x120>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68d9      	ldr	r1, [r3, #12]
 8008930:	4b3a      	ldr	r3, [pc, #232]	; (8008a1c <HAL_ADC_PollForConversion+0x204>)
 8008932:	400b      	ands	r3, r1
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00d      	beq.n	8008954 <HAL_ADC_PollForConversion+0x13c>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6919      	ldr	r1, [r3, #16]
 800893e:	4b38      	ldr	r3, [pc, #224]	; (8008a20 <HAL_ADC_PollForConversion+0x208>)
 8008940:	400b      	ands	r3, r1
 8008942:	2b00      	cmp	r3, #0
 8008944:	d108      	bne.n	8008958 <HAL_ADC_PollForConversion+0x140>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68d9      	ldr	r1, [r3, #12]
 800894c:	4b34      	ldr	r3, [pc, #208]	; (8008a20 <HAL_ADC_PollForConversion+0x208>)
 800894e:	400b      	ands	r3, r1
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <HAL_ADC_PollForConversion+0x140>
 8008954:	2354      	movs	r3, #84	; 0x54
 8008956:	e000      	b.n	800895a <HAL_ADC_PollForConversion+0x142>
 8008958:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800895a:	fb02 f303 	mul.w	r3, r2, r3
 800895e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8008960:	e021      	b.n	80089a6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008968:	d01a      	beq.n	80089a0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d007      	beq.n	8008980 <HAL_ADC_PollForConversion+0x168>
 8008970:	f7ff fd72 	bl	8008458 <HAL_GetTick>
 8008974:	4602      	mov	r2, r0
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	429a      	cmp	r2, r3
 800897e:	d20f      	bcs.n	80089a0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	693a      	ldr	r2, [r7, #16]
 8008984:	429a      	cmp	r2, r3
 8008986:	d90b      	bls.n	80089a0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898c:	f043 0204 	orr.w	r2, r3, #4
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800899c:	2303      	movs	r3, #3
 800899e:	e030      	b.n	8008a02 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	3301      	adds	r3, #1
 80089a4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d8d9      	bhi.n	8008962 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f06f 0212 	mvn.w	r2, #18
 80089b6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80089ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80089d2:	d115      	bne.n	8008a00 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d111      	bne.n	8008a00 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d105      	bne.n	8008a00 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f8:	f043 0201 	orr.w	r2, r3, #1
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	371c      	adds	r7, #28
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd90      	pop	{r4, r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20000038 	.word	0x20000038
 8008a10:	24924924 	.word	0x24924924
 8008a14:	00924924 	.word	0x00924924
 8008a18:	12492492 	.word	0x12492492
 8008a1c:	00492492 	.word	0x00492492
 8008a20:	00249249 	.word	0x00249249

08008a24 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bc80      	pop	{r7}
 8008a3a:	4770      	bx	lr

08008a3c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	f003 0320 	and.w	r3, r3, #32
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d03e      	beq.n	8008adc <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f003 0302 	and.w	r3, r3, #2
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d039      	beq.n	8008adc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a6c:	f003 0310 	and.w	r3, r3, #16
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d105      	bne.n	8008a80 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8008a8a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8008a8e:	d11d      	bne.n	8008acc <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d119      	bne.n	8008acc <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	685a      	ldr	r2, [r3, #4]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 0220 	bic.w	r2, r2, #32
 8008aa6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d105      	bne.n	8008acc <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac4:	f043 0201 	orr.w	r2, r3, #1
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f874 	bl	8008bba <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f06f 0212 	mvn.w	r2, #18
 8008ada:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d04d      	beq.n	8008b82 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d048      	beq.n	8008b82 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af4:	f003 0310 	and.w	r3, r3, #16
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d105      	bne.n	8008b08 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b00:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008b12:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8008b16:	d012      	beq.n	8008b3e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d125      	bne.n	8008b72 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8008b30:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8008b34:	d11d      	bne.n	8008b72 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d119      	bne.n	8008b72 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b4c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d105      	bne.n	8008b72 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6a:	f043 0201 	orr.w	r2, r3, #1
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f9c7 	bl	8008f06 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f06f 020c 	mvn.w	r2, #12
 8008b80:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d012      	beq.n	8008bb2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00d      	beq.n	8008bb2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f812 	bl	8008bcc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f06f 0201 	mvn.w	r2, #1
 8008bb0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8008bb2:	bf00      	nop
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8008bc2:	bf00      	nop
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bc80      	pop	{r7}
 8008bca:	4770      	bx	lr

08008bcc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bc80      	pop	{r7}
 8008bdc:	4770      	bx	lr
	...

08008be0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d101      	bne.n	8008c00 <HAL_ADC_ConfigChannel+0x20>
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	e0dc      	b.n	8008dba <HAL_ADC_ConfigChannel+0x1da>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	2b06      	cmp	r3, #6
 8008c0e:	d81c      	bhi.n	8008c4a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	685a      	ldr	r2, [r3, #4]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	3b05      	subs	r3, #5
 8008c22:	221f      	movs	r2, #31
 8008c24:	fa02 f303 	lsl.w	r3, r2, r3
 8008c28:	43db      	mvns	r3, r3
 8008c2a:	4019      	ands	r1, r3
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	6818      	ldr	r0, [r3, #0]
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	685a      	ldr	r2, [r3, #4]
 8008c34:	4613      	mov	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	3b05      	subs	r3, #5
 8008c3c:	fa00 f203 	lsl.w	r2, r0, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	635a      	str	r2, [r3, #52]	; 0x34
 8008c48:	e03c      	b.n	8008cc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	2b0c      	cmp	r3, #12
 8008c50:	d81c      	bhi.n	8008c8c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4413      	add	r3, r2
 8008c62:	3b23      	subs	r3, #35	; 0x23
 8008c64:	221f      	movs	r2, #31
 8008c66:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6a:	43db      	mvns	r3, r3
 8008c6c:	4019      	ands	r1, r3
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	6818      	ldr	r0, [r3, #0]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	685a      	ldr	r2, [r3, #4]
 8008c76:	4613      	mov	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4413      	add	r3, r2
 8008c7c:	3b23      	subs	r3, #35	; 0x23
 8008c7e:	fa00 f203 	lsl.w	r2, r0, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	430a      	orrs	r2, r1
 8008c88:	631a      	str	r2, [r3, #48]	; 0x30
 8008c8a:	e01b      	b.n	8008cc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	4613      	mov	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	3b41      	subs	r3, #65	; 0x41
 8008c9e:	221f      	movs	r2, #31
 8008ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca4:	43db      	mvns	r3, r3
 8008ca6:	4019      	ands	r1, r3
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	6818      	ldr	r0, [r3, #0]
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	685a      	ldr	r2, [r3, #4]
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	4413      	add	r3, r2
 8008cb6:	3b41      	subs	r3, #65	; 0x41
 8008cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	430a      	orrs	r2, r1
 8008cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b09      	cmp	r3, #9
 8008cca:	d91c      	bls.n	8008d06 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	68d9      	ldr	r1, [r3, #12]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	005b      	lsls	r3, r3, #1
 8008cda:	4413      	add	r3, r2
 8008cdc:	3b1e      	subs	r3, #30
 8008cde:	2207      	movs	r2, #7
 8008ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce4:	43db      	mvns	r3, r3
 8008ce6:	4019      	ands	r1, r3
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	6898      	ldr	r0, [r3, #8]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	005b      	lsls	r3, r3, #1
 8008cf4:	4413      	add	r3, r2
 8008cf6:	3b1e      	subs	r3, #30
 8008cf8:	fa00 f203 	lsl.w	r2, r0, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	430a      	orrs	r2, r1
 8008d02:	60da      	str	r2, [r3, #12]
 8008d04:	e019      	b.n	8008d3a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	6919      	ldr	r1, [r3, #16]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	4613      	mov	r3, r2
 8008d12:	005b      	lsls	r3, r3, #1
 8008d14:	4413      	add	r3, r2
 8008d16:	2207      	movs	r2, #7
 8008d18:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1c:	43db      	mvns	r3, r3
 8008d1e:	4019      	ands	r1, r3
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	6898      	ldr	r0, [r3, #8]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	4613      	mov	r3, r2
 8008d2a:	005b      	lsls	r3, r3, #1
 8008d2c:	4413      	add	r3, r2
 8008d2e:	fa00 f203 	lsl.w	r2, r0, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	430a      	orrs	r2, r1
 8008d38:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b10      	cmp	r3, #16
 8008d40:	d003      	beq.n	8008d4a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008d46:	2b11      	cmp	r3, #17
 8008d48:	d132      	bne.n	8008db0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a1d      	ldr	r2, [pc, #116]	; (8008dc4 <HAL_ADC_ConfigChannel+0x1e4>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d125      	bne.n	8008da0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d126      	bne.n	8008db0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	689a      	ldr	r2, [r3, #8]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008d70:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b10      	cmp	r3, #16
 8008d78:	d11a      	bne.n	8008db0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008d7a:	4b13      	ldr	r3, [pc, #76]	; (8008dc8 <HAL_ADC_ConfigChannel+0x1e8>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a13      	ldr	r2, [pc, #76]	; (8008dcc <HAL_ADC_ConfigChannel+0x1ec>)
 8008d80:	fba2 2303 	umull	r2, r3, r2, r3
 8008d84:	0c9a      	lsrs	r2, r3, #18
 8008d86:	4613      	mov	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4413      	add	r3, r2
 8008d8c:	005b      	lsls	r3, r3, #1
 8008d8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008d90:	e002      	b.n	8008d98 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	3b01      	subs	r3, #1
 8008d96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1f9      	bne.n	8008d92 <HAL_ADC_ConfigChannel+0x1b2>
 8008d9e:	e007      	b.n	8008db0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da4:	f043 0220 	orr.w	r2, r3, #32
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bc80      	pop	{r7}
 8008dc2:	4770      	bx	lr
 8008dc4:	40012400 	.word	0x40012400
 8008dc8:	20000038 	.word	0x20000038
 8008dcc:	431bde83 	.word	0x431bde83

08008dd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	f003 0301 	and.w	r3, r3, #1
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d040      	beq.n	8008e70 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	689a      	ldr	r2, [r3, #8]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f042 0201 	orr.w	r2, r2, #1
 8008dfc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008dfe:	4b1f      	ldr	r3, [pc, #124]	; (8008e7c <ADC_Enable+0xac>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a1f      	ldr	r2, [pc, #124]	; (8008e80 <ADC_Enable+0xb0>)
 8008e04:	fba2 2303 	umull	r2, r3, r2, r3
 8008e08:	0c9b      	lsrs	r3, r3, #18
 8008e0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8008e0c:	e002      	b.n	8008e14 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	3b01      	subs	r3, #1
 8008e12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1f9      	bne.n	8008e0e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008e1a:	f7ff fb1d 	bl	8008458 <HAL_GetTick>
 8008e1e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008e20:	e01f      	b.n	8008e62 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008e22:	f7ff fb19 	bl	8008458 <HAL_GetTick>
 8008e26:	4602      	mov	r2, r0
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d918      	bls.n	8008e62 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	f003 0301 	and.w	r3, r3, #1
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d011      	beq.n	8008e62 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e42:	f043 0210 	orr.w	r2, r3, #16
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4e:	f043 0201 	orr.w	r2, r3, #1
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e007      	b.n	8008e72 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	f003 0301 	and.w	r3, r3, #1
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d1d8      	bne.n	8008e22 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	20000038 	.word	0x20000038
 8008e80:	431bde83 	.word	0x431bde83

08008e84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d12e      	bne.n	8008efc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	689a      	ldr	r2, [r3, #8]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f022 0201 	bic.w	r2, r2, #1
 8008eac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008eae:	f7ff fad3 	bl	8008458 <HAL_GetTick>
 8008eb2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008eb4:	e01b      	b.n	8008eee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008eb6:	f7ff facf 	bl	8008458 <HAL_GetTick>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d914      	bls.n	8008eee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d10d      	bne.n	8008eee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed6:	f043 0210 	orr.w	r2, r3, #16
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee2:	f043 0201 	orr.w	r2, r3, #1
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e007      	b.n	8008efe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	f003 0301 	and.w	r3, r3, #1
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d0dc      	beq.n	8008eb6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b083      	sub	sp, #12
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8008f0e:	bf00      	nop
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bc80      	pop	{r7}
 8008f16:	4770      	bx	lr

08008f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f003 0307 	and.w	r3, r3, #7
 8008f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f28:	4b0c      	ldr	r3, [pc, #48]	; (8008f5c <__NVIC_SetPriorityGrouping+0x44>)
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008f34:	4013      	ands	r3, r2
 8008f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f4a:	4a04      	ldr	r2, [pc, #16]	; (8008f5c <__NVIC_SetPriorityGrouping+0x44>)
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	60d3      	str	r3, [r2, #12]
}
 8008f50:	bf00      	nop
 8008f52:	3714      	adds	r7, #20
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bc80      	pop	{r7}
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	e000ed00 	.word	0xe000ed00

08008f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008f60:	b480      	push	{r7}
 8008f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f64:	4b04      	ldr	r3, [pc, #16]	; (8008f78 <__NVIC_GetPriorityGrouping+0x18>)
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	0a1b      	lsrs	r3, r3, #8
 8008f6a:	f003 0307 	and.w	r3, r3, #7
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bc80      	pop	{r7}
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	e000ed00 	.word	0xe000ed00

08008f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	4603      	mov	r3, r0
 8008f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	db0b      	blt.n	8008fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f8e:	79fb      	ldrb	r3, [r7, #7]
 8008f90:	f003 021f 	and.w	r2, r3, #31
 8008f94:	4906      	ldr	r1, [pc, #24]	; (8008fb0 <__NVIC_EnableIRQ+0x34>)
 8008f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f9a:	095b      	lsrs	r3, r3, #5
 8008f9c:	2001      	movs	r0, #1
 8008f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8008fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008fa6:	bf00      	nop
 8008fa8:	370c      	adds	r7, #12
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bc80      	pop	{r7}
 8008fae:	4770      	bx	lr
 8008fb0:	e000e100 	.word	0xe000e100

08008fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	6039      	str	r1, [r7, #0]
 8008fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	db0a      	blt.n	8008fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	b2da      	uxtb	r2, r3
 8008fcc:	490c      	ldr	r1, [pc, #48]	; (8009000 <__NVIC_SetPriority+0x4c>)
 8008fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fd2:	0112      	lsls	r2, r2, #4
 8008fd4:	b2d2      	uxtb	r2, r2
 8008fd6:	440b      	add	r3, r1
 8008fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008fdc:	e00a      	b.n	8008ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	4908      	ldr	r1, [pc, #32]	; (8009004 <__NVIC_SetPriority+0x50>)
 8008fe4:	79fb      	ldrb	r3, [r7, #7]
 8008fe6:	f003 030f 	and.w	r3, r3, #15
 8008fea:	3b04      	subs	r3, #4
 8008fec:	0112      	lsls	r2, r2, #4
 8008fee:	b2d2      	uxtb	r2, r2
 8008ff0:	440b      	add	r3, r1
 8008ff2:	761a      	strb	r2, [r3, #24]
}
 8008ff4:	bf00      	nop
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bc80      	pop	{r7}
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	e000e100 	.word	0xe000e100
 8009004:	e000ed00 	.word	0xe000ed00

08009008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009008:	b480      	push	{r7}
 800900a:	b089      	sub	sp, #36	; 0x24
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f003 0307 	and.w	r3, r3, #7
 800901a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	f1c3 0307 	rsb	r3, r3, #7
 8009022:	2b04      	cmp	r3, #4
 8009024:	bf28      	it	cs
 8009026:	2304      	movcs	r3, #4
 8009028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	3304      	adds	r3, #4
 800902e:	2b06      	cmp	r3, #6
 8009030:	d902      	bls.n	8009038 <NVIC_EncodePriority+0x30>
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	3b03      	subs	r3, #3
 8009036:	e000      	b.n	800903a <NVIC_EncodePriority+0x32>
 8009038:	2300      	movs	r3, #0
 800903a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800903c:	f04f 32ff 	mov.w	r2, #4294967295
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	fa02 f303 	lsl.w	r3, r2, r3
 8009046:	43da      	mvns	r2, r3
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	401a      	ands	r2, r3
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009050:	f04f 31ff 	mov.w	r1, #4294967295
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	fa01 f303 	lsl.w	r3, r1, r3
 800905a:	43d9      	mvns	r1, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009060:	4313      	orrs	r3, r2
         );
}
 8009062:	4618      	mov	r0, r3
 8009064:	3724      	adds	r7, #36	; 0x24
 8009066:	46bd      	mov	sp, r7
 8009068:	bc80      	pop	{r7}
 800906a:	4770      	bx	lr

0800906c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	3b01      	subs	r3, #1
 8009078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800907c:	d301      	bcc.n	8009082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800907e:	2301      	movs	r3, #1
 8009080:	e00f      	b.n	80090a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009082:	4a0a      	ldr	r2, [pc, #40]	; (80090ac <SysTick_Config+0x40>)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3b01      	subs	r3, #1
 8009088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800908a:	210f      	movs	r1, #15
 800908c:	f04f 30ff 	mov.w	r0, #4294967295
 8009090:	f7ff ff90 	bl	8008fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009094:	4b05      	ldr	r3, [pc, #20]	; (80090ac <SysTick_Config+0x40>)
 8009096:	2200      	movs	r2, #0
 8009098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800909a:	4b04      	ldr	r3, [pc, #16]	; (80090ac <SysTick_Config+0x40>)
 800909c:	2207      	movs	r2, #7
 800909e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	e000e010 	.word	0xe000e010

080090b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f7ff ff2d 	bl	8008f18 <__NVIC_SetPriorityGrouping>
}
 80090be:	bf00      	nop
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b086      	sub	sp, #24
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	4603      	mov	r3, r0
 80090ce:	60b9      	str	r1, [r7, #8]
 80090d0:	607a      	str	r2, [r7, #4]
 80090d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80090d4:	2300      	movs	r3, #0
 80090d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80090d8:	f7ff ff42 	bl	8008f60 <__NVIC_GetPriorityGrouping>
 80090dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	68b9      	ldr	r1, [r7, #8]
 80090e2:	6978      	ldr	r0, [r7, #20]
 80090e4:	f7ff ff90 	bl	8009008 <NVIC_EncodePriority>
 80090e8:	4602      	mov	r2, r0
 80090ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090ee:	4611      	mov	r1, r2
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7ff ff5f 	bl	8008fb4 <__NVIC_SetPriority>
}
 80090f6:	bf00      	nop
 80090f8:	3718      	adds	r7, #24
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b082      	sub	sp, #8
 8009102:	af00      	add	r7, sp, #0
 8009104:	4603      	mov	r3, r0
 8009106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800910c:	4618      	mov	r0, r3
 800910e:	f7ff ff35 	bl	8008f7c <__NVIC_EnableIRQ>
}
 8009112:	bf00      	nop
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b082      	sub	sp, #8
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7ff ffa2 	bl	800906c <SysTick_Config>
 8009128:	4603      	mov	r3, r0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
	...

08009134 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800913c:	2300      	movs	r3, #0
 800913e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d101      	bne.n	800914a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e043      	b.n	80091d2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	4b22      	ldr	r3, [pc, #136]	; (80091dc <HAL_DMA_Init+0xa8>)
 8009152:	4413      	add	r3, r2
 8009154:	4a22      	ldr	r2, [pc, #136]	; (80091e0 <HAL_DMA_Init+0xac>)
 8009156:	fba2 2303 	umull	r2, r3, r2, r3
 800915a:	091b      	lsrs	r3, r3, #4
 800915c:	009a      	lsls	r2, r3, #2
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a1f      	ldr	r2, [pc, #124]	; (80091e4 <HAL_DMA_Init+0xb0>)
 8009166:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2202      	movs	r2, #2
 800916c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800917e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009182:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800918c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3714      	adds	r7, #20
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bc80      	pop	{r7}
 80091da:	4770      	bx	lr
 80091dc:	bffdfff8 	.word	0xbffdfff8
 80091e0:	cccccccd 	.word	0xcccccccd
 80091e4:	40020000 	.word	0x40020000

080091e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b086      	sub	sp, #24
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d101      	bne.n	8009208 <HAL_DMA_Start_IT+0x20>
 8009204:	2302      	movs	r3, #2
 8009206:	e04b      	b.n	80092a0 <HAL_DMA_Start_IT+0xb8>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009216:	b2db      	uxtb	r3, r3
 8009218:	2b01      	cmp	r3, #1
 800921a:	d13a      	bne.n	8009292 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2202      	movs	r2, #2
 8009220:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f022 0201 	bic.w	r2, r2, #1
 8009238:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	68b9      	ldr	r1, [r7, #8]
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f000 f9eb 	bl	800961c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924a:	2b00      	cmp	r3, #0
 800924c:	d008      	beq.n	8009260 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f042 020e 	orr.w	r2, r2, #14
 800925c:	601a      	str	r2, [r3, #0]
 800925e:	e00f      	b.n	8009280 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f022 0204 	bic.w	r2, r2, #4
 800926e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f042 020a 	orr.w	r2, r2, #10
 800927e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f042 0201 	orr.w	r2, r2, #1
 800928e:	601a      	str	r2, [r3, #0]
 8009290:	e005      	b.n	800929e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800929a:	2302      	movs	r3, #2
 800929c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800929e:	7dfb      	ldrb	r3, [r7, #23]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3718      	adds	r7, #24
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d008      	beq.n	80092d2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2204      	movs	r2, #4
 80092c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	e020      	b.n	8009314 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f022 020e 	bic.w	r2, r2, #14
 80092e0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f022 0201 	bic.w	r2, r2, #1
 80092f0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092fa:	2101      	movs	r1, #1
 80092fc:	fa01 f202 	lsl.w	r2, r1, r2
 8009300:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009312:	7bfb      	ldrb	r3, [r7, #15]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	bc80      	pop	{r7}
 800931c:	4770      	bx	lr
	...

08009320 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b02      	cmp	r3, #2
 8009336:	d005      	beq.n	8009344 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2204      	movs	r2, #4
 800933c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	73fb      	strb	r3, [r7, #15]
 8009342:	e051      	b.n	80093e8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f022 020e 	bic.w	r2, r2, #14
 8009352:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f022 0201 	bic.w	r2, r2, #1
 8009362:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a22      	ldr	r2, [pc, #136]	; (80093f4 <HAL_DMA_Abort_IT+0xd4>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d029      	beq.n	80093c2 <HAL_DMA_Abort_IT+0xa2>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a21      	ldr	r2, [pc, #132]	; (80093f8 <HAL_DMA_Abort_IT+0xd8>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d022      	beq.n	80093be <HAL_DMA_Abort_IT+0x9e>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a1f      	ldr	r2, [pc, #124]	; (80093fc <HAL_DMA_Abort_IT+0xdc>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d01a      	beq.n	80093b8 <HAL_DMA_Abort_IT+0x98>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a1e      	ldr	r2, [pc, #120]	; (8009400 <HAL_DMA_Abort_IT+0xe0>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d012      	beq.n	80093b2 <HAL_DMA_Abort_IT+0x92>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a1c      	ldr	r2, [pc, #112]	; (8009404 <HAL_DMA_Abort_IT+0xe4>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d00a      	beq.n	80093ac <HAL_DMA_Abort_IT+0x8c>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a1b      	ldr	r2, [pc, #108]	; (8009408 <HAL_DMA_Abort_IT+0xe8>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d102      	bne.n	80093a6 <HAL_DMA_Abort_IT+0x86>
 80093a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80093a4:	e00e      	b.n	80093c4 <HAL_DMA_Abort_IT+0xa4>
 80093a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093aa:	e00b      	b.n	80093c4 <HAL_DMA_Abort_IT+0xa4>
 80093ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80093b0:	e008      	b.n	80093c4 <HAL_DMA_Abort_IT+0xa4>
 80093b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093b6:	e005      	b.n	80093c4 <HAL_DMA_Abort_IT+0xa4>
 80093b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093bc:	e002      	b.n	80093c4 <HAL_DMA_Abort_IT+0xa4>
 80093be:	2310      	movs	r3, #16
 80093c0:	e000      	b.n	80093c4 <HAL_DMA_Abort_IT+0xa4>
 80093c2:	2301      	movs	r3, #1
 80093c4:	4a11      	ldr	r2, [pc, #68]	; (800940c <HAL_DMA_Abort_IT+0xec>)
 80093c6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d003      	beq.n	80093e8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	4798      	blx	r3
    } 
  }
  return status;
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	40020008 	.word	0x40020008
 80093f8:	4002001c 	.word	0x4002001c
 80093fc:	40020030 	.word	0x40020030
 8009400:	40020044 	.word	0x40020044
 8009404:	40020058 	.word	0x40020058
 8009408:	4002006c 	.word	0x4002006c
 800940c:	40020000 	.word	0x40020000

08009410 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942c:	2204      	movs	r2, #4
 800942e:	409a      	lsls	r2, r3
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	4013      	ands	r3, r2
 8009434:	2b00      	cmp	r3, #0
 8009436:	d04f      	beq.n	80094d8 <HAL_DMA_IRQHandler+0xc8>
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	f003 0304 	and.w	r3, r3, #4
 800943e:	2b00      	cmp	r3, #0
 8009440:	d04a      	beq.n	80094d8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0320 	and.w	r3, r3, #32
 800944c:	2b00      	cmp	r3, #0
 800944e:	d107      	bne.n	8009460 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f022 0204 	bic.w	r2, r2, #4
 800945e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a66      	ldr	r2, [pc, #408]	; (8009600 <HAL_DMA_IRQHandler+0x1f0>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d029      	beq.n	80094be <HAL_DMA_IRQHandler+0xae>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a65      	ldr	r2, [pc, #404]	; (8009604 <HAL_DMA_IRQHandler+0x1f4>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d022      	beq.n	80094ba <HAL_DMA_IRQHandler+0xaa>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a63      	ldr	r2, [pc, #396]	; (8009608 <HAL_DMA_IRQHandler+0x1f8>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d01a      	beq.n	80094b4 <HAL_DMA_IRQHandler+0xa4>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a62      	ldr	r2, [pc, #392]	; (800960c <HAL_DMA_IRQHandler+0x1fc>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d012      	beq.n	80094ae <HAL_DMA_IRQHandler+0x9e>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a60      	ldr	r2, [pc, #384]	; (8009610 <HAL_DMA_IRQHandler+0x200>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d00a      	beq.n	80094a8 <HAL_DMA_IRQHandler+0x98>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a5f      	ldr	r2, [pc, #380]	; (8009614 <HAL_DMA_IRQHandler+0x204>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d102      	bne.n	80094a2 <HAL_DMA_IRQHandler+0x92>
 800949c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80094a0:	e00e      	b.n	80094c0 <HAL_DMA_IRQHandler+0xb0>
 80094a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80094a6:	e00b      	b.n	80094c0 <HAL_DMA_IRQHandler+0xb0>
 80094a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80094ac:	e008      	b.n	80094c0 <HAL_DMA_IRQHandler+0xb0>
 80094ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80094b2:	e005      	b.n	80094c0 <HAL_DMA_IRQHandler+0xb0>
 80094b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094b8:	e002      	b.n	80094c0 <HAL_DMA_IRQHandler+0xb0>
 80094ba:	2340      	movs	r3, #64	; 0x40
 80094bc:	e000      	b.n	80094c0 <HAL_DMA_IRQHandler+0xb0>
 80094be:	2304      	movs	r3, #4
 80094c0:	4a55      	ldr	r2, [pc, #340]	; (8009618 <HAL_DMA_IRQHandler+0x208>)
 80094c2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 8094 	beq.w	80095f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80094d6:	e08e      	b.n	80095f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094dc:	2202      	movs	r2, #2
 80094de:	409a      	lsls	r2, r3
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	4013      	ands	r3, r2
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d056      	beq.n	8009596 <HAL_DMA_IRQHandler+0x186>
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	f003 0302 	and.w	r3, r3, #2
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d051      	beq.n	8009596 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f003 0320 	and.w	r3, r3, #32
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10b      	bne.n	8009518 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f022 020a 	bic.w	r2, r2, #10
 800950e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a38      	ldr	r2, [pc, #224]	; (8009600 <HAL_DMA_IRQHandler+0x1f0>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d029      	beq.n	8009576 <HAL_DMA_IRQHandler+0x166>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a37      	ldr	r2, [pc, #220]	; (8009604 <HAL_DMA_IRQHandler+0x1f4>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d022      	beq.n	8009572 <HAL_DMA_IRQHandler+0x162>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a35      	ldr	r2, [pc, #212]	; (8009608 <HAL_DMA_IRQHandler+0x1f8>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d01a      	beq.n	800956c <HAL_DMA_IRQHandler+0x15c>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a34      	ldr	r2, [pc, #208]	; (800960c <HAL_DMA_IRQHandler+0x1fc>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d012      	beq.n	8009566 <HAL_DMA_IRQHandler+0x156>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a32      	ldr	r2, [pc, #200]	; (8009610 <HAL_DMA_IRQHandler+0x200>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d00a      	beq.n	8009560 <HAL_DMA_IRQHandler+0x150>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a31      	ldr	r2, [pc, #196]	; (8009614 <HAL_DMA_IRQHandler+0x204>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d102      	bne.n	800955a <HAL_DMA_IRQHandler+0x14a>
 8009554:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009558:	e00e      	b.n	8009578 <HAL_DMA_IRQHandler+0x168>
 800955a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800955e:	e00b      	b.n	8009578 <HAL_DMA_IRQHandler+0x168>
 8009560:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009564:	e008      	b.n	8009578 <HAL_DMA_IRQHandler+0x168>
 8009566:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800956a:	e005      	b.n	8009578 <HAL_DMA_IRQHandler+0x168>
 800956c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009570:	e002      	b.n	8009578 <HAL_DMA_IRQHandler+0x168>
 8009572:	2320      	movs	r3, #32
 8009574:	e000      	b.n	8009578 <HAL_DMA_IRQHandler+0x168>
 8009576:	2302      	movs	r3, #2
 8009578:	4a27      	ldr	r2, [pc, #156]	; (8009618 <HAL_DMA_IRQHandler+0x208>)
 800957a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009588:	2b00      	cmp	r3, #0
 800958a:	d034      	beq.n	80095f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009594:	e02f      	b.n	80095f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959a:	2208      	movs	r2, #8
 800959c:	409a      	lsls	r2, r3
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	4013      	ands	r3, r2
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d028      	beq.n	80095f8 <HAL_DMA_IRQHandler+0x1e8>
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	f003 0308 	and.w	r3, r3, #8
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d023      	beq.n	80095f8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f022 020e 	bic.w	r2, r2, #14
 80095be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c8:	2101      	movs	r1, #1
 80095ca:	fa01 f202 	lsl.w	r2, r1, r2
 80095ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d004      	beq.n	80095f8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	4798      	blx	r3
    }
  }
  return;
 80095f6:	bf00      	nop
 80095f8:	bf00      	nop
}
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	40020008 	.word	0x40020008
 8009604:	4002001c 	.word	0x4002001c
 8009608:	40020030 	.word	0x40020030
 800960c:	40020044 	.word	0x40020044
 8009610:	40020058 	.word	0x40020058
 8009614:	4002006c 	.word	0x4002006c
 8009618:	40020000 	.word	0x40020000

0800961c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
 8009628:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009632:	2101      	movs	r1, #1
 8009634:	fa01 f202 	lsl.w	r2, r1, r2
 8009638:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	683a      	ldr	r2, [r7, #0]
 8009640:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	2b10      	cmp	r3, #16
 8009648:	d108      	bne.n	800965c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800965a:	e007      	b.n	800966c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	60da      	str	r2, [r3, #12]
}
 800966c:	bf00      	nop
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	bc80      	pop	{r7}
 8009674:	4770      	bx	lr
	...

08009678 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800967a:	b087      	sub	sp, #28
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800968a:	2300      	movs	r3, #0
 800968c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800968e:	2300      	movs	r3, #0
 8009690:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009692:	4b2f      	ldr	r3, [pc, #188]	; (8009750 <HAL_FLASH_Program+0xd8>)
 8009694:	7e1b      	ldrb	r3, [r3, #24]
 8009696:	2b01      	cmp	r3, #1
 8009698:	d101      	bne.n	800969e <HAL_FLASH_Program+0x26>
 800969a:	2302      	movs	r3, #2
 800969c:	e054      	b.n	8009748 <HAL_FLASH_Program+0xd0>
 800969e:	4b2c      	ldr	r3, [pc, #176]	; (8009750 <HAL_FLASH_Program+0xd8>)
 80096a0:	2201      	movs	r2, #1
 80096a2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80096a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80096a8:	f000 f8b2 	bl	8009810 <FLASH_WaitForLastOperation>
 80096ac:	4603      	mov	r3, r0
 80096ae:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80096b0:	7dfb      	ldrb	r3, [r7, #23]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d144      	bne.n	8009740 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d102      	bne.n	80096c2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80096bc:	2301      	movs	r3, #1
 80096be:	757b      	strb	r3, [r7, #21]
 80096c0:	e007      	b.n	80096d2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d102      	bne.n	80096ce <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80096c8:	2302      	movs	r3, #2
 80096ca:	757b      	strb	r3, [r7, #21]
 80096cc:	e001      	b.n	80096d2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80096ce:	2304      	movs	r3, #4
 80096d0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80096d2:	2300      	movs	r3, #0
 80096d4:	75bb      	strb	r3, [r7, #22]
 80096d6:	e02d      	b.n	8009734 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80096d8:	7dbb      	ldrb	r3, [r7, #22]
 80096da:	005a      	lsls	r2, r3, #1
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	eb02 0c03 	add.w	ip, r2, r3
 80096e2:	7dbb      	ldrb	r3, [r7, #22]
 80096e4:	0119      	lsls	r1, r3, #4
 80096e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096ea:	f1c1 0620 	rsb	r6, r1, #32
 80096ee:	f1a1 0020 	sub.w	r0, r1, #32
 80096f2:	fa22 f401 	lsr.w	r4, r2, r1
 80096f6:	fa03 f606 	lsl.w	r6, r3, r6
 80096fa:	4334      	orrs	r4, r6
 80096fc:	fa23 f000 	lsr.w	r0, r3, r0
 8009700:	4304      	orrs	r4, r0
 8009702:	fa23 f501 	lsr.w	r5, r3, r1
 8009706:	b2a3      	uxth	r3, r4
 8009708:	4619      	mov	r1, r3
 800970a:	4660      	mov	r0, ip
 800970c:	f000 f864 	bl	80097d8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009710:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009714:	f000 f87c 	bl	8009810 <FLASH_WaitForLastOperation>
 8009718:	4603      	mov	r3, r0
 800971a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800971c:	4b0d      	ldr	r3, [pc, #52]	; (8009754 <HAL_FLASH_Program+0xdc>)
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	4a0c      	ldr	r2, [pc, #48]	; (8009754 <HAL_FLASH_Program+0xdc>)
 8009722:	f023 0301 	bic.w	r3, r3, #1
 8009726:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8009728:	7dfb      	ldrb	r3, [r7, #23]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d107      	bne.n	800973e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800972e:	7dbb      	ldrb	r3, [r7, #22]
 8009730:	3301      	adds	r3, #1
 8009732:	75bb      	strb	r3, [r7, #22]
 8009734:	7dba      	ldrb	r2, [r7, #22]
 8009736:	7d7b      	ldrb	r3, [r7, #21]
 8009738:	429a      	cmp	r2, r3
 800973a:	d3cd      	bcc.n	80096d8 <HAL_FLASH_Program+0x60>
 800973c:	e000      	b.n	8009740 <HAL_FLASH_Program+0xc8>
      {
        break;
 800973e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009740:	4b03      	ldr	r3, [pc, #12]	; (8009750 <HAL_FLASH_Program+0xd8>)
 8009742:	2200      	movs	r2, #0
 8009744:	761a      	strb	r2, [r3, #24]

  return status;
 8009746:	7dfb      	ldrb	r3, [r7, #23]
}
 8009748:	4618      	mov	r0, r3
 800974a:	371c      	adds	r7, #28
 800974c:	46bd      	mov	sp, r7
 800974e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009750:	200007e8 	.word	0x200007e8
 8009754:	40022000 	.word	0x40022000

08009758 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009762:	4b0d      	ldr	r3, [pc, #52]	; (8009798 <HAL_FLASH_Unlock+0x40>)
 8009764:	691b      	ldr	r3, [r3, #16]
 8009766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00d      	beq.n	800978a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800976e:	4b0a      	ldr	r3, [pc, #40]	; (8009798 <HAL_FLASH_Unlock+0x40>)
 8009770:	4a0a      	ldr	r2, [pc, #40]	; (800979c <HAL_FLASH_Unlock+0x44>)
 8009772:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009774:	4b08      	ldr	r3, [pc, #32]	; (8009798 <HAL_FLASH_Unlock+0x40>)
 8009776:	4a0a      	ldr	r2, [pc, #40]	; (80097a0 <HAL_FLASH_Unlock+0x48>)
 8009778:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800977a:	4b07      	ldr	r3, [pc, #28]	; (8009798 <HAL_FLASH_Unlock+0x40>)
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009782:	2b00      	cmp	r3, #0
 8009784:	d001      	beq.n	800978a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8009786:	2301      	movs	r3, #1
 8009788:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800978a:	79fb      	ldrb	r3, [r7, #7]
}
 800978c:	4618      	mov	r0, r3
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	bc80      	pop	{r7}
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	40022000 	.word	0x40022000
 800979c:	45670123 	.word	0x45670123
 80097a0:	cdef89ab 	.word	0xcdef89ab

080097a4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80097a4:	b480      	push	{r7}
 80097a6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80097a8:	4b05      	ldr	r3, [pc, #20]	; (80097c0 <HAL_FLASH_Lock+0x1c>)
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	4a04      	ldr	r2, [pc, #16]	; (80097c0 <HAL_FLASH_Lock+0x1c>)
 80097ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097b2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bc80      	pop	{r7}
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	40022000 	.word	0x40022000

080097c4 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 80097c4:	b480      	push	{r7}
 80097c6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80097c8:	4b02      	ldr	r3, [pc, #8]	; (80097d4 <HAL_FLASH_GetError+0x10>)
 80097ca:	69db      	ldr	r3, [r3, #28]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bc80      	pop	{r7}
 80097d2:	4770      	bx	lr
 80097d4:	200007e8 	.word	0x200007e8

080097d8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	460b      	mov	r3, r1
 80097e2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80097e4:	4b08      	ldr	r3, [pc, #32]	; (8009808 <FLASH_Program_HalfWord+0x30>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80097ea:	4b08      	ldr	r3, [pc, #32]	; (800980c <FLASH_Program_HalfWord+0x34>)
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	4a07      	ldr	r2, [pc, #28]	; (800980c <FLASH_Program_HalfWord+0x34>)
 80097f0:	f043 0301 	orr.w	r3, r3, #1
 80097f4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	887a      	ldrh	r2, [r7, #2]
 80097fa:	801a      	strh	r2, [r3, #0]
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	bc80      	pop	{r7}
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	200007e8 	.word	0x200007e8
 800980c:	40022000 	.word	0x40022000

08009810 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8009818:	f7fe fe1e 	bl	8008458 <HAL_GetTick>
 800981c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800981e:	e010      	b.n	8009842 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009826:	d00c      	beq.n	8009842 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d007      	beq.n	800983e <FLASH_WaitForLastOperation+0x2e>
 800982e:	f7fe fe13 	bl	8008458 <HAL_GetTick>
 8009832:	4602      	mov	r2, r0
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	429a      	cmp	r2, r3
 800983c:	d201      	bcs.n	8009842 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800983e:	2303      	movs	r3, #3
 8009840:	e025      	b.n	800988e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8009842:	4b15      	ldr	r3, [pc, #84]	; (8009898 <FLASH_WaitForLastOperation+0x88>)
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	f003 0301 	and.w	r3, r3, #1
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1e8      	bne.n	8009820 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800984e:	4b12      	ldr	r3, [pc, #72]	; (8009898 <FLASH_WaitForLastOperation+0x88>)
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	f003 0320 	and.w	r3, r3, #32
 8009856:	2b00      	cmp	r3, #0
 8009858:	d002      	beq.n	8009860 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800985a:	4b0f      	ldr	r3, [pc, #60]	; (8009898 <FLASH_WaitForLastOperation+0x88>)
 800985c:	2220      	movs	r2, #32
 800985e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8009860:	4b0d      	ldr	r3, [pc, #52]	; (8009898 <FLASH_WaitForLastOperation+0x88>)
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	f003 0310 	and.w	r3, r3, #16
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10b      	bne.n	8009884 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800986c:	4b0a      	ldr	r3, [pc, #40]	; (8009898 <FLASH_WaitForLastOperation+0x88>)
 800986e:	69db      	ldr	r3, [r3, #28]
 8009870:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8009874:	2b00      	cmp	r3, #0
 8009876:	d105      	bne.n	8009884 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8009878:	4b07      	ldr	r3, [pc, #28]	; (8009898 <FLASH_WaitForLastOperation+0x88>)
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8009880:	2b00      	cmp	r3, #0
 8009882:	d003      	beq.n	800988c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8009884:	f000 f80a 	bl	800989c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	e000      	b.n	800988e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	40022000 	.word	0x40022000

0800989c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80098a2:	2300      	movs	r3, #0
 80098a4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80098a6:	4b23      	ldr	r3, [pc, #140]	; (8009934 <FLASH_SetErrorCode+0x98>)
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	f003 0310 	and.w	r3, r3, #16
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d009      	beq.n	80098c6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80098b2:	4b21      	ldr	r3, [pc, #132]	; (8009938 <FLASH_SetErrorCode+0x9c>)
 80098b4:	69db      	ldr	r3, [r3, #28]
 80098b6:	f043 0302 	orr.w	r3, r3, #2
 80098ba:	4a1f      	ldr	r2, [pc, #124]	; (8009938 <FLASH_SetErrorCode+0x9c>)
 80098bc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f043 0310 	orr.w	r3, r3, #16
 80098c4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80098c6:	4b1b      	ldr	r3, [pc, #108]	; (8009934 <FLASH_SetErrorCode+0x98>)
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	f003 0304 	and.w	r3, r3, #4
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d009      	beq.n	80098e6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80098d2:	4b19      	ldr	r3, [pc, #100]	; (8009938 <FLASH_SetErrorCode+0x9c>)
 80098d4:	69db      	ldr	r3, [r3, #28]
 80098d6:	f043 0301 	orr.w	r3, r3, #1
 80098da:	4a17      	ldr	r2, [pc, #92]	; (8009938 <FLASH_SetErrorCode+0x9c>)
 80098dc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f043 0304 	orr.w	r3, r3, #4
 80098e4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80098e6:	4b13      	ldr	r3, [pc, #76]	; (8009934 <FLASH_SetErrorCode+0x98>)
 80098e8:	69db      	ldr	r3, [r3, #28]
 80098ea:	f003 0301 	and.w	r3, r3, #1
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00b      	beq.n	800990a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80098f2:	4b11      	ldr	r3, [pc, #68]	; (8009938 <FLASH_SetErrorCode+0x9c>)
 80098f4:	69db      	ldr	r3, [r3, #28]
 80098f6:	f043 0304 	orr.w	r3, r3, #4
 80098fa:	4a0f      	ldr	r2, [pc, #60]	; (8009938 <FLASH_SetErrorCode+0x9c>)
 80098fc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80098fe:	4b0d      	ldr	r3, [pc, #52]	; (8009934 <FLASH_SetErrorCode+0x98>)
 8009900:	69db      	ldr	r3, [r3, #28]
 8009902:	4a0c      	ldr	r2, [pc, #48]	; (8009934 <FLASH_SetErrorCode+0x98>)
 8009904:	f023 0301 	bic.w	r3, r3, #1
 8009908:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f240 1201 	movw	r2, #257	; 0x101
 8009910:	4293      	cmp	r3, r2
 8009912:	d106      	bne.n	8009922 <FLASH_SetErrorCode+0x86>
 8009914:	4b07      	ldr	r3, [pc, #28]	; (8009934 <FLASH_SetErrorCode+0x98>)
 8009916:	69db      	ldr	r3, [r3, #28]
 8009918:	4a06      	ldr	r2, [pc, #24]	; (8009934 <FLASH_SetErrorCode+0x98>)
 800991a:	f023 0301 	bic.w	r3, r3, #1
 800991e:	61d3      	str	r3, [r2, #28]
}  
 8009920:	e002      	b.n	8009928 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8009922:	4a04      	ldr	r2, [pc, #16]	; (8009934 <FLASH_SetErrorCode+0x98>)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	60d3      	str	r3, [r2, #12]
}  
 8009928:	bf00      	nop
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	bc80      	pop	{r7}
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	40022000 	.word	0x40022000
 8009938:	200007e8 	.word	0x200007e8

0800993c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800994a:	2300      	movs	r3, #0
 800994c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800994e:	4b2f      	ldr	r3, [pc, #188]	; (8009a0c <HAL_FLASHEx_Erase+0xd0>)
 8009950:	7e1b      	ldrb	r3, [r3, #24]
 8009952:	2b01      	cmp	r3, #1
 8009954:	d101      	bne.n	800995a <HAL_FLASHEx_Erase+0x1e>
 8009956:	2302      	movs	r3, #2
 8009958:	e053      	b.n	8009a02 <HAL_FLASHEx_Erase+0xc6>
 800995a:	4b2c      	ldr	r3, [pc, #176]	; (8009a0c <HAL_FLASHEx_Erase+0xd0>)
 800995c:	2201      	movs	r2, #1
 800995e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b02      	cmp	r3, #2
 8009966:	d116      	bne.n	8009996 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8009968:	f24c 3050 	movw	r0, #50000	; 0xc350
 800996c:	f7ff ff50 	bl	8009810 <FLASH_WaitForLastOperation>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d141      	bne.n	80099fa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8009976:	2001      	movs	r0, #1
 8009978:	f000 f84c 	bl	8009a14 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800997c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009980:	f7ff ff46 	bl	8009810 <FLASH_WaitForLastOperation>
 8009984:	4603      	mov	r3, r0
 8009986:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8009988:	4b21      	ldr	r3, [pc, #132]	; (8009a10 <HAL_FLASHEx_Erase+0xd4>)
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	4a20      	ldr	r2, [pc, #128]	; (8009a10 <HAL_FLASHEx_Erase+0xd4>)
 800998e:	f023 0304 	bic.w	r3, r3, #4
 8009992:	6113      	str	r3, [r2, #16]
 8009994:	e031      	b.n	80099fa <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8009996:	f24c 3050 	movw	r0, #50000	; 0xc350
 800999a:	f7ff ff39 	bl	8009810 <FLASH_WaitForLastOperation>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d12a      	bne.n	80099fa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	f04f 32ff 	mov.w	r2, #4294967295
 80099aa:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	60bb      	str	r3, [r7, #8]
 80099b2:	e019      	b.n	80099e8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80099b4:	68b8      	ldr	r0, [r7, #8]
 80099b6:	f000 f849 	bl	8009a4c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80099ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80099be:	f7ff ff27 	bl	8009810 <FLASH_WaitForLastOperation>
 80099c2:	4603      	mov	r3, r0
 80099c4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80099c6:	4b12      	ldr	r3, [pc, #72]	; (8009a10 <HAL_FLASHEx_Erase+0xd4>)
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	4a11      	ldr	r2, [pc, #68]	; (8009a10 <HAL_FLASHEx_Erase+0xd4>)
 80099cc:	f023 0302 	bic.w	r3, r3, #2
 80099d0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80099d2:	7bfb      	ldrb	r3, [r7, #15]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d003      	beq.n	80099e0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	601a      	str	r2, [r3, #0]
            break;
 80099de:	e00c      	b.n	80099fa <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099e6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	029a      	lsls	r2, r3, #10
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d3dc      	bcc.n	80099b4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80099fa:	4b04      	ldr	r3, [pc, #16]	; (8009a0c <HAL_FLASHEx_Erase+0xd0>)
 80099fc:	2200      	movs	r2, #0
 80099fe:	761a      	strb	r2, [r3, #24]

  return status;
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	200007e8 	.word	0x200007e8
 8009a10:	40022000 	.word	0x40022000

08009a14 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009a1c:	4b09      	ldr	r3, [pc, #36]	; (8009a44 <FLASH_MassErase+0x30>)
 8009a1e:	2200      	movs	r2, #0
 8009a20:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8009a22:	4b09      	ldr	r3, [pc, #36]	; (8009a48 <FLASH_MassErase+0x34>)
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	4a08      	ldr	r2, [pc, #32]	; (8009a48 <FLASH_MassErase+0x34>)
 8009a28:	f043 0304 	orr.w	r3, r3, #4
 8009a2c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009a2e:	4b06      	ldr	r3, [pc, #24]	; (8009a48 <FLASH_MassErase+0x34>)
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	4a05      	ldr	r2, [pc, #20]	; (8009a48 <FLASH_MassErase+0x34>)
 8009a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a38:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8009a3a:	bf00      	nop
 8009a3c:	370c      	adds	r7, #12
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bc80      	pop	{r7}
 8009a42:	4770      	bx	lr
 8009a44:	200007e8 	.word	0x200007e8
 8009a48:	40022000 	.word	0x40022000

08009a4c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009a54:	4b0b      	ldr	r3, [pc, #44]	; (8009a84 <FLASH_PageErase+0x38>)
 8009a56:	2200      	movs	r2, #0
 8009a58:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8009a5a:	4b0b      	ldr	r3, [pc, #44]	; (8009a88 <FLASH_PageErase+0x3c>)
 8009a5c:	691b      	ldr	r3, [r3, #16]
 8009a5e:	4a0a      	ldr	r2, [pc, #40]	; (8009a88 <FLASH_PageErase+0x3c>)
 8009a60:	f043 0302 	orr.w	r3, r3, #2
 8009a64:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8009a66:	4a08      	ldr	r2, [pc, #32]	; (8009a88 <FLASH_PageErase+0x3c>)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009a6c:	4b06      	ldr	r3, [pc, #24]	; (8009a88 <FLASH_PageErase+0x3c>)
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	4a05      	ldr	r2, [pc, #20]	; (8009a88 <FLASH_PageErase+0x3c>)
 8009a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a76:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bc80      	pop	{r7}
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	200007e8 	.word	0x200007e8
 8009a88:	40022000 	.word	0x40022000

08009a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b08b      	sub	sp, #44	; 0x2c
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009a96:	2300      	movs	r3, #0
 8009a98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009a9e:	e169      	b.n	8009d74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	69fa      	ldr	r2, [r7, #28]
 8009ab0:	4013      	ands	r3, r2
 8009ab2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009ab4:	69ba      	ldr	r2, [r7, #24]
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	f040 8158 	bne.w	8009d6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	4a9a      	ldr	r2, [pc, #616]	; (8009d2c <HAL_GPIO_Init+0x2a0>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d05e      	beq.n	8009b86 <HAL_GPIO_Init+0xfa>
 8009ac8:	4a98      	ldr	r2, [pc, #608]	; (8009d2c <HAL_GPIO_Init+0x2a0>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d875      	bhi.n	8009bba <HAL_GPIO_Init+0x12e>
 8009ace:	4a98      	ldr	r2, [pc, #608]	; (8009d30 <HAL_GPIO_Init+0x2a4>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d058      	beq.n	8009b86 <HAL_GPIO_Init+0xfa>
 8009ad4:	4a96      	ldr	r2, [pc, #600]	; (8009d30 <HAL_GPIO_Init+0x2a4>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d86f      	bhi.n	8009bba <HAL_GPIO_Init+0x12e>
 8009ada:	4a96      	ldr	r2, [pc, #600]	; (8009d34 <HAL_GPIO_Init+0x2a8>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d052      	beq.n	8009b86 <HAL_GPIO_Init+0xfa>
 8009ae0:	4a94      	ldr	r2, [pc, #592]	; (8009d34 <HAL_GPIO_Init+0x2a8>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d869      	bhi.n	8009bba <HAL_GPIO_Init+0x12e>
 8009ae6:	4a94      	ldr	r2, [pc, #592]	; (8009d38 <HAL_GPIO_Init+0x2ac>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d04c      	beq.n	8009b86 <HAL_GPIO_Init+0xfa>
 8009aec:	4a92      	ldr	r2, [pc, #584]	; (8009d38 <HAL_GPIO_Init+0x2ac>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d863      	bhi.n	8009bba <HAL_GPIO_Init+0x12e>
 8009af2:	4a92      	ldr	r2, [pc, #584]	; (8009d3c <HAL_GPIO_Init+0x2b0>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d046      	beq.n	8009b86 <HAL_GPIO_Init+0xfa>
 8009af8:	4a90      	ldr	r2, [pc, #576]	; (8009d3c <HAL_GPIO_Init+0x2b0>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d85d      	bhi.n	8009bba <HAL_GPIO_Init+0x12e>
 8009afe:	2b12      	cmp	r3, #18
 8009b00:	d82a      	bhi.n	8009b58 <HAL_GPIO_Init+0xcc>
 8009b02:	2b12      	cmp	r3, #18
 8009b04:	d859      	bhi.n	8009bba <HAL_GPIO_Init+0x12e>
 8009b06:	a201      	add	r2, pc, #4	; (adr r2, 8009b0c <HAL_GPIO_Init+0x80>)
 8009b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0c:	08009b87 	.word	0x08009b87
 8009b10:	08009b61 	.word	0x08009b61
 8009b14:	08009b73 	.word	0x08009b73
 8009b18:	08009bb5 	.word	0x08009bb5
 8009b1c:	08009bbb 	.word	0x08009bbb
 8009b20:	08009bbb 	.word	0x08009bbb
 8009b24:	08009bbb 	.word	0x08009bbb
 8009b28:	08009bbb 	.word	0x08009bbb
 8009b2c:	08009bbb 	.word	0x08009bbb
 8009b30:	08009bbb 	.word	0x08009bbb
 8009b34:	08009bbb 	.word	0x08009bbb
 8009b38:	08009bbb 	.word	0x08009bbb
 8009b3c:	08009bbb 	.word	0x08009bbb
 8009b40:	08009bbb 	.word	0x08009bbb
 8009b44:	08009bbb 	.word	0x08009bbb
 8009b48:	08009bbb 	.word	0x08009bbb
 8009b4c:	08009bbb 	.word	0x08009bbb
 8009b50:	08009b69 	.word	0x08009b69
 8009b54:	08009b7d 	.word	0x08009b7d
 8009b58:	4a79      	ldr	r2, [pc, #484]	; (8009d40 <HAL_GPIO_Init+0x2b4>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d013      	beq.n	8009b86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009b5e:	e02c      	b.n	8009bba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	623b      	str	r3, [r7, #32]
          break;
 8009b66:	e029      	b.n	8009bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	3304      	adds	r3, #4
 8009b6e:	623b      	str	r3, [r7, #32]
          break;
 8009b70:	e024      	b.n	8009bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	3308      	adds	r3, #8
 8009b78:	623b      	str	r3, [r7, #32]
          break;
 8009b7a:	e01f      	b.n	8009bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	330c      	adds	r3, #12
 8009b82:	623b      	str	r3, [r7, #32]
          break;
 8009b84:	e01a      	b.n	8009bbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d102      	bne.n	8009b94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009b8e:	2304      	movs	r3, #4
 8009b90:	623b      	str	r3, [r7, #32]
          break;
 8009b92:	e013      	b.n	8009bbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d105      	bne.n	8009ba8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009b9c:	2308      	movs	r3, #8
 8009b9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	69fa      	ldr	r2, [r7, #28]
 8009ba4:	611a      	str	r2, [r3, #16]
          break;
 8009ba6:	e009      	b.n	8009bbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009ba8:	2308      	movs	r3, #8
 8009baa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	69fa      	ldr	r2, [r7, #28]
 8009bb0:	615a      	str	r2, [r3, #20]
          break;
 8009bb2:	e003      	b.n	8009bbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	623b      	str	r3, [r7, #32]
          break;
 8009bb8:	e000      	b.n	8009bbc <HAL_GPIO_Init+0x130>
          break;
 8009bba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	2bff      	cmp	r3, #255	; 0xff
 8009bc0:	d801      	bhi.n	8009bc6 <HAL_GPIO_Init+0x13a>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	e001      	b.n	8009bca <HAL_GPIO_Init+0x13e>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	3304      	adds	r3, #4
 8009bca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	2bff      	cmp	r3, #255	; 0xff
 8009bd0:	d802      	bhi.n	8009bd8 <HAL_GPIO_Init+0x14c>
 8009bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	e002      	b.n	8009bde <HAL_GPIO_Init+0x152>
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bda:	3b08      	subs	r3, #8
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	210f      	movs	r1, #15
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bec:	43db      	mvns	r3, r3
 8009bee:	401a      	ands	r2, r3
 8009bf0:	6a39      	ldr	r1, [r7, #32]
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8009bf8:	431a      	orrs	r2, r3
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	f000 80b1 	beq.w	8009d6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009c0c:	4b4d      	ldr	r3, [pc, #308]	; (8009d44 <HAL_GPIO_Init+0x2b8>)
 8009c0e:	699b      	ldr	r3, [r3, #24]
 8009c10:	4a4c      	ldr	r2, [pc, #304]	; (8009d44 <HAL_GPIO_Init+0x2b8>)
 8009c12:	f043 0301 	orr.w	r3, r3, #1
 8009c16:	6193      	str	r3, [r2, #24]
 8009c18:	4b4a      	ldr	r3, [pc, #296]	; (8009d44 <HAL_GPIO_Init+0x2b8>)
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	f003 0301 	and.w	r3, r3, #1
 8009c20:	60bb      	str	r3, [r7, #8]
 8009c22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009c24:	4a48      	ldr	r2, [pc, #288]	; (8009d48 <HAL_GPIO_Init+0x2bc>)
 8009c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c28:	089b      	lsrs	r3, r3, #2
 8009c2a:	3302      	adds	r3, #2
 8009c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c34:	f003 0303 	and.w	r3, r3, #3
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	220f      	movs	r2, #15
 8009c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c40:	43db      	mvns	r3, r3
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	4013      	ands	r3, r2
 8009c46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a40      	ldr	r2, [pc, #256]	; (8009d4c <HAL_GPIO_Init+0x2c0>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d013      	beq.n	8009c78 <HAL_GPIO_Init+0x1ec>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a3f      	ldr	r2, [pc, #252]	; (8009d50 <HAL_GPIO_Init+0x2c4>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d00d      	beq.n	8009c74 <HAL_GPIO_Init+0x1e8>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a3e      	ldr	r2, [pc, #248]	; (8009d54 <HAL_GPIO_Init+0x2c8>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d007      	beq.n	8009c70 <HAL_GPIO_Init+0x1e4>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a3d      	ldr	r2, [pc, #244]	; (8009d58 <HAL_GPIO_Init+0x2cc>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d101      	bne.n	8009c6c <HAL_GPIO_Init+0x1e0>
 8009c68:	2303      	movs	r3, #3
 8009c6a:	e006      	b.n	8009c7a <HAL_GPIO_Init+0x1ee>
 8009c6c:	2304      	movs	r3, #4
 8009c6e:	e004      	b.n	8009c7a <HAL_GPIO_Init+0x1ee>
 8009c70:	2302      	movs	r3, #2
 8009c72:	e002      	b.n	8009c7a <HAL_GPIO_Init+0x1ee>
 8009c74:	2301      	movs	r3, #1
 8009c76:	e000      	b.n	8009c7a <HAL_GPIO_Init+0x1ee>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c7c:	f002 0203 	and.w	r2, r2, #3
 8009c80:	0092      	lsls	r2, r2, #2
 8009c82:	4093      	lsls	r3, r2
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009c8a:	492f      	ldr	r1, [pc, #188]	; (8009d48 <HAL_GPIO_Init+0x2bc>)
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8e:	089b      	lsrs	r3, r3, #2
 8009c90:	3302      	adds	r3, #2
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d006      	beq.n	8009cb2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009ca4:	4b2d      	ldr	r3, [pc, #180]	; (8009d5c <HAL_GPIO_Init+0x2d0>)
 8009ca6:	689a      	ldr	r2, [r3, #8]
 8009ca8:	492c      	ldr	r1, [pc, #176]	; (8009d5c <HAL_GPIO_Init+0x2d0>)
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	608b      	str	r3, [r1, #8]
 8009cb0:	e006      	b.n	8009cc0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009cb2:	4b2a      	ldr	r3, [pc, #168]	; (8009d5c <HAL_GPIO_Init+0x2d0>)
 8009cb4:	689a      	ldr	r2, [r3, #8]
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	43db      	mvns	r3, r3
 8009cba:	4928      	ldr	r1, [pc, #160]	; (8009d5c <HAL_GPIO_Init+0x2d0>)
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d006      	beq.n	8009cda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009ccc:	4b23      	ldr	r3, [pc, #140]	; (8009d5c <HAL_GPIO_Init+0x2d0>)
 8009cce:	68da      	ldr	r2, [r3, #12]
 8009cd0:	4922      	ldr	r1, [pc, #136]	; (8009d5c <HAL_GPIO_Init+0x2d0>)
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	60cb      	str	r3, [r1, #12]
 8009cd8:	e006      	b.n	8009ce8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009cda:	4b20      	ldr	r3, [pc, #128]	; (8009d5c <HAL_GPIO_Init+0x2d0>)
 8009cdc:	68da      	ldr	r2, [r3, #12]
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	43db      	mvns	r3, r3
 8009ce2:	491e      	ldr	r1, [pc, #120]	; (8009d5c <HAL_GPIO_Init+0x2d0>)
 8009ce4:	4013      	ands	r3, r2
 8009ce6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d006      	beq.n	8009d02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009cf4:	4b19      	ldr	r3, [pc, #100]	; (8009d5c <HAL_GPIO_Init+0x2d0>)
 8009cf6:	685a      	ldr	r2, [r3, #4]
 8009cf8:	4918      	ldr	r1, [pc, #96]	; (8009d5c <HAL_GPIO_Init+0x2d0>)
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	604b      	str	r3, [r1, #4]
 8009d00:	e006      	b.n	8009d10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009d02:	4b16      	ldr	r3, [pc, #88]	; (8009d5c <HAL_GPIO_Init+0x2d0>)
 8009d04:	685a      	ldr	r2, [r3, #4]
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	43db      	mvns	r3, r3
 8009d0a:	4914      	ldr	r1, [pc, #80]	; (8009d5c <HAL_GPIO_Init+0x2d0>)
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d021      	beq.n	8009d60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009d1c:	4b0f      	ldr	r3, [pc, #60]	; (8009d5c <HAL_GPIO_Init+0x2d0>)
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	490e      	ldr	r1, [pc, #56]	; (8009d5c <HAL_GPIO_Init+0x2d0>)
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	600b      	str	r3, [r1, #0]
 8009d28:	e021      	b.n	8009d6e <HAL_GPIO_Init+0x2e2>
 8009d2a:	bf00      	nop
 8009d2c:	10320000 	.word	0x10320000
 8009d30:	10310000 	.word	0x10310000
 8009d34:	10220000 	.word	0x10220000
 8009d38:	10210000 	.word	0x10210000
 8009d3c:	10120000 	.word	0x10120000
 8009d40:	10110000 	.word	0x10110000
 8009d44:	40021000 	.word	0x40021000
 8009d48:	40010000 	.word	0x40010000
 8009d4c:	40010800 	.word	0x40010800
 8009d50:	40010c00 	.word	0x40010c00
 8009d54:	40011000 	.word	0x40011000
 8009d58:	40011400 	.word	0x40011400
 8009d5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009d60:	4b0b      	ldr	r3, [pc, #44]	; (8009d90 <HAL_GPIO_Init+0x304>)
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	43db      	mvns	r3, r3
 8009d68:	4909      	ldr	r1, [pc, #36]	; (8009d90 <HAL_GPIO_Init+0x304>)
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d70:	3301      	adds	r3, #1
 8009d72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f47f ae8e 	bne.w	8009aa0 <HAL_GPIO_Init+0x14>
  }
}
 8009d84:	bf00      	nop
 8009d86:	bf00      	nop
 8009d88:	372c      	adds	r7, #44	; 0x2c
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bc80      	pop	{r7}
 8009d8e:	4770      	bx	lr
 8009d90:	40010400 	.word	0x40010400

08009d94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	689a      	ldr	r2, [r3, #8]
 8009da4:	887b      	ldrh	r3, [r7, #2]
 8009da6:	4013      	ands	r3, r2
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d002      	beq.n	8009db2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009dac:	2301      	movs	r3, #1
 8009dae:	73fb      	strb	r3, [r7, #15]
 8009db0:	e001      	b.n	8009db6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009db2:	2300      	movs	r3, #0
 8009db4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3714      	adds	r7, #20
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bc80      	pop	{r7}
 8009dc0:	4770      	bx	lr

08009dc2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b083      	sub	sp, #12
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	460b      	mov	r3, r1
 8009dcc:	807b      	strh	r3, [r7, #2]
 8009dce:	4613      	mov	r3, r2
 8009dd0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009dd2:	787b      	ldrb	r3, [r7, #1]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d003      	beq.n	8009de0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009dd8:	887a      	ldrh	r2, [r7, #2]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009dde:	e003      	b.n	8009de8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009de0:	887b      	ldrh	r3, [r7, #2]
 8009de2:	041a      	lsls	r2, r3, #16
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	611a      	str	r2, [r3, #16]
}
 8009de8:	bf00      	nop
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bc80      	pop	{r7}
 8009df0:	4770      	bx	lr
	...

08009df4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009dfe:	4b08      	ldr	r3, [pc, #32]	; (8009e20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009e00:	695a      	ldr	r2, [r3, #20]
 8009e02:	88fb      	ldrh	r3, [r7, #6]
 8009e04:	4013      	ands	r3, r2
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d006      	beq.n	8009e18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009e0a:	4a05      	ldr	r2, [pc, #20]	; (8009e20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009e0c:	88fb      	ldrh	r3, [r7, #6]
 8009e0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009e10:	88fb      	ldrh	r3, [r7, #6]
 8009e12:	4618      	mov	r0, r3
 8009e14:	f000 f806 	bl	8009e24 <HAL_GPIO_EXTI_Callback>
  }
}
 8009e18:	bf00      	nop
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	40010400 	.word	0x40010400

08009e24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009e2e:	bf00      	nop
 8009e30:	370c      	adds	r7, #12
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bc80      	pop	{r7}
 8009e36:	4770      	bx	lr

08009e38 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8009e3c:	4b03      	ldr	r3, [pc, #12]	; (8009e4c <HAL_PWR_EnableBkUpAccess+0x14>)
 8009e3e:	2201      	movs	r2, #1
 8009e40:	601a      	str	r2, [r3, #0]
}
 8009e42:	bf00      	nop
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bc80      	pop	{r7}
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	420e0020 	.word	0x420e0020

08009e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b086      	sub	sp, #24
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d101      	bne.n	8009e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e272      	b.n	800a348 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f003 0301 	and.w	r3, r3, #1
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f000 8087 	beq.w	8009f7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009e70:	4b92      	ldr	r3, [pc, #584]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	f003 030c 	and.w	r3, r3, #12
 8009e78:	2b04      	cmp	r3, #4
 8009e7a:	d00c      	beq.n	8009e96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009e7c:	4b8f      	ldr	r3, [pc, #572]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	f003 030c 	and.w	r3, r3, #12
 8009e84:	2b08      	cmp	r3, #8
 8009e86:	d112      	bne.n	8009eae <HAL_RCC_OscConfig+0x5e>
 8009e88:	4b8c      	ldr	r3, [pc, #560]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e94:	d10b      	bne.n	8009eae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e96:	4b89      	ldr	r3, [pc, #548]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d06c      	beq.n	8009f7c <HAL_RCC_OscConfig+0x12c>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d168      	bne.n	8009f7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e24c      	b.n	800a348 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eb6:	d106      	bne.n	8009ec6 <HAL_RCC_OscConfig+0x76>
 8009eb8:	4b80      	ldr	r3, [pc, #512]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a7f      	ldr	r2, [pc, #508]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ec2:	6013      	str	r3, [r2, #0]
 8009ec4:	e02e      	b.n	8009f24 <HAL_RCC_OscConfig+0xd4>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d10c      	bne.n	8009ee8 <HAL_RCC_OscConfig+0x98>
 8009ece:	4b7b      	ldr	r3, [pc, #492]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a7a      	ldr	r2, [pc, #488]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ed8:	6013      	str	r3, [r2, #0]
 8009eda:	4b78      	ldr	r3, [pc, #480]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a77      	ldr	r2, [pc, #476]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009ee0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ee4:	6013      	str	r3, [r2, #0]
 8009ee6:	e01d      	b.n	8009f24 <HAL_RCC_OscConfig+0xd4>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ef0:	d10c      	bne.n	8009f0c <HAL_RCC_OscConfig+0xbc>
 8009ef2:	4b72      	ldr	r3, [pc, #456]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a71      	ldr	r2, [pc, #452]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009efc:	6013      	str	r3, [r2, #0]
 8009efe:	4b6f      	ldr	r3, [pc, #444]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a6e      	ldr	r2, [pc, #440]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f08:	6013      	str	r3, [r2, #0]
 8009f0a:	e00b      	b.n	8009f24 <HAL_RCC_OscConfig+0xd4>
 8009f0c:	4b6b      	ldr	r3, [pc, #428]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a6a      	ldr	r2, [pc, #424]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f16:	6013      	str	r3, [r2, #0]
 8009f18:	4b68      	ldr	r3, [pc, #416]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a67      	ldr	r2, [pc, #412]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d013      	beq.n	8009f54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f2c:	f7fe fa94 	bl	8008458 <HAL_GetTick>
 8009f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f32:	e008      	b.n	8009f46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f34:	f7fe fa90 	bl	8008458 <HAL_GetTick>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	1ad3      	subs	r3, r2, r3
 8009f3e:	2b64      	cmp	r3, #100	; 0x64
 8009f40:	d901      	bls.n	8009f46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009f42:	2303      	movs	r3, #3
 8009f44:	e200      	b.n	800a348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f46:	4b5d      	ldr	r3, [pc, #372]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d0f0      	beq.n	8009f34 <HAL_RCC_OscConfig+0xe4>
 8009f52:	e014      	b.n	8009f7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f54:	f7fe fa80 	bl	8008458 <HAL_GetTick>
 8009f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f5a:	e008      	b.n	8009f6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f5c:	f7fe fa7c 	bl	8008458 <HAL_GetTick>
 8009f60:	4602      	mov	r2, r0
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	2b64      	cmp	r3, #100	; 0x64
 8009f68:	d901      	bls.n	8009f6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009f6a:	2303      	movs	r3, #3
 8009f6c:	e1ec      	b.n	800a348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f6e:	4b53      	ldr	r3, [pc, #332]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1f0      	bne.n	8009f5c <HAL_RCC_OscConfig+0x10c>
 8009f7a:	e000      	b.n	8009f7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f003 0302 	and.w	r3, r3, #2
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d063      	beq.n	800a052 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009f8a:	4b4c      	ldr	r3, [pc, #304]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	f003 030c 	and.w	r3, r3, #12
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00b      	beq.n	8009fae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009f96:	4b49      	ldr	r3, [pc, #292]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	f003 030c 	and.w	r3, r3, #12
 8009f9e:	2b08      	cmp	r3, #8
 8009fa0:	d11c      	bne.n	8009fdc <HAL_RCC_OscConfig+0x18c>
 8009fa2:	4b46      	ldr	r3, [pc, #280]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d116      	bne.n	8009fdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009fae:	4b43      	ldr	r3, [pc, #268]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f003 0302 	and.w	r3, r3, #2
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d005      	beq.n	8009fc6 <HAL_RCC_OscConfig+0x176>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d001      	beq.n	8009fc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e1c0      	b.n	800a348 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fc6:	4b3d      	ldr	r3, [pc, #244]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	695b      	ldr	r3, [r3, #20]
 8009fd2:	00db      	lsls	r3, r3, #3
 8009fd4:	4939      	ldr	r1, [pc, #228]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009fda:	e03a      	b.n	800a052 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d020      	beq.n	800a026 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009fe4:	4b36      	ldr	r3, [pc, #216]	; (800a0c0 <HAL_RCC_OscConfig+0x270>)
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009fea:	f7fe fa35 	bl	8008458 <HAL_GetTick>
 8009fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ff0:	e008      	b.n	800a004 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ff2:	f7fe fa31 	bl	8008458 <HAL_GetTick>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	1ad3      	subs	r3, r2, r3
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	d901      	bls.n	800a004 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a000:	2303      	movs	r3, #3
 800a002:	e1a1      	b.n	800a348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a004:	4b2d      	ldr	r3, [pc, #180]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 0302 	and.w	r3, r3, #2
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d0f0      	beq.n	8009ff2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a010:	4b2a      	ldr	r3, [pc, #168]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	695b      	ldr	r3, [r3, #20]
 800a01c:	00db      	lsls	r3, r3, #3
 800a01e:	4927      	ldr	r1, [pc, #156]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 800a020:	4313      	orrs	r3, r2
 800a022:	600b      	str	r3, [r1, #0]
 800a024:	e015      	b.n	800a052 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a026:	4b26      	ldr	r3, [pc, #152]	; (800a0c0 <HAL_RCC_OscConfig+0x270>)
 800a028:	2200      	movs	r2, #0
 800a02a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a02c:	f7fe fa14 	bl	8008458 <HAL_GetTick>
 800a030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a032:	e008      	b.n	800a046 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a034:	f7fe fa10 	bl	8008458 <HAL_GetTick>
 800a038:	4602      	mov	r2, r0
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	2b02      	cmp	r3, #2
 800a040:	d901      	bls.n	800a046 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a042:	2303      	movs	r3, #3
 800a044:	e180      	b.n	800a348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a046:	4b1d      	ldr	r3, [pc, #116]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f003 0302 	and.w	r3, r3, #2
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1f0      	bne.n	800a034 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f003 0308 	and.w	r3, r3, #8
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d03a      	beq.n	800a0d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d019      	beq.n	800a09a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a066:	4b17      	ldr	r3, [pc, #92]	; (800a0c4 <HAL_RCC_OscConfig+0x274>)
 800a068:	2201      	movs	r2, #1
 800a06a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a06c:	f7fe f9f4 	bl	8008458 <HAL_GetTick>
 800a070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a072:	e008      	b.n	800a086 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a074:	f7fe f9f0 	bl	8008458 <HAL_GetTick>
 800a078:	4602      	mov	r2, r0
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	1ad3      	subs	r3, r2, r3
 800a07e:	2b02      	cmp	r3, #2
 800a080:	d901      	bls.n	800a086 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a082:	2303      	movs	r3, #3
 800a084:	e160      	b.n	800a348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a086:	4b0d      	ldr	r3, [pc, #52]	; (800a0bc <HAL_RCC_OscConfig+0x26c>)
 800a088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08a:	f003 0302 	and.w	r3, r3, #2
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d0f0      	beq.n	800a074 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a092:	2001      	movs	r0, #1
 800a094:	f000 fad0 	bl	800a638 <RCC_Delay>
 800a098:	e01c      	b.n	800a0d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a09a:	4b0a      	ldr	r3, [pc, #40]	; (800a0c4 <HAL_RCC_OscConfig+0x274>)
 800a09c:	2200      	movs	r2, #0
 800a09e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a0a0:	f7fe f9da 	bl	8008458 <HAL_GetTick>
 800a0a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a0a6:	e00f      	b.n	800a0c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0a8:	f7fe f9d6 	bl	8008458 <HAL_GetTick>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	d908      	bls.n	800a0c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	e146      	b.n	800a348 <HAL_RCC_OscConfig+0x4f8>
 800a0ba:	bf00      	nop
 800a0bc:	40021000 	.word	0x40021000
 800a0c0:	42420000 	.word	0x42420000
 800a0c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a0c8:	4b92      	ldr	r3, [pc, #584]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0cc:	f003 0302 	and.w	r3, r3, #2
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1e9      	bne.n	800a0a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 0304 	and.w	r3, r3, #4
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	f000 80a6 	beq.w	800a22e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a0e6:	4b8b      	ldr	r3, [pc, #556]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a0e8:	69db      	ldr	r3, [r3, #28]
 800a0ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d10d      	bne.n	800a10e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a0f2:	4b88      	ldr	r3, [pc, #544]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	4a87      	ldr	r2, [pc, #540]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a0f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0fc:	61d3      	str	r3, [r2, #28]
 800a0fe:	4b85      	ldr	r3, [pc, #532]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a100:	69db      	ldr	r3, [r3, #28]
 800a102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a106:	60bb      	str	r3, [r7, #8]
 800a108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a10a:	2301      	movs	r3, #1
 800a10c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a10e:	4b82      	ldr	r3, [pc, #520]	; (800a318 <HAL_RCC_OscConfig+0x4c8>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a116:	2b00      	cmp	r3, #0
 800a118:	d118      	bne.n	800a14c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a11a:	4b7f      	ldr	r3, [pc, #508]	; (800a318 <HAL_RCC_OscConfig+0x4c8>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a7e      	ldr	r2, [pc, #504]	; (800a318 <HAL_RCC_OscConfig+0x4c8>)
 800a120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a126:	f7fe f997 	bl	8008458 <HAL_GetTick>
 800a12a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a12c:	e008      	b.n	800a140 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a12e:	f7fe f993 	bl	8008458 <HAL_GetTick>
 800a132:	4602      	mov	r2, r0
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	2b64      	cmp	r3, #100	; 0x64
 800a13a:	d901      	bls.n	800a140 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a13c:	2303      	movs	r3, #3
 800a13e:	e103      	b.n	800a348 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a140:	4b75      	ldr	r3, [pc, #468]	; (800a318 <HAL_RCC_OscConfig+0x4c8>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d0f0      	beq.n	800a12e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d106      	bne.n	800a162 <HAL_RCC_OscConfig+0x312>
 800a154:	4b6f      	ldr	r3, [pc, #444]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a156:	6a1b      	ldr	r3, [r3, #32]
 800a158:	4a6e      	ldr	r2, [pc, #440]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a15a:	f043 0301 	orr.w	r3, r3, #1
 800a15e:	6213      	str	r3, [r2, #32]
 800a160:	e02d      	b.n	800a1be <HAL_RCC_OscConfig+0x36e>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10c      	bne.n	800a184 <HAL_RCC_OscConfig+0x334>
 800a16a:	4b6a      	ldr	r3, [pc, #424]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a16c:	6a1b      	ldr	r3, [r3, #32]
 800a16e:	4a69      	ldr	r2, [pc, #420]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a170:	f023 0301 	bic.w	r3, r3, #1
 800a174:	6213      	str	r3, [r2, #32]
 800a176:	4b67      	ldr	r3, [pc, #412]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a178:	6a1b      	ldr	r3, [r3, #32]
 800a17a:	4a66      	ldr	r2, [pc, #408]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a17c:	f023 0304 	bic.w	r3, r3, #4
 800a180:	6213      	str	r3, [r2, #32]
 800a182:	e01c      	b.n	800a1be <HAL_RCC_OscConfig+0x36e>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	2b05      	cmp	r3, #5
 800a18a:	d10c      	bne.n	800a1a6 <HAL_RCC_OscConfig+0x356>
 800a18c:	4b61      	ldr	r3, [pc, #388]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a18e:	6a1b      	ldr	r3, [r3, #32]
 800a190:	4a60      	ldr	r2, [pc, #384]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a192:	f043 0304 	orr.w	r3, r3, #4
 800a196:	6213      	str	r3, [r2, #32]
 800a198:	4b5e      	ldr	r3, [pc, #376]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a19a:	6a1b      	ldr	r3, [r3, #32]
 800a19c:	4a5d      	ldr	r2, [pc, #372]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a19e:	f043 0301 	orr.w	r3, r3, #1
 800a1a2:	6213      	str	r3, [r2, #32]
 800a1a4:	e00b      	b.n	800a1be <HAL_RCC_OscConfig+0x36e>
 800a1a6:	4b5b      	ldr	r3, [pc, #364]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a1a8:	6a1b      	ldr	r3, [r3, #32]
 800a1aa:	4a5a      	ldr	r2, [pc, #360]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a1ac:	f023 0301 	bic.w	r3, r3, #1
 800a1b0:	6213      	str	r3, [r2, #32]
 800a1b2:	4b58      	ldr	r3, [pc, #352]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a1b4:	6a1b      	ldr	r3, [r3, #32]
 800a1b6:	4a57      	ldr	r2, [pc, #348]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a1b8:	f023 0304 	bic.w	r3, r3, #4
 800a1bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d015      	beq.n	800a1f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a1c6:	f7fe f947 	bl	8008458 <HAL_GetTick>
 800a1ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a1cc:	e00a      	b.n	800a1e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1ce:	f7fe f943 	bl	8008458 <HAL_GetTick>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	1ad3      	subs	r3, r2, r3
 800a1d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d901      	bls.n	800a1e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	e0b1      	b.n	800a348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a1e4:	4b4b      	ldr	r3, [pc, #300]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a1e6:	6a1b      	ldr	r3, [r3, #32]
 800a1e8:	f003 0302 	and.w	r3, r3, #2
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d0ee      	beq.n	800a1ce <HAL_RCC_OscConfig+0x37e>
 800a1f0:	e014      	b.n	800a21c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a1f2:	f7fe f931 	bl	8008458 <HAL_GetTick>
 800a1f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a1f8:	e00a      	b.n	800a210 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1fa:	f7fe f92d 	bl	8008458 <HAL_GetTick>
 800a1fe:	4602      	mov	r2, r0
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	f241 3288 	movw	r2, #5000	; 0x1388
 800a208:	4293      	cmp	r3, r2
 800a20a:	d901      	bls.n	800a210 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e09b      	b.n	800a348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a210:	4b40      	ldr	r3, [pc, #256]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a212:	6a1b      	ldr	r3, [r3, #32]
 800a214:	f003 0302 	and.w	r3, r3, #2
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1ee      	bne.n	800a1fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a21c:	7dfb      	ldrb	r3, [r7, #23]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d105      	bne.n	800a22e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a222:	4b3c      	ldr	r3, [pc, #240]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a224:	69db      	ldr	r3, [r3, #28]
 800a226:	4a3b      	ldr	r2, [pc, #236]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a22c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	69db      	ldr	r3, [r3, #28]
 800a232:	2b00      	cmp	r3, #0
 800a234:	f000 8087 	beq.w	800a346 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a238:	4b36      	ldr	r3, [pc, #216]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	f003 030c 	and.w	r3, r3, #12
 800a240:	2b08      	cmp	r3, #8
 800a242:	d061      	beq.n	800a308 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	69db      	ldr	r3, [r3, #28]
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d146      	bne.n	800a2da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a24c:	4b33      	ldr	r3, [pc, #204]	; (800a31c <HAL_RCC_OscConfig+0x4cc>)
 800a24e:	2200      	movs	r2, #0
 800a250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a252:	f7fe f901 	bl	8008458 <HAL_GetTick>
 800a256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a258:	e008      	b.n	800a26c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a25a:	f7fe f8fd 	bl	8008458 <HAL_GetTick>
 800a25e:	4602      	mov	r2, r0
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	1ad3      	subs	r3, r2, r3
 800a264:	2b02      	cmp	r3, #2
 800a266:	d901      	bls.n	800a26c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a268:	2303      	movs	r3, #3
 800a26a:	e06d      	b.n	800a348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a26c:	4b29      	ldr	r3, [pc, #164]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1f0      	bne.n	800a25a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a1b      	ldr	r3, [r3, #32]
 800a27c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a280:	d108      	bne.n	800a294 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a282:	4b24      	ldr	r3, [pc, #144]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	4921      	ldr	r1, [pc, #132]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a290:	4313      	orrs	r3, r2
 800a292:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a294:	4b1f      	ldr	r3, [pc, #124]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a19      	ldr	r1, [r3, #32]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a4:	430b      	orrs	r3, r1
 800a2a6:	491b      	ldr	r1, [pc, #108]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a2ac:	4b1b      	ldr	r3, [pc, #108]	; (800a31c <HAL_RCC_OscConfig+0x4cc>)
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2b2:	f7fe f8d1 	bl	8008458 <HAL_GetTick>
 800a2b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a2b8:	e008      	b.n	800a2cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2ba:	f7fe f8cd 	bl	8008458 <HAL_GetTick>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d901      	bls.n	800a2cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	e03d      	b.n	800a348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a2cc:	4b11      	ldr	r3, [pc, #68]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d0f0      	beq.n	800a2ba <HAL_RCC_OscConfig+0x46a>
 800a2d8:	e035      	b.n	800a346 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2da:	4b10      	ldr	r3, [pc, #64]	; (800a31c <HAL_RCC_OscConfig+0x4cc>)
 800a2dc:	2200      	movs	r2, #0
 800a2de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2e0:	f7fe f8ba 	bl	8008458 <HAL_GetTick>
 800a2e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a2e6:	e008      	b.n	800a2fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2e8:	f7fe f8b6 	bl	8008458 <HAL_GetTick>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d901      	bls.n	800a2fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	e026      	b.n	800a348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a2fa:	4b06      	ldr	r3, [pc, #24]	; (800a314 <HAL_RCC_OscConfig+0x4c4>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1f0      	bne.n	800a2e8 <HAL_RCC_OscConfig+0x498>
 800a306:	e01e      	b.n	800a346 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	69db      	ldr	r3, [r3, #28]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d107      	bne.n	800a320 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	e019      	b.n	800a348 <HAL_RCC_OscConfig+0x4f8>
 800a314:	40021000 	.word	0x40021000
 800a318:	40007000 	.word	0x40007000
 800a31c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a320:	4b0b      	ldr	r3, [pc, #44]	; (800a350 <HAL_RCC_OscConfig+0x500>)
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a1b      	ldr	r3, [r3, #32]
 800a330:	429a      	cmp	r2, r3
 800a332:	d106      	bne.n	800a342 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a33e:	429a      	cmp	r2, r3
 800a340:	d001      	beq.n	800a346 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e000      	b.n	800a348 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a346:	2300      	movs	r3, #0
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3718      	adds	r7, #24
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	40021000 	.word	0x40021000

0800a354 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d101      	bne.n	800a368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	e0d0      	b.n	800a50a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a368:	4b6a      	ldr	r3, [pc, #424]	; (800a514 <HAL_RCC_ClockConfig+0x1c0>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 0307 	and.w	r3, r3, #7
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	429a      	cmp	r2, r3
 800a374:	d910      	bls.n	800a398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a376:	4b67      	ldr	r3, [pc, #412]	; (800a514 <HAL_RCC_ClockConfig+0x1c0>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f023 0207 	bic.w	r2, r3, #7
 800a37e:	4965      	ldr	r1, [pc, #404]	; (800a514 <HAL_RCC_ClockConfig+0x1c0>)
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	4313      	orrs	r3, r2
 800a384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a386:	4b63      	ldr	r3, [pc, #396]	; (800a514 <HAL_RCC_ClockConfig+0x1c0>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f003 0307 	and.w	r3, r3, #7
 800a38e:	683a      	ldr	r2, [r7, #0]
 800a390:	429a      	cmp	r2, r3
 800a392:	d001      	beq.n	800a398 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	e0b8      	b.n	800a50a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f003 0302 	and.w	r3, r3, #2
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d020      	beq.n	800a3e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 0304 	and.w	r3, r3, #4
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d005      	beq.n	800a3bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a3b0:	4b59      	ldr	r3, [pc, #356]	; (800a518 <HAL_RCC_ClockConfig+0x1c4>)
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	4a58      	ldr	r2, [pc, #352]	; (800a518 <HAL_RCC_ClockConfig+0x1c4>)
 800a3b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a3ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f003 0308 	and.w	r3, r3, #8
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d005      	beq.n	800a3d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a3c8:	4b53      	ldr	r3, [pc, #332]	; (800a518 <HAL_RCC_ClockConfig+0x1c4>)
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	4a52      	ldr	r2, [pc, #328]	; (800a518 <HAL_RCC_ClockConfig+0x1c4>)
 800a3ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a3d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a3d4:	4b50      	ldr	r3, [pc, #320]	; (800a518 <HAL_RCC_ClockConfig+0x1c4>)
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	494d      	ldr	r1, [pc, #308]	; (800a518 <HAL_RCC_ClockConfig+0x1c4>)
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 0301 	and.w	r3, r3, #1
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d040      	beq.n	800a474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d107      	bne.n	800a40a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a3fa:	4b47      	ldr	r3, [pc, #284]	; (800a518 <HAL_RCC_ClockConfig+0x1c4>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a402:	2b00      	cmp	r3, #0
 800a404:	d115      	bne.n	800a432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	e07f      	b.n	800a50a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	2b02      	cmp	r3, #2
 800a410:	d107      	bne.n	800a422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a412:	4b41      	ldr	r3, [pc, #260]	; (800a518 <HAL_RCC_ClockConfig+0x1c4>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d109      	bne.n	800a432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	e073      	b.n	800a50a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a422:	4b3d      	ldr	r3, [pc, #244]	; (800a518 <HAL_RCC_ClockConfig+0x1c4>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f003 0302 	and.w	r3, r3, #2
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	e06b      	b.n	800a50a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a432:	4b39      	ldr	r3, [pc, #228]	; (800a518 <HAL_RCC_ClockConfig+0x1c4>)
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	f023 0203 	bic.w	r2, r3, #3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	4936      	ldr	r1, [pc, #216]	; (800a518 <HAL_RCC_ClockConfig+0x1c4>)
 800a440:	4313      	orrs	r3, r2
 800a442:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a444:	f7fe f808 	bl	8008458 <HAL_GetTick>
 800a448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a44a:	e00a      	b.n	800a462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a44c:	f7fe f804 	bl	8008458 <HAL_GetTick>
 800a450:	4602      	mov	r2, r0
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	f241 3288 	movw	r2, #5000	; 0x1388
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d901      	bls.n	800a462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a45e:	2303      	movs	r3, #3
 800a460:	e053      	b.n	800a50a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a462:	4b2d      	ldr	r3, [pc, #180]	; (800a518 <HAL_RCC_ClockConfig+0x1c4>)
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	f003 020c 	and.w	r2, r3, #12
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	429a      	cmp	r2, r3
 800a472:	d1eb      	bne.n	800a44c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a474:	4b27      	ldr	r3, [pc, #156]	; (800a514 <HAL_RCC_ClockConfig+0x1c0>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f003 0307 	and.w	r3, r3, #7
 800a47c:	683a      	ldr	r2, [r7, #0]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d210      	bcs.n	800a4a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a482:	4b24      	ldr	r3, [pc, #144]	; (800a514 <HAL_RCC_ClockConfig+0x1c0>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f023 0207 	bic.w	r2, r3, #7
 800a48a:	4922      	ldr	r1, [pc, #136]	; (800a514 <HAL_RCC_ClockConfig+0x1c0>)
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	4313      	orrs	r3, r2
 800a490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a492:	4b20      	ldr	r3, [pc, #128]	; (800a514 <HAL_RCC_ClockConfig+0x1c0>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f003 0307 	and.w	r3, r3, #7
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d001      	beq.n	800a4a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e032      	b.n	800a50a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 0304 	and.w	r3, r3, #4
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d008      	beq.n	800a4c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a4b0:	4b19      	ldr	r3, [pc, #100]	; (800a518 <HAL_RCC_ClockConfig+0x1c4>)
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	4916      	ldr	r1, [pc, #88]	; (800a518 <HAL_RCC_ClockConfig+0x1c4>)
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f003 0308 	and.w	r3, r3, #8
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d009      	beq.n	800a4e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a4ce:	4b12      	ldr	r3, [pc, #72]	; (800a518 <HAL_RCC_ClockConfig+0x1c4>)
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	691b      	ldr	r3, [r3, #16]
 800a4da:	00db      	lsls	r3, r3, #3
 800a4dc:	490e      	ldr	r1, [pc, #56]	; (800a518 <HAL_RCC_ClockConfig+0x1c4>)
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a4e2:	f000 f821 	bl	800a528 <HAL_RCC_GetSysClockFreq>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	4b0b      	ldr	r3, [pc, #44]	; (800a518 <HAL_RCC_ClockConfig+0x1c4>)
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	091b      	lsrs	r3, r3, #4
 800a4ee:	f003 030f 	and.w	r3, r3, #15
 800a4f2:	490a      	ldr	r1, [pc, #40]	; (800a51c <HAL_RCC_ClockConfig+0x1c8>)
 800a4f4:	5ccb      	ldrb	r3, [r1, r3]
 800a4f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a4fa:	4a09      	ldr	r2, [pc, #36]	; (800a520 <HAL_RCC_ClockConfig+0x1cc>)
 800a4fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a4fe:	4b09      	ldr	r3, [pc, #36]	; (800a524 <HAL_RCC_ClockConfig+0x1d0>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4618      	mov	r0, r3
 800a504:	f7fd ff66 	bl	80083d4 <HAL_InitTick>

  return HAL_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	40022000 	.word	0x40022000
 800a518:	40021000 	.word	0x40021000
 800a51c:	08012cd0 	.word	0x08012cd0
 800a520:	20000038 	.word	0x20000038
 800a524:	2000003c 	.word	0x2000003c

0800a528 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a528:	b480      	push	{r7}
 800a52a:	b087      	sub	sp, #28
 800a52c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a52e:	2300      	movs	r3, #0
 800a530:	60fb      	str	r3, [r7, #12]
 800a532:	2300      	movs	r3, #0
 800a534:	60bb      	str	r3, [r7, #8]
 800a536:	2300      	movs	r3, #0
 800a538:	617b      	str	r3, [r7, #20]
 800a53a:	2300      	movs	r3, #0
 800a53c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a53e:	2300      	movs	r3, #0
 800a540:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a542:	4b1e      	ldr	r3, [pc, #120]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x94>)
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f003 030c 	and.w	r3, r3, #12
 800a54e:	2b04      	cmp	r3, #4
 800a550:	d002      	beq.n	800a558 <HAL_RCC_GetSysClockFreq+0x30>
 800a552:	2b08      	cmp	r3, #8
 800a554:	d003      	beq.n	800a55e <HAL_RCC_GetSysClockFreq+0x36>
 800a556:	e027      	b.n	800a5a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a558:	4b19      	ldr	r3, [pc, #100]	; (800a5c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800a55a:	613b      	str	r3, [r7, #16]
      break;
 800a55c:	e027      	b.n	800a5ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	0c9b      	lsrs	r3, r3, #18
 800a562:	f003 030f 	and.w	r3, r3, #15
 800a566:	4a17      	ldr	r2, [pc, #92]	; (800a5c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a568:	5cd3      	ldrb	r3, [r2, r3]
 800a56a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a572:	2b00      	cmp	r3, #0
 800a574:	d010      	beq.n	800a598 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a576:	4b11      	ldr	r3, [pc, #68]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x94>)
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	0c5b      	lsrs	r3, r3, #17
 800a57c:	f003 0301 	and.w	r3, r3, #1
 800a580:	4a11      	ldr	r2, [pc, #68]	; (800a5c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a582:	5cd3      	ldrb	r3, [r2, r3]
 800a584:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4a0d      	ldr	r2, [pc, #52]	; (800a5c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800a58a:	fb03 f202 	mul.w	r2, r3, r2
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	fbb2 f3f3 	udiv	r3, r2, r3
 800a594:	617b      	str	r3, [r7, #20]
 800a596:	e004      	b.n	800a5a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a0c      	ldr	r2, [pc, #48]	; (800a5cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800a59c:	fb02 f303 	mul.w	r3, r2, r3
 800a5a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	613b      	str	r3, [r7, #16]
      break;
 800a5a6:	e002      	b.n	800a5ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a5a8:	4b09      	ldr	r3, [pc, #36]	; (800a5d0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800a5aa:	613b      	str	r3, [r7, #16]
      break;
 800a5ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a5ae:	693b      	ldr	r3, [r7, #16]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	371c      	adds	r7, #28
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bc80      	pop	{r7}
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	40021000 	.word	0x40021000
 800a5c0:	00f42400 	.word	0x00f42400
 800a5c4:	08012ce8 	.word	0x08012ce8
 800a5c8:	08012cf8 	.word	0x08012cf8
 800a5cc:	003d0900 	.word	0x003d0900
 800a5d0:	007a1200 	.word	0x007a1200

0800a5d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a5d8:	4b02      	ldr	r3, [pc, #8]	; (800a5e4 <HAL_RCC_GetHCLKFreq+0x10>)
 800a5da:	681b      	ldr	r3, [r3, #0]
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bc80      	pop	{r7}
 800a5e2:	4770      	bx	lr
 800a5e4:	20000038 	.word	0x20000038

0800a5e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a5ec:	f7ff fff2 	bl	800a5d4 <HAL_RCC_GetHCLKFreq>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	4b05      	ldr	r3, [pc, #20]	; (800a608 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	0a1b      	lsrs	r3, r3, #8
 800a5f8:	f003 0307 	and.w	r3, r3, #7
 800a5fc:	4903      	ldr	r1, [pc, #12]	; (800a60c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a5fe:	5ccb      	ldrb	r3, [r1, r3]
 800a600:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a604:	4618      	mov	r0, r3
 800a606:	bd80      	pop	{r7, pc}
 800a608:	40021000 	.word	0x40021000
 800a60c:	08012ce0 	.word	0x08012ce0

0800a610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a614:	f7ff ffde 	bl	800a5d4 <HAL_RCC_GetHCLKFreq>
 800a618:	4602      	mov	r2, r0
 800a61a:	4b05      	ldr	r3, [pc, #20]	; (800a630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	0adb      	lsrs	r3, r3, #11
 800a620:	f003 0307 	and.w	r3, r3, #7
 800a624:	4903      	ldr	r1, [pc, #12]	; (800a634 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a626:	5ccb      	ldrb	r3, [r1, r3]
 800a628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	40021000 	.word	0x40021000
 800a634:	08012ce0 	.word	0x08012ce0

0800a638 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a640:	4b0a      	ldr	r3, [pc, #40]	; (800a66c <RCC_Delay+0x34>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a0a      	ldr	r2, [pc, #40]	; (800a670 <RCC_Delay+0x38>)
 800a646:	fba2 2303 	umull	r2, r3, r2, r3
 800a64a:	0a5b      	lsrs	r3, r3, #9
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	fb02 f303 	mul.w	r3, r2, r3
 800a652:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a654:	bf00      	nop
  }
  while (Delay --);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	1e5a      	subs	r2, r3, #1
 800a65a:	60fa      	str	r2, [r7, #12]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1f9      	bne.n	800a654 <RCC_Delay+0x1c>
}
 800a660:	bf00      	nop
 800a662:	bf00      	nop
 800a664:	3714      	adds	r7, #20
 800a666:	46bd      	mov	sp, r7
 800a668:	bc80      	pop	{r7}
 800a66a:	4770      	bx	lr
 800a66c:	20000038 	.word	0x20000038
 800a670:	10624dd3 	.word	0x10624dd3

0800a674 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b086      	sub	sp, #24
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800a67c:	2300      	movs	r3, #0
 800a67e:	613b      	str	r3, [r7, #16]
 800a680:	2300      	movs	r3, #0
 800a682:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f003 0301 	and.w	r3, r3, #1
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d07d      	beq.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800a690:	2300      	movs	r3, #0
 800a692:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a694:	4b4f      	ldr	r3, [pc, #316]	; (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a696:	69db      	ldr	r3, [r3, #28]
 800a698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d10d      	bne.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a6a0:	4b4c      	ldr	r3, [pc, #304]	; (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a6a2:	69db      	ldr	r3, [r3, #28]
 800a6a4:	4a4b      	ldr	r2, [pc, #300]	; (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a6a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6aa:	61d3      	str	r3, [r2, #28]
 800a6ac:	4b49      	ldr	r3, [pc, #292]	; (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a6ae:	69db      	ldr	r3, [r3, #28]
 800a6b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6b4:	60bb      	str	r3, [r7, #8]
 800a6b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6bc:	4b46      	ldr	r3, [pc, #280]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d118      	bne.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a6c8:	4b43      	ldr	r3, [pc, #268]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a42      	ldr	r2, [pc, #264]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a6ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a6d4:	f7fd fec0 	bl	8008458 <HAL_GetTick>
 800a6d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6da:	e008      	b.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a6dc:	f7fd febc 	bl	8008458 <HAL_GetTick>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	2b64      	cmp	r3, #100	; 0x64
 800a6e8:	d901      	bls.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800a6ea:	2303      	movs	r3, #3
 800a6ec:	e06d      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6ee:	4b3a      	ldr	r3, [pc, #232]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d0f0      	beq.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a6fa:	4b36      	ldr	r3, [pc, #216]	; (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a6fc:	6a1b      	ldr	r3, [r3, #32]
 800a6fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a702:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d02e      	beq.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	429a      	cmp	r2, r3
 800a716:	d027      	beq.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a718:	4b2e      	ldr	r3, [pc, #184]	; (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a71a:	6a1b      	ldr	r3, [r3, #32]
 800a71c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a720:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a722:	4b2e      	ldr	r3, [pc, #184]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a724:	2201      	movs	r2, #1
 800a726:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a728:	4b2c      	ldr	r3, [pc, #176]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a72a:	2200      	movs	r2, #0
 800a72c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a72e:	4a29      	ldr	r2, [pc, #164]	; (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f003 0301 	and.w	r3, r3, #1
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d014      	beq.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a73e:	f7fd fe8b 	bl	8008458 <HAL_GetTick>
 800a742:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a744:	e00a      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a746:	f7fd fe87 	bl	8008458 <HAL_GetTick>
 800a74a:	4602      	mov	r2, r0
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	1ad3      	subs	r3, r2, r3
 800a750:	f241 3288 	movw	r2, #5000	; 0x1388
 800a754:	4293      	cmp	r3, r2
 800a756:	d901      	bls.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800a758:	2303      	movs	r3, #3
 800a75a:	e036      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a75c:	4b1d      	ldr	r3, [pc, #116]	; (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a75e:	6a1b      	ldr	r3, [r3, #32]
 800a760:	f003 0302 	and.w	r3, r3, #2
 800a764:	2b00      	cmp	r3, #0
 800a766:	d0ee      	beq.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a768:	4b1a      	ldr	r3, [pc, #104]	; (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a76a:	6a1b      	ldr	r3, [r3, #32]
 800a76c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	4917      	ldr	r1, [pc, #92]	; (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a776:	4313      	orrs	r3, r2
 800a778:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a77a:	7dfb      	ldrb	r3, [r7, #23]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d105      	bne.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a780:	4b14      	ldr	r3, [pc, #80]	; (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a782:	69db      	ldr	r3, [r3, #28]
 800a784:	4a13      	ldr	r2, [pc, #76]	; (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a78a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 0302 	and.w	r3, r3, #2
 800a794:	2b00      	cmp	r3, #0
 800a796:	d008      	beq.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a798:	4b0e      	ldr	r3, [pc, #56]	; (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	490b      	ldr	r1, [pc, #44]	; (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f003 0310 	and.w	r3, r3, #16
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d008      	beq.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a7b6:	4b07      	ldr	r3, [pc, #28]	; (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	4904      	ldr	r1, [pc, #16]	; (800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3718      	adds	r7, #24
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	40021000 	.word	0x40021000
 800a7d8:	40007000 	.word	0x40007000
 800a7dc:	42420440 	.word	0x42420440

0800a7e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b088      	sub	sp, #32
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	617b      	str	r3, [r7, #20]
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	61fb      	str	r3, [r7, #28]
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	60fb      	str	r3, [r7, #12]
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b10      	cmp	r3, #16
 800a800:	d00a      	beq.n	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2b10      	cmp	r3, #16
 800a806:	f200 8089 	bhi.w	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d045      	beq.n	800a89c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2b02      	cmp	r3, #2
 800a814:	d074      	beq.n	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800a816:	e081      	b.n	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      temp_reg = RCC->CFGR;
 800a818:	4b45      	ldr	r3, [pc, #276]	; (800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800a81e:	4b44      	ldr	r3, [pc, #272]	; (800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a826:	2b00      	cmp	r3, #0
 800a828:	d07a      	beq.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	0c9b      	lsrs	r3, r3, #18
 800a82e:	f003 030f 	and.w	r3, r3, #15
 800a832:	4a40      	ldr	r2, [pc, #256]	; (800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800a834:	5cd3      	ldrb	r3, [r2, r3]
 800a836:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d015      	beq.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a842:	4b3b      	ldr	r3, [pc, #236]	; (800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	0c5b      	lsrs	r3, r3, #17
 800a848:	f003 0301 	and.w	r3, r3, #1
 800a84c:	4a3a      	ldr	r2, [pc, #232]	; (800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800a84e:	5cd3      	ldrb	r3, [r2, r3]
 800a850:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00d      	beq.n	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800a85c:	4a37      	ldr	r2, [pc, #220]	; (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	fbb2 f2f3 	udiv	r2, r2, r3
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	fb02 f303 	mul.w	r3, r2, r3
 800a86a:	61fb      	str	r3, [r7, #28]
 800a86c:	e004      	b.n	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	4a33      	ldr	r2, [pc, #204]	; (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800a872:	fb02 f303 	mul.w	r3, r2, r3
 800a876:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800a878:	4b2d      	ldr	r3, [pc, #180]	; (800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a884:	d102      	bne.n	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	61bb      	str	r3, [r7, #24]
      break;
 800a88a:	e049      	b.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
          frequency = (pllclk * 2) / 3;
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	005b      	lsls	r3, r3, #1
 800a890:	4a2c      	ldr	r2, [pc, #176]	; (800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800a892:	fba2 2303 	umull	r2, r3, r2, r3
 800a896:	085b      	lsrs	r3, r3, #1
 800a898:	61bb      	str	r3, [r7, #24]
      break;
 800a89a:	e041      	b.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      temp_reg = RCC->BDCR;
 800a89c:	4b24      	ldr	r3, [pc, #144]	; (800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800a89e:	6a1b      	ldr	r3, [r3, #32]
 800a8a0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8ac:	d108      	bne.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f003 0302 	and.w	r3, r3, #2
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d003      	beq.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800a8b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8bc:	61bb      	str	r3, [r7, #24]
 800a8be:	e01e      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8ca:	d109      	bne.n	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800a8cc:	4b18      	ldr	r3, [pc, #96]	; (800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d0:	f003 0302 	and.w	r3, r3, #2
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d003      	beq.n	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800a8d8:	f649 4340 	movw	r3, #40000	; 0x9c40
 800a8dc:	61bb      	str	r3, [r7, #24]
 800a8de:	e00e      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8ea:	d11b      	bne.n	800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800a8ec:	4b10      	ldr	r3, [pc, #64]	; (800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d015      	beq.n	800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        frequency = HSE_VALUE / 128U;
 800a8f8:	4b13      	ldr	r3, [pc, #76]	; (800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800a8fa:	61bb      	str	r3, [r7, #24]
      break;
 800a8fc:	e012      	b.n	800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800a8fe:	e011      	b.n	800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800a900:	f7ff fe86 	bl	800a610 <HAL_RCC_GetPCLK2Freq>
 800a904:	4602      	mov	r2, r0
 800a906:	4b0a      	ldr	r3, [pc, #40]	; (800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	0b9b      	lsrs	r3, r3, #14
 800a90c:	f003 0303 	and.w	r3, r3, #3
 800a910:	3301      	adds	r3, #1
 800a912:	005b      	lsls	r3, r3, #1
 800a914:	fbb2 f3f3 	udiv	r3, r2, r3
 800a918:	61bb      	str	r3, [r7, #24]
      break;
 800a91a:	e004      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 800a91c:	bf00      	nop
 800a91e:	e002      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 800a920:	bf00      	nop
 800a922:	e000      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 800a924:	bf00      	nop
    }
  }
  return (frequency);
 800a926:	69bb      	ldr	r3, [r7, #24]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3720      	adds	r7, #32
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	40021000 	.word	0x40021000
 800a934:	08012cfc 	.word	0x08012cfc
 800a938:	08012d0c 	.word	0x08012d0c
 800a93c:	00f42400 	.word	0x00f42400
 800a940:	003d0900 	.word	0x003d0900
 800a944:	aaaaaaab 	.word	0xaaaaaaab
 800a948:	0001e848 	.word	0x0001e848

0800a94c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800a954:	2300      	movs	r3, #0
 800a956:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d101      	bne.n	800a962 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	e07a      	b.n	800aa58 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	7c5b      	ldrb	r3, [r3, #17]
 800a966:	b2db      	uxtb	r3, r3
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d105      	bne.n	800a978 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f7fd f99c 	bl	8007cb0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2202      	movs	r2, #2
 800a97c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 f9e0 	bl	800ad44 <HAL_RTC_WaitForSynchro>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d004      	beq.n	800a994 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2204      	movs	r2, #4
 800a98e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	e061      	b.n	800aa58 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fa99 	bl	800aecc <RTC_EnterInitMode>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d004      	beq.n	800a9aa <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2204      	movs	r2, #4
 800a9a4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e056      	b.n	800aa58 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	685a      	ldr	r2, [r3, #4]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f022 0207 	bic.w	r2, r2, #7
 800a9b8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d005      	beq.n	800a9ce <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800a9c2:	4b27      	ldr	r3, [pc, #156]	; (800aa60 <HAL_RTC_Init+0x114>)
 800a9c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9c6:	4a26      	ldr	r2, [pc, #152]	; (800aa60 <HAL_RTC_Init+0x114>)
 800a9c8:	f023 0301 	bic.w	r3, r3, #1
 800a9cc:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800a9ce:	4b24      	ldr	r3, [pc, #144]	; (800aa60 <HAL_RTC_Init+0x114>)
 800a9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d2:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	4921      	ldr	r1, [pc, #132]	; (800aa60 <HAL_RTC_Init+0x114>)
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e8:	d003      	beq.n	800a9f2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	60fb      	str	r3, [r7, #12]
 800a9f0:	e00e      	b.n	800aa10 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800a9f2:	2001      	movs	r0, #1
 800a9f4:	f7ff fef4 	bl	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a9f8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d104      	bne.n	800aa0a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2204      	movs	r2, #4
 800aa04:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e026      	b.n	800aa58 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	0c1a      	lsrs	r2, r3, #16
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f002 020f 	and.w	r2, r2, #15
 800aa1c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	b292      	uxth	r2, r2
 800aa26:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 fa77 	bl	800af1c <RTC_ExitInitMode>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d004      	beq.n	800aa3e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2204      	movs	r2, #4
 800aa38:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e00c      	b.n	800aa58 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800aa56:	2300      	movs	r3, #0
  }
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3710      	adds	r7, #16
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	40006c00 	.word	0x40006c00

0800aa64 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800aa64:	b590      	push	{r4, r7, lr}
 800aa66:	b087      	sub	sp, #28
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800aa70:	2300      	movs	r3, #0
 800aa72:	617b      	str	r3, [r7, #20]
 800aa74:	2300      	movs	r3, #0
 800aa76:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d002      	beq.n	800aa84 <HAL_RTC_SetTime+0x20>
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d101      	bne.n	800aa88 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e080      	b.n	800ab8a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	7c1b      	ldrb	r3, [r3, #16]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d101      	bne.n	800aa94 <HAL_RTC_SetTime+0x30>
 800aa90:	2302      	movs	r3, #2
 800aa92:	e07a      	b.n	800ab8a <HAL_RTC_SetTime+0x126>
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2201      	movs	r2, #1
 800aa98:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2202      	movs	r2, #2
 800aa9e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d113      	bne.n	800aace <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800aab0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	785b      	ldrb	r3, [r3, #1]
 800aab8:	4619      	mov	r1, r3
 800aaba:	460b      	mov	r3, r1
 800aabc:	011b      	lsls	r3, r3, #4
 800aabe:	1a5b      	subs	r3, r3, r1
 800aac0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800aac2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800aac8:	4413      	add	r3, r2
 800aaca:	617b      	str	r3, [r7, #20]
 800aacc:	e01e      	b.n	800ab0c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	4618      	mov	r0, r3
 800aad4:	f000 fa67 	bl	800afa6 <RTC_Bcd2ToByte>
 800aad8:	4603      	mov	r3, r0
 800aada:	461a      	mov	r2, r3
 800aadc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800aae0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	785b      	ldrb	r3, [r3, #1]
 800aae8:	4618      	mov	r0, r3
 800aaea:	f000 fa5c 	bl	800afa6 <RTC_Bcd2ToByte>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	011b      	lsls	r3, r3, #4
 800aaf6:	1a9b      	subs	r3, r3, r2
 800aaf8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800aafa:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	789b      	ldrb	r3, [r3, #2]
 800ab00:	4618      	mov	r0, r3
 800ab02:	f000 fa50 	bl	800afa6 <RTC_Bcd2ToByte>
 800ab06:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800ab08:	4423      	add	r3, r4
 800ab0a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800ab0c:	6979      	ldr	r1, [r7, #20]
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f000 f975 	bl	800adfe <RTC_WriteTimeCounter>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d007      	beq.n	800ab2a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2204      	movs	r2, #4
 800ab1e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2200      	movs	r2, #0
 800ab24:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	e02f      	b.n	800ab8a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	685a      	ldr	r2, [r3, #4]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f022 0205 	bic.w	r2, r2, #5
 800ab38:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	f000 f986 	bl	800ae4c <RTC_ReadAlarmCounter>
 800ab40:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab48:	d018      	beq.n	800ab7c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800ab4a:	693a      	ldr	r2, [r7, #16]
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d214      	bcs.n	800ab7c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800ab58:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800ab5c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800ab5e:	6939      	ldr	r1, [r7, #16]
 800ab60:	68f8      	ldr	r0, [r7, #12]
 800ab62:	f000 f98c 	bl	800ae7e <RTC_WriteAlarmCounter>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d007      	beq.n	800ab7c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2204      	movs	r2, #4
 800ab70:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2200      	movs	r2, #0
 800ab76:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e006      	b.n	800ab8a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800ab88:	2300      	movs	r3, #0
  }
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	371c      	adds	r7, #28
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd90      	pop	{r4, r7, pc}
	...

0800ab94 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b088      	sub	sp, #32
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800aba0:	2300      	movs	r3, #0
 800aba2:	61bb      	str	r3, [r7, #24]
 800aba4:	2300      	movs	r3, #0
 800aba6:	61fb      	str	r3, [r7, #28]
 800aba8:	2300      	movs	r3, #0
 800abaa:	617b      	str	r3, [r7, #20]
 800abac:	2300      	movs	r3, #0
 800abae:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d002      	beq.n	800abbc <HAL_RTC_GetTime+0x28>
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d101      	bne.n	800abc0 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800abbc:	2301      	movs	r3, #1
 800abbe:	e0b5      	b.n	800ad2c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	f003 0304 	and.w	r3, r3, #4
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d001      	beq.n	800abd2 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	e0ac      	b.n	800ad2c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f000 f8e3 	bl	800ad9e <RTC_ReadTimeCounter>
 800abd8:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	4a55      	ldr	r2, [pc, #340]	; (800ad34 <HAL_RTC_GetTime+0x1a0>)
 800abde:	fba2 2303 	umull	r2, r3, r2, r3
 800abe2:	0adb      	lsrs	r3, r3, #11
 800abe4:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800abe6:	69ba      	ldr	r2, [r7, #24]
 800abe8:	4b52      	ldr	r3, [pc, #328]	; (800ad34 <HAL_RTC_GetTime+0x1a0>)
 800abea:	fba3 1302 	umull	r1, r3, r3, r2
 800abee:	0adb      	lsrs	r3, r3, #11
 800abf0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800abf4:	fb01 f303 	mul.w	r3, r1, r3
 800abf8:	1ad3      	subs	r3, r2, r3
 800abfa:	4a4f      	ldr	r2, [pc, #316]	; (800ad38 <HAL_RTC_GetTime+0x1a4>)
 800abfc:	fba2 2303 	umull	r2, r3, r2, r3
 800ac00:	095b      	lsrs	r3, r3, #5
 800ac02:	b2da      	uxtb	r2, r3
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800ac08:	69bb      	ldr	r3, [r7, #24]
 800ac0a:	4a4a      	ldr	r2, [pc, #296]	; (800ad34 <HAL_RTC_GetTime+0x1a0>)
 800ac0c:	fba2 1203 	umull	r1, r2, r2, r3
 800ac10:	0ad2      	lsrs	r2, r2, #11
 800ac12:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800ac16:	fb01 f202 	mul.w	r2, r1, r2
 800ac1a:	1a9a      	subs	r2, r3, r2
 800ac1c:	4b46      	ldr	r3, [pc, #280]	; (800ad38 <HAL_RTC_GetTime+0x1a4>)
 800ac1e:	fba3 1302 	umull	r1, r3, r3, r2
 800ac22:	0959      	lsrs	r1, r3, #5
 800ac24:	460b      	mov	r3, r1
 800ac26:	011b      	lsls	r3, r3, #4
 800ac28:	1a5b      	subs	r3, r3, r1
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	1ad1      	subs	r1, r2, r3
 800ac2e:	b2ca      	uxtb	r2, r1
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	2b17      	cmp	r3, #23
 800ac38:	d955      	bls.n	800ace6 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	4a3f      	ldr	r2, [pc, #252]	; (800ad3c <HAL_RTC_GetTime+0x1a8>)
 800ac3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac42:	091b      	lsrs	r3, r3, #4
 800ac44:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800ac46:	6939      	ldr	r1, [r7, #16]
 800ac48:	4b3c      	ldr	r3, [pc, #240]	; (800ad3c <HAL_RTC_GetTime+0x1a8>)
 800ac4a:	fba3 2301 	umull	r2, r3, r3, r1
 800ac4e:	091a      	lsrs	r2, r3, #4
 800ac50:	4613      	mov	r3, r2
 800ac52:	005b      	lsls	r3, r3, #1
 800ac54:	4413      	add	r3, r2
 800ac56:	00db      	lsls	r3, r3, #3
 800ac58:	1aca      	subs	r2, r1, r3
 800ac5a:	b2d2      	uxtb	r2, r2
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f000 f8f3 	bl	800ae4c <RTC_ReadAlarmCounter>
 800ac66:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac6e:	d008      	beq.n	800ac82 <HAL_RTC_GetTime+0xee>
 800ac70:	69fa      	ldr	r2, [r7, #28]
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d904      	bls.n	800ac82 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800ac78:	69fa      	ldr	r2, [r7, #28]
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	1ad3      	subs	r3, r2, r3
 800ac7e:	61fb      	str	r3, [r7, #28]
 800ac80:	e002      	b.n	800ac88 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800ac82:	f04f 33ff 	mov.w	r3, #4294967295
 800ac86:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	4a2d      	ldr	r2, [pc, #180]	; (800ad40 <HAL_RTC_GetTime+0x1ac>)
 800ac8c:	fb02 f303 	mul.w	r3, r2, r3
 800ac90:	69ba      	ldr	r2, [r7, #24]
 800ac92:	1ad3      	subs	r3, r2, r3
 800ac94:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800ac96:	69b9      	ldr	r1, [r7, #24]
 800ac98:	68f8      	ldr	r0, [r7, #12]
 800ac9a:	f000 f8b0 	bl	800adfe <RTC_WriteTimeCounter>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d001      	beq.n	800aca8 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800aca4:	2301      	movs	r3, #1
 800aca6:	e041      	b.n	800ad2c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acae:	d00c      	beq.n	800acca <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800acb0:	69fa      	ldr	r2, [r7, #28]
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	4413      	add	r3, r2
 800acb6:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800acb8:	69f9      	ldr	r1, [r7, #28]
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f000 f8df 	bl	800ae7e <RTC_WriteAlarmCounter>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00a      	beq.n	800acdc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	e030      	b.n	800ad2c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800acca:	69f9      	ldr	r1, [r7, #28]
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f000 f8d6 	bl	800ae7e <RTC_WriteAlarmCounter>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d001      	beq.n	800acdc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	e027      	b.n	800ad2c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800acdc:	6979      	ldr	r1, [r7, #20]
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	f000 f97e 	bl	800afe0 <RTC_DateUpdate>
 800ace4:	e003      	b.n	800acee <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	b2da      	uxtb	r2, r3
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d01a      	beq.n	800ad2a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	4618      	mov	r0, r3
 800acfa:	f000 f937 	bl	800af6c <RTC_ByteToBcd2>
 800acfe:	4603      	mov	r3, r0
 800ad00:	461a      	mov	r2, r3
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	785b      	ldrb	r3, [r3, #1]
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f000 f92e 	bl	800af6c <RTC_ByteToBcd2>
 800ad10:	4603      	mov	r3, r0
 800ad12:	461a      	mov	r2, r3
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	789b      	ldrb	r3, [r3, #2]
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f000 f925 	bl	800af6c <RTC_ByteToBcd2>
 800ad22:	4603      	mov	r3, r0
 800ad24:	461a      	mov	r2, r3
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3720      	adds	r7, #32
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	91a2b3c5 	.word	0x91a2b3c5
 800ad38:	88888889 	.word	0x88888889
 800ad3c:	aaaaaaab 	.word	0xaaaaaaab
 800ad40:	00015180 	.word	0x00015180

0800ad44 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d101      	bne.n	800ad5a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e01d      	b.n	800ad96 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	685a      	ldr	r2, [r3, #4]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f022 0208 	bic.w	r2, r2, #8
 800ad68:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800ad6a:	f7fd fb75 	bl	8008458 <HAL_GetTick>
 800ad6e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800ad70:	e009      	b.n	800ad86 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800ad72:	f7fd fb71 	bl	8008458 <HAL_GetTick>
 800ad76:	4602      	mov	r2, r0
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad80:	d901      	bls.n	800ad86 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800ad82:	2303      	movs	r3, #3
 800ad84:	e007      	b.n	800ad96 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	f003 0308 	and.w	r3, r3, #8
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d0ee      	beq.n	800ad72 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800ad9e:	b480      	push	{r7}
 800ada0:	b087      	sub	sp, #28
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800ada6:	2300      	movs	r3, #0
 800ada8:	827b      	strh	r3, [r7, #18]
 800adaa:	2300      	movs	r3, #0
 800adac:	823b      	strh	r3, [r7, #16]
 800adae:	2300      	movs	r3, #0
 800adb0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800adb2:	2300      	movs	r3, #0
 800adb4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	699b      	ldr	r3, [r3, #24]
 800adbc:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	69db      	ldr	r3, [r3, #28]
 800adc4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	699b      	ldr	r3, [r3, #24]
 800adcc:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800adce:	8a7a      	ldrh	r2, [r7, #18]
 800add0:	8a3b      	ldrh	r3, [r7, #16]
 800add2:	429a      	cmp	r2, r3
 800add4:	d008      	beq.n	800ade8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800add6:	8a3b      	ldrh	r3, [r7, #16]
 800add8:	041a      	lsls	r2, r3, #16
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	69db      	ldr	r3, [r3, #28]
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	4313      	orrs	r3, r2
 800ade4:	617b      	str	r3, [r7, #20]
 800ade6:	e004      	b.n	800adf2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800ade8:	8a7b      	ldrh	r3, [r7, #18]
 800adea:	041a      	lsls	r2, r3, #16
 800adec:	89fb      	ldrh	r3, [r7, #14]
 800adee:	4313      	orrs	r3, r2
 800adf0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800adf2:	697b      	ldr	r3, [r7, #20]
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	371c      	adds	r7, #28
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bc80      	pop	{r7}
 800adfc:	4770      	bx	lr

0800adfe <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b084      	sub	sp, #16
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
 800ae06:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 f85d 	bl	800aecc <RTC_EnterInitMode>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d002      	beq.n	800ae1e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	73fb      	strb	r3, [r7, #15]
 800ae1c:	e011      	b.n	800ae42 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	0c12      	lsrs	r2, r2, #16
 800ae26:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	683a      	ldr	r2, [r7, #0]
 800ae2e:	b292      	uxth	r2, r2
 800ae30:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 f872 	bl	800af1c <RTC_ExitInitMode>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d001      	beq.n	800ae42 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800ae42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b085      	sub	sp, #20
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800ae54:	2300      	movs	r3, #0
 800ae56:	81fb      	strh	r3, [r7, #14]
 800ae58:	2300      	movs	r3, #0
 800ae5a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	6a1b      	ldr	r3, [r3, #32]
 800ae62:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800ae6c:	89fb      	ldrh	r3, [r7, #14]
 800ae6e:	041a      	lsls	r2, r3, #16
 800ae70:	89bb      	ldrh	r3, [r7, #12]
 800ae72:	4313      	orrs	r3, r2
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bc80      	pop	{r7}
 800ae7c:	4770      	bx	lr

0800ae7e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b084      	sub	sp, #16
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
 800ae86:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 f81d 	bl	800aecc <RTC_EnterInitMode>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d002      	beq.n	800ae9e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	73fb      	strb	r3, [r7, #15]
 800ae9c:	e011      	b.n	800aec2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	683a      	ldr	r2, [r7, #0]
 800aea4:	0c12      	lsrs	r2, r2, #16
 800aea6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	683a      	ldr	r2, [r7, #0]
 800aeae:	b292      	uxth	r2, r2
 800aeb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 f832 	bl	800af1c <RTC_ExitInitMode>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d001      	beq.n	800aec2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800aebe:	2301      	movs	r3, #1
 800aec0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800aec2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aed4:	2300      	movs	r3, #0
 800aed6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800aed8:	f7fd fabe 	bl	8008458 <HAL_GetTick>
 800aedc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800aede:	e009      	b.n	800aef4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800aee0:	f7fd faba 	bl	8008458 <HAL_GetTick>
 800aee4:	4602      	mov	r2, r0
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	1ad3      	subs	r3, r2, r3
 800aeea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aeee:	d901      	bls.n	800aef4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800aef0:	2303      	movs	r3, #3
 800aef2:	e00f      	b.n	800af14 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	f003 0320 	and.w	r3, r3, #32
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d0ee      	beq.n	800aee0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	685a      	ldr	r2, [r3, #4]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f042 0210 	orr.w	r2, r2, #16
 800af10:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800af12:	2300      	movs	r3, #0
}
 800af14:	4618      	mov	r0, r3
 800af16:	3710      	adds	r7, #16
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800af24:	2300      	movs	r3, #0
 800af26:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	685a      	ldr	r2, [r3, #4]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f022 0210 	bic.w	r2, r2, #16
 800af36:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800af38:	f7fd fa8e 	bl	8008458 <HAL_GetTick>
 800af3c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800af3e:	e009      	b.n	800af54 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800af40:	f7fd fa8a 	bl	8008458 <HAL_GetTick>
 800af44:	4602      	mov	r2, r0
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	1ad3      	subs	r3, r2, r3
 800af4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af4e:	d901      	bls.n	800af54 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800af50:	2303      	movs	r3, #3
 800af52:	e007      	b.n	800af64 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	f003 0320 	and.w	r3, r3, #32
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d0ee      	beq.n	800af40 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800af62:	2300      	movs	r3, #0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	4603      	mov	r3, r0
 800af74:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800af76:	2300      	movs	r3, #0
 800af78:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800af7a:	e005      	b.n	800af88 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	3301      	adds	r3, #1
 800af80:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800af82:	79fb      	ldrb	r3, [r7, #7]
 800af84:	3b0a      	subs	r3, #10
 800af86:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800af88:	79fb      	ldrb	r3, [r7, #7]
 800af8a:	2b09      	cmp	r3, #9
 800af8c:	d8f6      	bhi.n	800af7c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	b2db      	uxtb	r3, r3
 800af92:	011b      	lsls	r3, r3, #4
 800af94:	b2da      	uxtb	r2, r3
 800af96:	79fb      	ldrb	r3, [r7, #7]
 800af98:	4313      	orrs	r3, r2
 800af9a:	b2db      	uxtb	r3, r3
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3714      	adds	r7, #20
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bc80      	pop	{r7}
 800afa4:	4770      	bx	lr

0800afa6 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800afa6:	b480      	push	{r7}
 800afa8:	b085      	sub	sp, #20
 800afaa:	af00      	add	r7, sp, #0
 800afac:	4603      	mov	r3, r0
 800afae:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800afb0:	2300      	movs	r3, #0
 800afb2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800afb4:	79fb      	ldrb	r3, [r7, #7]
 800afb6:	091b      	lsrs	r3, r3, #4
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	461a      	mov	r2, r3
 800afbc:	4613      	mov	r3, r2
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	4413      	add	r3, r2
 800afc2:	005b      	lsls	r3, r3, #1
 800afc4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800afc6:	79fb      	ldrb	r3, [r7, #7]
 800afc8:	f003 030f 	and.w	r3, r3, #15
 800afcc:	b2da      	uxtb	r2, r3
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	4413      	add	r3, r2
 800afd4:	b2db      	uxtb	r3, r3
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3714      	adds	r7, #20
 800afda:	46bd      	mov	sp, r7
 800afdc:	bc80      	pop	{r7}
 800afde:	4770      	bx	lr

0800afe0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800afea:	2300      	movs	r3, #0
 800afec:	617b      	str	r3, [r7, #20]
 800afee:	2300      	movs	r3, #0
 800aff0:	613b      	str	r3, [r7, #16]
 800aff2:	2300      	movs	r3, #0
 800aff4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800aff6:	2300      	movs	r3, #0
 800aff8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	7bdb      	ldrb	r3, [r3, #15]
 800affe:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	7b5b      	ldrb	r3, [r3, #13]
 800b004:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	7b9b      	ldrb	r3, [r3, #14]
 800b00a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800b00c:	2300      	movs	r3, #0
 800b00e:	60bb      	str	r3, [r7, #8]
 800b010:	e06f      	b.n	800b0f2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d011      	beq.n	800b03c <RTC_DateUpdate+0x5c>
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	2b03      	cmp	r3, #3
 800b01c:	d00e      	beq.n	800b03c <RTC_DateUpdate+0x5c>
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	2b05      	cmp	r3, #5
 800b022:	d00b      	beq.n	800b03c <RTC_DateUpdate+0x5c>
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	2b07      	cmp	r3, #7
 800b028:	d008      	beq.n	800b03c <RTC_DateUpdate+0x5c>
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	2b08      	cmp	r3, #8
 800b02e:	d005      	beq.n	800b03c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	2b0a      	cmp	r3, #10
 800b034:	d002      	beq.n	800b03c <RTC_DateUpdate+0x5c>
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	2b0c      	cmp	r3, #12
 800b03a:	d117      	bne.n	800b06c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2b1e      	cmp	r3, #30
 800b040:	d803      	bhi.n	800b04a <RTC_DateUpdate+0x6a>
      {
        day++;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	3301      	adds	r3, #1
 800b046:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800b048:	e050      	b.n	800b0ec <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	2b0c      	cmp	r3, #12
 800b04e:	d005      	beq.n	800b05c <RTC_DateUpdate+0x7c>
        {
          month++;
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	3301      	adds	r3, #1
 800b054:	613b      	str	r3, [r7, #16]
          day = 1U;
 800b056:	2301      	movs	r3, #1
 800b058:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800b05a:	e047      	b.n	800b0ec <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800b05c:	2301      	movs	r3, #1
 800b05e:	613b      	str	r3, [r7, #16]
          day = 1U;
 800b060:	2301      	movs	r3, #1
 800b062:	60fb      	str	r3, [r7, #12]
          year++;
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	3301      	adds	r3, #1
 800b068:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800b06a:	e03f      	b.n	800b0ec <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	2b04      	cmp	r3, #4
 800b070:	d008      	beq.n	800b084 <RTC_DateUpdate+0xa4>
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	2b06      	cmp	r3, #6
 800b076:	d005      	beq.n	800b084 <RTC_DateUpdate+0xa4>
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	2b09      	cmp	r3, #9
 800b07c:	d002      	beq.n	800b084 <RTC_DateUpdate+0xa4>
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	2b0b      	cmp	r3, #11
 800b082:	d10c      	bne.n	800b09e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2b1d      	cmp	r3, #29
 800b088:	d803      	bhi.n	800b092 <RTC_DateUpdate+0xb2>
      {
        day++;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	3301      	adds	r3, #1
 800b08e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800b090:	e02c      	b.n	800b0ec <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	3301      	adds	r3, #1
 800b096:	613b      	str	r3, [r7, #16]
        day = 1U;
 800b098:	2301      	movs	r3, #1
 800b09a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800b09c:	e026      	b.n	800b0ec <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	d123      	bne.n	800b0ec <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2b1b      	cmp	r3, #27
 800b0a8:	d803      	bhi.n	800b0b2 <RTC_DateUpdate+0xd2>
      {
        day++;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	60fb      	str	r3, [r7, #12]
 800b0b0:	e01c      	b.n	800b0ec <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2b1c      	cmp	r3, #28
 800b0b6:	d111      	bne.n	800b0dc <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f000 f839 	bl	800b134 <RTC_IsLeapYear>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d003      	beq.n	800b0d0 <RTC_DateUpdate+0xf0>
        {
          day++;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	60fb      	str	r3, [r7, #12]
 800b0ce:	e00d      	b.n	800b0ec <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	613b      	str	r3, [r7, #16]
          day = 1U;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	60fb      	str	r3, [r7, #12]
 800b0da:	e007      	b.n	800b0ec <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2b1d      	cmp	r3, #29
 800b0e0:	d104      	bne.n	800b0ec <RTC_DateUpdate+0x10c>
      {
        month++;
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	613b      	str	r3, [r7, #16]
        day = 1U;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	60bb      	str	r3, [r7, #8]
 800b0f2:	68ba      	ldr	r2, [r7, #8]
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d38b      	bcc.n	800b012 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	b2da      	uxtb	r2, r3
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	b2da      	uxtb	r2, r3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	b2da      	uxtb	r2, r3
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	b2db      	uxtb	r3, r3
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	b2d2      	uxtb	r2, r2
 800b11a:	4619      	mov	r1, r3
 800b11c:	6978      	ldr	r0, [r7, #20]
 800b11e:	f000 f83b 	bl	800b198 <RTC_WeekDayNum>
 800b122:	4603      	mov	r3, r0
 800b124:	461a      	mov	r2, r3
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	731a      	strb	r2, [r3, #12]
}
 800b12a:	bf00      	nop
 800b12c:	3718      	adds	r7, #24
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
	...

0800b134 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	4603      	mov	r3, r0
 800b13c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800b13e:	88fb      	ldrh	r3, [r7, #6]
 800b140:	f003 0303 	and.w	r3, r3, #3
 800b144:	b29b      	uxth	r3, r3
 800b146:	2b00      	cmp	r3, #0
 800b148:	d001      	beq.n	800b14e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800b14a:	2300      	movs	r3, #0
 800b14c:	e01d      	b.n	800b18a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800b14e:	88fb      	ldrh	r3, [r7, #6]
 800b150:	4a10      	ldr	r2, [pc, #64]	; (800b194 <RTC_IsLeapYear+0x60>)
 800b152:	fba2 1203 	umull	r1, r2, r2, r3
 800b156:	0952      	lsrs	r2, r2, #5
 800b158:	2164      	movs	r1, #100	; 0x64
 800b15a:	fb01 f202 	mul.w	r2, r1, r2
 800b15e:	1a9b      	subs	r3, r3, r2
 800b160:	b29b      	uxth	r3, r3
 800b162:	2b00      	cmp	r3, #0
 800b164:	d001      	beq.n	800b16a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800b166:	2301      	movs	r3, #1
 800b168:	e00f      	b.n	800b18a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800b16a:	88fb      	ldrh	r3, [r7, #6]
 800b16c:	4a09      	ldr	r2, [pc, #36]	; (800b194 <RTC_IsLeapYear+0x60>)
 800b16e:	fba2 1203 	umull	r1, r2, r2, r3
 800b172:	09d2      	lsrs	r2, r2, #7
 800b174:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800b178:	fb01 f202 	mul.w	r2, r1, r2
 800b17c:	1a9b      	subs	r3, r3, r2
 800b17e:	b29b      	uxth	r3, r3
 800b180:	2b00      	cmp	r3, #0
 800b182:	d101      	bne.n	800b188 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800b184:	2301      	movs	r3, #1
 800b186:	e000      	b.n	800b18a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800b188:	2300      	movs	r3, #0
  }
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	370c      	adds	r7, #12
 800b18e:	46bd      	mov	sp, r7
 800b190:	bc80      	pop	{r7}
 800b192:	4770      	bx	lr
 800b194:	51eb851f 	.word	0x51eb851f

0800b198 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	70fb      	strb	r3, [r7, #3]
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	60bb      	str	r3, [r7, #8]
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800b1b6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800b1b8:	78fb      	ldrb	r3, [r7, #3]
 800b1ba:	2b02      	cmp	r3, #2
 800b1bc:	d82d      	bhi.n	800b21a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800b1be:	78fa      	ldrb	r2, [r7, #3]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	005b      	lsls	r3, r3, #1
 800b1c4:	4413      	add	r3, r2
 800b1c6:	00db      	lsls	r3, r3, #3
 800b1c8:	1a9b      	subs	r3, r3, r2
 800b1ca:	4a2c      	ldr	r2, [pc, #176]	; (800b27c <RTC_WeekDayNum+0xe4>)
 800b1cc:	fba2 2303 	umull	r2, r3, r2, r3
 800b1d0:	085a      	lsrs	r2, r3, #1
 800b1d2:	78bb      	ldrb	r3, [r7, #2]
 800b1d4:	441a      	add	r2, r3
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	441a      	add	r2, r3
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	089b      	lsrs	r3, r3, #2
 800b1e0:	441a      	add	r2, r3
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	4926      	ldr	r1, [pc, #152]	; (800b280 <RTC_WeekDayNum+0xe8>)
 800b1e8:	fba1 1303 	umull	r1, r3, r1, r3
 800b1ec:	095b      	lsrs	r3, r3, #5
 800b1ee:	1ad2      	subs	r2, r2, r3
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	4922      	ldr	r1, [pc, #136]	; (800b280 <RTC_WeekDayNum+0xe8>)
 800b1f6:	fba1 1303 	umull	r1, r3, r1, r3
 800b1fa:	09db      	lsrs	r3, r3, #7
 800b1fc:	4413      	add	r3, r2
 800b1fe:	1d1a      	adds	r2, r3, #4
 800b200:	4b20      	ldr	r3, [pc, #128]	; (800b284 <RTC_WeekDayNum+0xec>)
 800b202:	fba3 1302 	umull	r1, r3, r3, r2
 800b206:	1ad1      	subs	r1, r2, r3
 800b208:	0849      	lsrs	r1, r1, #1
 800b20a:	440b      	add	r3, r1
 800b20c:	0899      	lsrs	r1, r3, #2
 800b20e:	460b      	mov	r3, r1
 800b210:	00db      	lsls	r3, r3, #3
 800b212:	1a5b      	subs	r3, r3, r1
 800b214:	1ad3      	subs	r3, r2, r3
 800b216:	60fb      	str	r3, [r7, #12]
 800b218:	e029      	b.n	800b26e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800b21a:	78fa      	ldrb	r2, [r7, #3]
 800b21c:	4613      	mov	r3, r2
 800b21e:	005b      	lsls	r3, r3, #1
 800b220:	4413      	add	r3, r2
 800b222:	00db      	lsls	r3, r3, #3
 800b224:	1a9b      	subs	r3, r3, r2
 800b226:	4a15      	ldr	r2, [pc, #84]	; (800b27c <RTC_WeekDayNum+0xe4>)
 800b228:	fba2 2303 	umull	r2, r3, r2, r3
 800b22c:	085a      	lsrs	r2, r3, #1
 800b22e:	78bb      	ldrb	r3, [r7, #2]
 800b230:	441a      	add	r2, r3
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	441a      	add	r2, r3
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	089b      	lsrs	r3, r3, #2
 800b23a:	441a      	add	r2, r3
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	4910      	ldr	r1, [pc, #64]	; (800b280 <RTC_WeekDayNum+0xe8>)
 800b240:	fba1 1303 	umull	r1, r3, r1, r3
 800b244:	095b      	lsrs	r3, r3, #5
 800b246:	1ad2      	subs	r2, r2, r3
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	490d      	ldr	r1, [pc, #52]	; (800b280 <RTC_WeekDayNum+0xe8>)
 800b24c:	fba1 1303 	umull	r1, r3, r1, r3
 800b250:	09db      	lsrs	r3, r3, #7
 800b252:	4413      	add	r3, r2
 800b254:	1c9a      	adds	r2, r3, #2
 800b256:	4b0b      	ldr	r3, [pc, #44]	; (800b284 <RTC_WeekDayNum+0xec>)
 800b258:	fba3 1302 	umull	r1, r3, r3, r2
 800b25c:	1ad1      	subs	r1, r2, r3
 800b25e:	0849      	lsrs	r1, r1, #1
 800b260:	440b      	add	r3, r1
 800b262:	0899      	lsrs	r1, r3, #2
 800b264:	460b      	mov	r3, r1
 800b266:	00db      	lsls	r3, r3, #3
 800b268:	1a5b      	subs	r3, r3, r1
 800b26a:	1ad3      	subs	r3, r2, r3
 800b26c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	b2db      	uxtb	r3, r3
}
 800b272:	4618      	mov	r0, r3
 800b274:	3714      	adds	r7, #20
 800b276:	46bd      	mov	sp, r7
 800b278:	bc80      	pop	{r7}
 800b27a:	4770      	bx	lr
 800b27c:	38e38e39 	.word	0x38e38e39
 800b280:	51eb851f 	.word	0x51eb851f
 800b284:	24924925 	.word	0x24924925

0800b288 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d101      	bne.n	800b29a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b296:	2301      	movs	r3, #1
 800b298:	e076      	b.n	800b388 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d108      	bne.n	800b2b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b2aa:	d009      	beq.n	800b2c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	61da      	str	r2, [r3, #28]
 800b2b2:	e005      	b.n	800b2c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d106      	bne.n	800b2e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f7fc fd0c 	bl	8007cf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2202      	movs	r2, #2
 800b2e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b308:	431a      	orrs	r2, r3
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b312:	431a      	orrs	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	f003 0302 	and.w	r3, r3, #2
 800b31c:	431a      	orrs	r2, r3
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	695b      	ldr	r3, [r3, #20]
 800b322:	f003 0301 	and.w	r3, r3, #1
 800b326:	431a      	orrs	r2, r3
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	699b      	ldr	r3, [r3, #24]
 800b32c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b330:	431a      	orrs	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	69db      	ldr	r3, [r3, #28]
 800b336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b33a:	431a      	orrs	r2, r3
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6a1b      	ldr	r3, [r3, #32]
 800b340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b344:	ea42 0103 	orr.w	r1, r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b34c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	430a      	orrs	r2, r1
 800b356:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	699b      	ldr	r3, [r3, #24]
 800b35c:	0c1a      	lsrs	r2, r3, #16
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f002 0204 	and.w	r2, r2, #4
 800b366:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	69da      	ldr	r2, [r3, #28]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b376:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2201      	movs	r2, #1
 800b382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	4613      	mov	r3, r2
 800b39c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d101      	bne.n	800b3b0 <HAL_SPI_Transmit_DMA+0x20>
 800b3ac:	2302      	movs	r3, #2
 800b3ae:	e097      	b.n	800b4e0 <HAL_SPI_Transmit_DMA+0x150>
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d002      	beq.n	800b3ca <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800b3c4:	2302      	movs	r3, #2
 800b3c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b3c8:	e085      	b.n	800b4d6 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d002      	beq.n	800b3d6 <HAL_SPI_Transmit_DMA+0x46>
 800b3d0:	88fb      	ldrh	r3, [r7, #6]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d102      	bne.n	800b3dc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b3da:	e07c      	b.n	800b4d6 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2203      	movs	r2, #3
 800b3e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	68ba      	ldr	r2, [r7, #8]
 800b3ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	88fa      	ldrh	r2, [r7, #6]
 800b3f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	88fa      	ldrh	r2, [r7, #6]
 800b3fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2200      	movs	r2, #0
 800b400:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2200      	movs	r2, #0
 800b40c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2200      	movs	r2, #0
 800b412:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2200      	movs	r2, #0
 800b418:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	689b      	ldr	r3, [r3, #8]
 800b41e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b422:	d10f      	bne.n	800b444 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b432:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b442:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b448:	4a27      	ldr	r2, [pc, #156]	; (800b4e8 <HAL_SPI_Transmit_DMA+0x158>)
 800b44a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b450:	4a26      	ldr	r2, [pc, #152]	; (800b4ec <HAL_SPI_Transmit_DMA+0x15c>)
 800b452:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b458:	4a25      	ldr	r2, [pc, #148]	; (800b4f0 <HAL_SPI_Transmit_DMA+0x160>)
 800b45a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b460:	2200      	movs	r2, #0
 800b462:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b46c:	4619      	mov	r1, r3
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	330c      	adds	r3, #12
 800b474:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b47a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b47c:	f7fd feb4 	bl	80091e8 <HAL_DMA_Start_IT>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d008      	beq.n	800b498 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b48a:	f043 0210 	orr.w	r2, r3, #16
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800b492:	2301      	movs	r3, #1
 800b494:	75fb      	strb	r3, [r7, #23]

    goto error;
 800b496:	e01e      	b.n	800b4d6 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4a2:	2b40      	cmp	r3, #64	; 0x40
 800b4a4:	d007      	beq.n	800b4b6 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4b4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	685a      	ldr	r2, [r3, #4]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f042 0220 	orr.w	r2, r2, #32
 800b4c4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	685a      	ldr	r2, [r3, #4]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f042 0202 	orr.w	r2, r2, #2
 800b4d4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b4de:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3718      	adds	r7, #24
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	0800b5eb 	.word	0x0800b5eb
 800b4ec:	0800b545 	.word	0x0800b545
 800b4f0:	0800b607 	.word	0x0800b607

0800b4f4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b4fc:	bf00      	nop
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	bc80      	pop	{r7}
 800b504:	4770      	bx	lr

0800b506 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b506:	b480      	push	{r7}
 800b508:	b083      	sub	sp, #12
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b50e:	bf00      	nop
 800b510:	370c      	adds	r7, #12
 800b512:	46bd      	mov	sp, r7
 800b514:	bc80      	pop	{r7}
 800b516:	4770      	bx	lr

0800b518 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b520:	bf00      	nop
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	bc80      	pop	{r7}
 800b528:	4770      	bx	lr

0800b52a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800b52a:	b480      	push	{r7}
 800b52c:	b083      	sub	sp, #12
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b538:	b2db      	uxtb	r3, r3
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	370c      	adds	r7, #12
 800b53e:	46bd      	mov	sp, r7
 800b540:	bc80      	pop	{r7}
 800b542:	4770      	bx	lr

0800b544 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b550:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b552:	f7fc ff81 	bl	8008458 <HAL_GetTick>
 800b556:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f003 0320 	and.w	r3, r3, #32
 800b562:	2b20      	cmp	r3, #32
 800b564:	d03b      	beq.n	800b5de <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	685a      	ldr	r2, [r3, #4]
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f022 0220 	bic.w	r2, r2, #32
 800b574:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	685a      	ldr	r2, [r3, #4]
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f022 0202 	bic.w	r2, r2, #2
 800b584:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b586:	693a      	ldr	r2, [r7, #16]
 800b588:	2164      	movs	r1, #100	; 0x64
 800b58a:	6978      	ldr	r0, [r7, #20]
 800b58c:	f000 f8e4 	bl	800b758 <SPI_EndRxTxTransaction>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d005      	beq.n	800b5a2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b59a:	f043 0220 	orr.w	r2, r3, #32
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d10a      	bne.n	800b5c0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	60fb      	str	r3, [r7, #12]
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	60fb      	str	r3, [r7, #12]
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	60fb      	str	r3, [r7, #12]
 800b5be:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d003      	beq.n	800b5de <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b5d6:	6978      	ldr	r0, [r7, #20]
 800b5d8:	f7ff ff9e 	bl	800b518 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b5dc:	e002      	b.n	800b5e4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800b5de:	6978      	ldr	r0, [r7, #20]
 800b5e0:	f7ff ff88 	bl	800b4f4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b5e4:	3718      	adds	r7, #24
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b084      	sub	sp, #16
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f7ff ff84 	bl	800b506 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b5fe:	bf00      	nop
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b084      	sub	sp, #16
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b612:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	685a      	ldr	r2, [r3, #4]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f022 0203 	bic.w	r2, r2, #3
 800b622:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b628:	f043 0210 	orr.w	r2, r3, #16
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2201      	movs	r2, #1
 800b634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b638:	68f8      	ldr	r0, [r7, #12]
 800b63a:	f7ff ff6d 	bl	800b518 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b63e:	bf00      	nop
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
	...

0800b648 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b088      	sub	sp, #32
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	603b      	str	r3, [r7, #0]
 800b654:	4613      	mov	r3, r2
 800b656:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b658:	f7fc fefe 	bl	8008458 <HAL_GetTick>
 800b65c:	4602      	mov	r2, r0
 800b65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b660:	1a9b      	subs	r3, r3, r2
 800b662:	683a      	ldr	r2, [r7, #0]
 800b664:	4413      	add	r3, r2
 800b666:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b668:	f7fc fef6 	bl	8008458 <HAL_GetTick>
 800b66c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b66e:	4b39      	ldr	r3, [pc, #228]	; (800b754 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	015b      	lsls	r3, r3, #5
 800b674:	0d1b      	lsrs	r3, r3, #20
 800b676:	69fa      	ldr	r2, [r7, #28]
 800b678:	fb02 f303 	mul.w	r3, r2, r3
 800b67c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b67e:	e054      	b.n	800b72a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b686:	d050      	beq.n	800b72a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b688:	f7fc fee6 	bl	8008458 <HAL_GetTick>
 800b68c:	4602      	mov	r2, r0
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	1ad3      	subs	r3, r2, r3
 800b692:	69fa      	ldr	r2, [r7, #28]
 800b694:	429a      	cmp	r2, r3
 800b696:	d902      	bls.n	800b69e <SPI_WaitFlagStateUntilTimeout+0x56>
 800b698:	69fb      	ldr	r3, [r7, #28]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d13d      	bne.n	800b71a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	685a      	ldr	r2, [r3, #4]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b6ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b6b6:	d111      	bne.n	800b6dc <SPI_WaitFlagStateUntilTimeout+0x94>
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6c0:	d004      	beq.n	800b6cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6ca:	d107      	bne.n	800b6dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6e4:	d10f      	bne.n	800b706 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b6f4:	601a      	str	r2, [r3, #0]
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b704:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2201      	movs	r2, #1
 800b70a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2200      	movs	r2, #0
 800b712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b716:	2303      	movs	r3, #3
 800b718:	e017      	b.n	800b74a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d101      	bne.n	800b724 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b720:	2300      	movs	r3, #0
 800b722:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	3b01      	subs	r3, #1
 800b728:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	689a      	ldr	r2, [r3, #8]
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	4013      	ands	r3, r2
 800b734:	68ba      	ldr	r2, [r7, #8]
 800b736:	429a      	cmp	r2, r3
 800b738:	bf0c      	ite	eq
 800b73a:	2301      	moveq	r3, #1
 800b73c:	2300      	movne	r3, #0
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	461a      	mov	r2, r3
 800b742:	79fb      	ldrb	r3, [r7, #7]
 800b744:	429a      	cmp	r2, r3
 800b746:	d19b      	bne.n	800b680 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b748:	2300      	movs	r3, #0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3720      	adds	r7, #32
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	20000038 	.word	0x20000038

0800b758 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b086      	sub	sp, #24
 800b75c:	af02      	add	r7, sp, #8
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	9300      	str	r3, [sp, #0]
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	2200      	movs	r2, #0
 800b76c:	2180      	movs	r1, #128	; 0x80
 800b76e:	68f8      	ldr	r0, [r7, #12]
 800b770:	f7ff ff6a 	bl	800b648 <SPI_WaitFlagStateUntilTimeout>
 800b774:	4603      	mov	r3, r0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d007      	beq.n	800b78a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b77e:	f043 0220 	orr.w	r2, r3, #32
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800b786:	2303      	movs	r3, #3
 800b788:	e000      	b.n	800b78c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3710      	adds	r7, #16
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b794:	b480      	push	{r7}
 800b796:	b085      	sub	sp, #20
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d001      	beq.n	800b7ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	e032      	b.n	800b812 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2202      	movs	r2, #2
 800b7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4a18      	ldr	r2, [pc, #96]	; (800b81c <HAL_TIM_Base_Start+0x88>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d00e      	beq.n	800b7dc <HAL_TIM_Base_Start+0x48>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7c6:	d009      	beq.n	800b7dc <HAL_TIM_Base_Start+0x48>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a14      	ldr	r2, [pc, #80]	; (800b820 <HAL_TIM_Base_Start+0x8c>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d004      	beq.n	800b7dc <HAL_TIM_Base_Start+0x48>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a13      	ldr	r2, [pc, #76]	; (800b824 <HAL_TIM_Base_Start+0x90>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d111      	bne.n	800b800 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	f003 0307 	and.w	r3, r3, #7
 800b7e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2b06      	cmp	r3, #6
 800b7ec:	d010      	beq.n	800b810 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f042 0201 	orr.w	r2, r2, #1
 800b7fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7fe:	e007      	b.n	800b810 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f042 0201 	orr.w	r2, r2, #1
 800b80e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b810:	2300      	movs	r3, #0
}
 800b812:	4618      	mov	r0, r3
 800b814:	3714      	adds	r7, #20
 800b816:	46bd      	mov	sp, r7
 800b818:	bc80      	pop	{r7}
 800b81a:	4770      	bx	lr
 800b81c:	40012c00 	.word	0x40012c00
 800b820:	40000400 	.word	0x40000400
 800b824:	40000800 	.word	0x40000800

0800b828 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b828:	b480      	push	{r7}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b836:	b2db      	uxtb	r3, r3
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d001      	beq.n	800b840 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	e03a      	b.n	800b8b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2202      	movs	r2, #2
 800b844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	68da      	ldr	r2, [r3, #12]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f042 0201 	orr.w	r2, r2, #1
 800b856:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a18      	ldr	r2, [pc, #96]	; (800b8c0 <HAL_TIM_Base_Start_IT+0x98>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d00e      	beq.n	800b880 <HAL_TIM_Base_Start_IT+0x58>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b86a:	d009      	beq.n	800b880 <HAL_TIM_Base_Start_IT+0x58>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a14      	ldr	r2, [pc, #80]	; (800b8c4 <HAL_TIM_Base_Start_IT+0x9c>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d004      	beq.n	800b880 <HAL_TIM_Base_Start_IT+0x58>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a13      	ldr	r2, [pc, #76]	; (800b8c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d111      	bne.n	800b8a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	689b      	ldr	r3, [r3, #8]
 800b886:	f003 0307 	and.w	r3, r3, #7
 800b88a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2b06      	cmp	r3, #6
 800b890:	d010      	beq.n	800b8b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f042 0201 	orr.w	r2, r2, #1
 800b8a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8a2:	e007      	b.n	800b8b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f042 0201 	orr.w	r2, r2, #1
 800b8b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b8b4:	2300      	movs	r3, #0
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3714      	adds	r7, #20
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bc80      	pop	{r7}
 800b8be:	4770      	bx	lr
 800b8c0:	40012c00 	.word	0x40012c00
 800b8c4:	40000400 	.word	0x40000400
 800b8c8:	40000800 	.word	0x40000800

0800b8cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d101      	bne.n	800b8de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e041      	b.n	800b962 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d106      	bne.n	800b8f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f7fc fa6a 	bl	8007dcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2202      	movs	r2, #2
 800b8fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	3304      	adds	r3, #4
 800b908:	4619      	mov	r1, r3
 800b90a:	4610      	mov	r0, r2
 800b90c:	f000 fc0e 	bl	800c12c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2201      	movs	r2, #1
 800b914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2201      	movs	r2, #1
 800b91c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2201      	movs	r2, #1
 800b92c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2201      	movs	r2, #1
 800b934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2201      	movs	r2, #1
 800b93c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2201      	movs	r2, #1
 800b944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2201      	movs	r2, #1
 800b94c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2201      	movs	r2, #1
 800b954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2201      	movs	r2, #1
 800b95c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b960:	2300      	movs	r3, #0
}
 800b962:	4618      	mov	r0, r3
 800b964:	3708      	adds	r7, #8
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
	...

0800b96c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d109      	bne.n	800b990 <HAL_TIM_PWM_Start+0x24>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b982:	b2db      	uxtb	r3, r3
 800b984:	2b01      	cmp	r3, #1
 800b986:	bf14      	ite	ne
 800b988:	2301      	movne	r3, #1
 800b98a:	2300      	moveq	r3, #0
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	e022      	b.n	800b9d6 <HAL_TIM_PWM_Start+0x6a>
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	2b04      	cmp	r3, #4
 800b994:	d109      	bne.n	800b9aa <HAL_TIM_PWM_Start+0x3e>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	bf14      	ite	ne
 800b9a2:	2301      	movne	r3, #1
 800b9a4:	2300      	moveq	r3, #0
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	e015      	b.n	800b9d6 <HAL_TIM_PWM_Start+0x6a>
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	2b08      	cmp	r3, #8
 800b9ae:	d109      	bne.n	800b9c4 <HAL_TIM_PWM_Start+0x58>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	bf14      	ite	ne
 800b9bc:	2301      	movne	r3, #1
 800b9be:	2300      	moveq	r3, #0
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	e008      	b.n	800b9d6 <HAL_TIM_PWM_Start+0x6a>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	bf14      	ite	ne
 800b9d0:	2301      	movne	r3, #1
 800b9d2:	2300      	moveq	r3, #0
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d001      	beq.n	800b9de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e05e      	b.n	800ba9c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d104      	bne.n	800b9ee <HAL_TIM_PWM_Start+0x82>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2202      	movs	r2, #2
 800b9e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b9ec:	e013      	b.n	800ba16 <HAL_TIM_PWM_Start+0xaa>
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	2b04      	cmp	r3, #4
 800b9f2:	d104      	bne.n	800b9fe <HAL_TIM_PWM_Start+0x92>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2202      	movs	r2, #2
 800b9f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9fc:	e00b      	b.n	800ba16 <HAL_TIM_PWM_Start+0xaa>
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	2b08      	cmp	r3, #8
 800ba02:	d104      	bne.n	800ba0e <HAL_TIM_PWM_Start+0xa2>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2202      	movs	r2, #2
 800ba08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba0c:	e003      	b.n	800ba16 <HAL_TIM_PWM_Start+0xaa>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2202      	movs	r2, #2
 800ba12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	6839      	ldr	r1, [r7, #0]
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f000 fd6e 	bl	800c500 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a1e      	ldr	r2, [pc, #120]	; (800baa4 <HAL_TIM_PWM_Start+0x138>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d107      	bne.n	800ba3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ba3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a18      	ldr	r2, [pc, #96]	; (800baa4 <HAL_TIM_PWM_Start+0x138>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d00e      	beq.n	800ba66 <HAL_TIM_PWM_Start+0xfa>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba50:	d009      	beq.n	800ba66 <HAL_TIM_PWM_Start+0xfa>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a14      	ldr	r2, [pc, #80]	; (800baa8 <HAL_TIM_PWM_Start+0x13c>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d004      	beq.n	800ba66 <HAL_TIM_PWM_Start+0xfa>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a12      	ldr	r2, [pc, #72]	; (800baac <HAL_TIM_PWM_Start+0x140>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d111      	bne.n	800ba8a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	f003 0307 	and.w	r3, r3, #7
 800ba70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2b06      	cmp	r3, #6
 800ba76:	d010      	beq.n	800ba9a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f042 0201 	orr.w	r2, r2, #1
 800ba86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba88:	e007      	b.n	800ba9a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f042 0201 	orr.w	r2, r2, #1
 800ba98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ba9a:	2300      	movs	r3, #0
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3710      	adds	r7, #16
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	40012c00 	.word	0x40012c00
 800baa8:	40000400 	.word	0x40000400
 800baac:	40000800 	.word	0x40000800

0800bab0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d101      	bne.n	800bac4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bac0:	2301      	movs	r3, #1
 800bac2:	e093      	b.n	800bbec <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d106      	bne.n	800bade <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2200      	movs	r2, #0
 800bad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f7fc f9c3 	bl	8007e64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2202      	movs	r2, #2
 800bae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	6812      	ldr	r2, [r2, #0]
 800baf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800baf4:	f023 0307 	bic.w	r3, r3, #7
 800baf8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	3304      	adds	r3, #4
 800bb02:	4619      	mov	r1, r3
 800bb04:	4610      	mov	r0, r2
 800bb06:	f000 fb11 	bl	800c12c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	689b      	ldr	r3, [r3, #8]
 800bb10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	699b      	ldr	r3, [r3, #24]
 800bb18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	6a1b      	ldr	r3, [r3, #32]
 800bb20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	697a      	ldr	r2, [r7, #20]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb32:	f023 0303 	bic.w	r3, r3, #3
 800bb36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	689a      	ldr	r2, [r3, #8]
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	699b      	ldr	r3, [r3, #24]
 800bb40:	021b      	lsls	r3, r3, #8
 800bb42:	4313      	orrs	r3, r2
 800bb44:	693a      	ldr	r2, [r7, #16]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800bb50:	f023 030c 	bic.w	r3, r3, #12
 800bb54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	68da      	ldr	r2, [r3, #12]
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	69db      	ldr	r3, [r3, #28]
 800bb6a:	021b      	lsls	r3, r3, #8
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	693a      	ldr	r2, [r7, #16]
 800bb70:	4313      	orrs	r3, r2
 800bb72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	691b      	ldr	r3, [r3, #16]
 800bb78:	011a      	lsls	r2, r3, #4
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	6a1b      	ldr	r3, [r3, #32]
 800bb7e:	031b      	lsls	r3, r3, #12
 800bb80:	4313      	orrs	r3, r2
 800bb82:	693a      	ldr	r2, [r7, #16]
 800bb84:	4313      	orrs	r3, r2
 800bb86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bb8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	685a      	ldr	r2, [r3, #4]
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	695b      	ldr	r3, [r3, #20]
 800bb98:	011b      	lsls	r3, r3, #4
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	697a      	ldr	r2, [r7, #20]
 800bba8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	693a      	ldr	r2, [r7, #16]
 800bbb0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	68fa      	ldr	r2, [r7, #12]
 800bbb8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2201      	movs	r2, #1
 800bbce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2201      	movs	r2, #1
 800bbde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bbea:	2300      	movs	r3, #0
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3718      	adds	r7, #24
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc04:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bc0c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bc14:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bc1c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d110      	bne.n	800bc46 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc24:	7bfb      	ldrb	r3, [r7, #15]
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d102      	bne.n	800bc30 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bc2a:	7b7b      	ldrb	r3, [r7, #13]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d001      	beq.n	800bc34 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800bc30:	2301      	movs	r3, #1
 800bc32:	e089      	b.n	800bd48 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2202      	movs	r2, #2
 800bc38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2202      	movs	r2, #2
 800bc40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc44:	e031      	b.n	800bcaa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	2b04      	cmp	r3, #4
 800bc4a:	d110      	bne.n	800bc6e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc4c:	7bbb      	ldrb	r3, [r7, #14]
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d102      	bne.n	800bc58 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bc52:	7b3b      	ldrb	r3, [r7, #12]
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d001      	beq.n	800bc5c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	e075      	b.n	800bd48 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2202      	movs	r2, #2
 800bc60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2202      	movs	r2, #2
 800bc68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bc6c:	e01d      	b.n	800bcaa <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc6e:	7bfb      	ldrb	r3, [r7, #15]
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d108      	bne.n	800bc86 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc74:	7bbb      	ldrb	r3, [r7, #14]
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d105      	bne.n	800bc86 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc7a:	7b7b      	ldrb	r3, [r7, #13]
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d102      	bne.n	800bc86 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bc80:	7b3b      	ldrb	r3, [r7, #12]
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d001      	beq.n	800bc8a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800bc86:	2301      	movs	r3, #1
 800bc88:	e05e      	b.n	800bd48 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2202      	movs	r2, #2
 800bc8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2202      	movs	r2, #2
 800bc96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2202      	movs	r2, #2
 800bc9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2202      	movs	r2, #2
 800bca6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d003      	beq.n	800bcb8 <HAL_TIM_Encoder_Start_IT+0xc4>
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	2b04      	cmp	r3, #4
 800bcb4:	d010      	beq.n	800bcd8 <HAL_TIM_Encoder_Start_IT+0xe4>
 800bcb6:	e01f      	b.n	800bcf8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	2100      	movs	r1, #0
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f000 fc1d 	bl	800c500 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	68da      	ldr	r2, [r3, #12]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f042 0202 	orr.w	r2, r2, #2
 800bcd4:	60da      	str	r2, [r3, #12]
      break;
 800bcd6:	e02e      	b.n	800bd36 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2201      	movs	r2, #1
 800bcde:	2104      	movs	r1, #4
 800bce0:	4618      	mov	r0, r3
 800bce2:	f000 fc0d 	bl	800c500 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	68da      	ldr	r2, [r3, #12]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f042 0204 	orr.w	r2, r2, #4
 800bcf4:	60da      	str	r2, [r3, #12]
      break;
 800bcf6:	e01e      	b.n	800bd36 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	2100      	movs	r1, #0
 800bd00:	4618      	mov	r0, r3
 800bd02:	f000 fbfd 	bl	800c500 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	2104      	movs	r1, #4
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f000 fbf6 	bl	800c500 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	68da      	ldr	r2, [r3, #12]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f042 0202 	orr.w	r2, r2, #2
 800bd22:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	68da      	ldr	r2, [r3, #12]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f042 0204 	orr.w	r2, r2, #4
 800bd32:	60da      	str	r2, [r3, #12]
      break;
 800bd34:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f042 0201 	orr.w	r2, r2, #1
 800bd44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bd46:	2300      	movs	r3, #0
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3710      	adds	r7, #16
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	691b      	ldr	r3, [r3, #16]
 800bd5e:	f003 0302 	and.w	r3, r3, #2
 800bd62:	2b02      	cmp	r3, #2
 800bd64:	d122      	bne.n	800bdac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	f003 0302 	and.w	r3, r3, #2
 800bd70:	2b02      	cmp	r3, #2
 800bd72:	d11b      	bne.n	800bdac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f06f 0202 	mvn.w	r2, #2
 800bd7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2201      	movs	r2, #1
 800bd82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	699b      	ldr	r3, [r3, #24]
 800bd8a:	f003 0303 	and.w	r3, r3, #3
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d003      	beq.n	800bd9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 f9af 	bl	800c0f6 <HAL_TIM_IC_CaptureCallback>
 800bd98:	e005      	b.n	800bda6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 f9a2 	bl	800c0e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 f9b1 	bl	800c108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	f003 0304 	and.w	r3, r3, #4
 800bdb6:	2b04      	cmp	r3, #4
 800bdb8:	d122      	bne.n	800be00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	f003 0304 	and.w	r3, r3, #4
 800bdc4:	2b04      	cmp	r3, #4
 800bdc6:	d11b      	bne.n	800be00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f06f 0204 	mvn.w	r2, #4
 800bdd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2202      	movs	r2, #2
 800bdd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	699b      	ldr	r3, [r3, #24]
 800bdde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d003      	beq.n	800bdee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 f985 	bl	800c0f6 <HAL_TIM_IC_CaptureCallback>
 800bdec:	e005      	b.n	800bdfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 f978 	bl	800c0e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 f987 	bl	800c108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	691b      	ldr	r3, [r3, #16]
 800be06:	f003 0308 	and.w	r3, r3, #8
 800be0a:	2b08      	cmp	r3, #8
 800be0c:	d122      	bne.n	800be54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	f003 0308 	and.w	r3, r3, #8
 800be18:	2b08      	cmp	r3, #8
 800be1a:	d11b      	bne.n	800be54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f06f 0208 	mvn.w	r2, #8
 800be24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2204      	movs	r2, #4
 800be2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	69db      	ldr	r3, [r3, #28]
 800be32:	f003 0303 	and.w	r3, r3, #3
 800be36:	2b00      	cmp	r3, #0
 800be38:	d003      	beq.n	800be42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f95b 	bl	800c0f6 <HAL_TIM_IC_CaptureCallback>
 800be40:	e005      	b.n	800be4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 f94e 	bl	800c0e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 f95d 	bl	800c108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2200      	movs	r2, #0
 800be52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	691b      	ldr	r3, [r3, #16]
 800be5a:	f003 0310 	and.w	r3, r3, #16
 800be5e:	2b10      	cmp	r3, #16
 800be60:	d122      	bne.n	800bea8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	68db      	ldr	r3, [r3, #12]
 800be68:	f003 0310 	and.w	r3, r3, #16
 800be6c:	2b10      	cmp	r3, #16
 800be6e:	d11b      	bne.n	800bea8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f06f 0210 	mvn.w	r2, #16
 800be78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2208      	movs	r2, #8
 800be7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	69db      	ldr	r3, [r3, #28]
 800be86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d003      	beq.n	800be96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 f931 	bl	800c0f6 <HAL_TIM_IC_CaptureCallback>
 800be94:	e005      	b.n	800bea2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 f924 	bl	800c0e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 f933 	bl	800c108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2200      	movs	r2, #0
 800bea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	691b      	ldr	r3, [r3, #16]
 800beae:	f003 0301 	and.w	r3, r3, #1
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d10e      	bne.n	800bed4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	f003 0301 	and.w	r3, r3, #1
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d107      	bne.n	800bed4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f06f 0201 	mvn.w	r2, #1
 800becc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f7fb f84a 	bl	8006f68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	691b      	ldr	r3, [r3, #16]
 800beda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bede:	2b80      	cmp	r3, #128	; 0x80
 800bee0:	d10e      	bne.n	800bf00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	68db      	ldr	r3, [r3, #12]
 800bee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beec:	2b80      	cmp	r3, #128	; 0x80
 800beee:	d107      	bne.n	800bf00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 fbdc 	bl	800c6b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	691b      	ldr	r3, [r3, #16]
 800bf06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf0a:	2b40      	cmp	r3, #64	; 0x40
 800bf0c:	d10e      	bne.n	800bf2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf18:	2b40      	cmp	r3, #64	; 0x40
 800bf1a:	d107      	bne.n	800bf2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bf24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 f8f7 	bl	800c11a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	691b      	ldr	r3, [r3, #16]
 800bf32:	f003 0320 	and.w	r3, r3, #32
 800bf36:	2b20      	cmp	r3, #32
 800bf38:	d10e      	bne.n	800bf58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	f003 0320 	and.w	r3, r3, #32
 800bf44:	2b20      	cmp	r3, #32
 800bf46:	d107      	bne.n	800bf58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f06f 0220 	mvn.w	r2, #32
 800bf50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 fba7 	bl	800c6a6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf58:	bf00      	nop
 800bf5a:	3708      	adds	r7, #8
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b086      	sub	sp, #24
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf76:	2b01      	cmp	r3, #1
 800bf78:	d101      	bne.n	800bf7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bf7a:	2302      	movs	r3, #2
 800bf7c:	e0ae      	b.n	800c0dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2201      	movs	r2, #1
 800bf82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2b0c      	cmp	r3, #12
 800bf8a:	f200 809f 	bhi.w	800c0cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800bf8e:	a201      	add	r2, pc, #4	; (adr r2, 800bf94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bf90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf94:	0800bfc9 	.word	0x0800bfc9
 800bf98:	0800c0cd 	.word	0x0800c0cd
 800bf9c:	0800c0cd 	.word	0x0800c0cd
 800bfa0:	0800c0cd 	.word	0x0800c0cd
 800bfa4:	0800c009 	.word	0x0800c009
 800bfa8:	0800c0cd 	.word	0x0800c0cd
 800bfac:	0800c0cd 	.word	0x0800c0cd
 800bfb0:	0800c0cd 	.word	0x0800c0cd
 800bfb4:	0800c04b 	.word	0x0800c04b
 800bfb8:	0800c0cd 	.word	0x0800c0cd
 800bfbc:	0800c0cd 	.word	0x0800c0cd
 800bfc0:	0800c0cd 	.word	0x0800c0cd
 800bfc4:	0800c08b 	.word	0x0800c08b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	68b9      	ldr	r1, [r7, #8]
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f000 f90e 	bl	800c1f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	699a      	ldr	r2, [r3, #24]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f042 0208 	orr.w	r2, r2, #8
 800bfe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	699a      	ldr	r2, [r3, #24]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f022 0204 	bic.w	r2, r2, #4
 800bff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	6999      	ldr	r1, [r3, #24]
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	691a      	ldr	r2, [r3, #16]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	430a      	orrs	r2, r1
 800c004:	619a      	str	r2, [r3, #24]
      break;
 800c006:	e064      	b.n	800c0d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	68b9      	ldr	r1, [r7, #8]
 800c00e:	4618      	mov	r0, r3
 800c010:	f000 f954 	bl	800c2bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	699a      	ldr	r2, [r3, #24]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	699a      	ldr	r2, [r3, #24]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	6999      	ldr	r1, [r3, #24]
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	691b      	ldr	r3, [r3, #16]
 800c03e:	021a      	lsls	r2, r3, #8
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	430a      	orrs	r2, r1
 800c046:	619a      	str	r2, [r3, #24]
      break;
 800c048:	e043      	b.n	800c0d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	68b9      	ldr	r1, [r7, #8]
 800c050:	4618      	mov	r0, r3
 800c052:	f000 f99d 	bl	800c390 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	69da      	ldr	r2, [r3, #28]
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f042 0208 	orr.w	r2, r2, #8
 800c064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	69da      	ldr	r2, [r3, #28]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f022 0204 	bic.w	r2, r2, #4
 800c074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	69d9      	ldr	r1, [r3, #28]
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	691a      	ldr	r2, [r3, #16]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	430a      	orrs	r2, r1
 800c086:	61da      	str	r2, [r3, #28]
      break;
 800c088:	e023      	b.n	800c0d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	68b9      	ldr	r1, [r7, #8]
 800c090:	4618      	mov	r0, r3
 800c092:	f000 f9e7 	bl	800c464 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	69da      	ldr	r2, [r3, #28]
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	69da      	ldr	r2, [r3, #28]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	69d9      	ldr	r1, [r3, #28]
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	021a      	lsls	r2, r3, #8
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	430a      	orrs	r2, r1
 800c0c8:	61da      	str	r2, [r3, #28]
      break;
 800c0ca:	e002      	b.n	800c0d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	75fb      	strb	r3, [r7, #23]
      break;
 800c0d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c0da:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3718      	adds	r7, #24
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c0ec:	bf00      	nop
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bc80      	pop	{r7}
 800c0f4:	4770      	bx	lr

0800c0f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c0f6:	b480      	push	{r7}
 800c0f8:	b083      	sub	sp, #12
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c0fe:	bf00      	nop
 800c100:	370c      	adds	r7, #12
 800c102:	46bd      	mov	sp, r7
 800c104:	bc80      	pop	{r7}
 800c106:	4770      	bx	lr

0800c108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c108:	b480      	push	{r7}
 800c10a:	b083      	sub	sp, #12
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c110:	bf00      	nop
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	bc80      	pop	{r7}
 800c118:	4770      	bx	lr

0800c11a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c11a:	b480      	push	{r7}
 800c11c:	b083      	sub	sp, #12
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c122:	bf00      	nop
 800c124:	370c      	adds	r7, #12
 800c126:	46bd      	mov	sp, r7
 800c128:	bc80      	pop	{r7}
 800c12a:	4770      	bx	lr

0800c12c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b085      	sub	sp, #20
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	4a29      	ldr	r2, [pc, #164]	; (800c1e4 <TIM_Base_SetConfig+0xb8>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d00b      	beq.n	800c15c <TIM_Base_SetConfig+0x30>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c14a:	d007      	beq.n	800c15c <TIM_Base_SetConfig+0x30>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	4a26      	ldr	r2, [pc, #152]	; (800c1e8 <TIM_Base_SetConfig+0xbc>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d003      	beq.n	800c15c <TIM_Base_SetConfig+0x30>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	4a25      	ldr	r2, [pc, #148]	; (800c1ec <TIM_Base_SetConfig+0xc0>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d108      	bne.n	800c16e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	68fa      	ldr	r2, [r7, #12]
 800c16a:	4313      	orrs	r3, r2
 800c16c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	4a1c      	ldr	r2, [pc, #112]	; (800c1e4 <TIM_Base_SetConfig+0xb8>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d00b      	beq.n	800c18e <TIM_Base_SetConfig+0x62>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c17c:	d007      	beq.n	800c18e <TIM_Base_SetConfig+0x62>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	4a19      	ldr	r2, [pc, #100]	; (800c1e8 <TIM_Base_SetConfig+0xbc>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d003      	beq.n	800c18e <TIM_Base_SetConfig+0x62>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	4a18      	ldr	r2, [pc, #96]	; (800c1ec <TIM_Base_SetConfig+0xc0>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d108      	bne.n	800c1a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	68fa      	ldr	r2, [r7, #12]
 800c19c:	4313      	orrs	r3, r2
 800c19e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	695b      	ldr	r3, [r3, #20]
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	68fa      	ldr	r2, [r7, #12]
 800c1b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	689a      	ldr	r2, [r3, #8]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4a07      	ldr	r2, [pc, #28]	; (800c1e4 <TIM_Base_SetConfig+0xb8>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d103      	bne.n	800c1d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	691a      	ldr	r2, [r3, #16]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	615a      	str	r2, [r3, #20]
}
 800c1da:	bf00      	nop
 800c1dc:	3714      	adds	r7, #20
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bc80      	pop	{r7}
 800c1e2:	4770      	bx	lr
 800c1e4:	40012c00 	.word	0x40012c00
 800c1e8:	40000400 	.word	0x40000400
 800c1ec:	40000800 	.word	0x40000800

0800c1f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b087      	sub	sp, #28
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6a1b      	ldr	r3, [r3, #32]
 800c1fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6a1b      	ldr	r3, [r3, #32]
 800c204:	f023 0201 	bic.w	r2, r3, #1
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	699b      	ldr	r3, [r3, #24]
 800c216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c21e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f023 0303 	bic.w	r3, r3, #3
 800c226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	68fa      	ldr	r2, [r7, #12]
 800c22e:	4313      	orrs	r3, r2
 800c230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	f023 0302 	bic.w	r3, r3, #2
 800c238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	689b      	ldr	r3, [r3, #8]
 800c23e:	697a      	ldr	r2, [r7, #20]
 800c240:	4313      	orrs	r3, r2
 800c242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a1c      	ldr	r2, [pc, #112]	; (800c2b8 <TIM_OC1_SetConfig+0xc8>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d10c      	bne.n	800c266 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	f023 0308 	bic.w	r3, r3, #8
 800c252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	697a      	ldr	r2, [r7, #20]
 800c25a:	4313      	orrs	r3, r2
 800c25c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	f023 0304 	bic.w	r3, r3, #4
 800c264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	4a13      	ldr	r2, [pc, #76]	; (800c2b8 <TIM_OC1_SetConfig+0xc8>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d111      	bne.n	800c292 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c27c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	695b      	ldr	r3, [r3, #20]
 800c282:	693a      	ldr	r2, [r7, #16]
 800c284:	4313      	orrs	r3, r2
 800c286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	699b      	ldr	r3, [r3, #24]
 800c28c:	693a      	ldr	r2, [r7, #16]
 800c28e:	4313      	orrs	r3, r2
 800c290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	693a      	ldr	r2, [r7, #16]
 800c296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	68fa      	ldr	r2, [r7, #12]
 800c29c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	685a      	ldr	r2, [r3, #4]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	697a      	ldr	r2, [r7, #20]
 800c2aa:	621a      	str	r2, [r3, #32]
}
 800c2ac:	bf00      	nop
 800c2ae:	371c      	adds	r7, #28
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bc80      	pop	{r7}
 800c2b4:	4770      	bx	lr
 800c2b6:	bf00      	nop
 800c2b8:	40012c00 	.word	0x40012c00

0800c2bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b087      	sub	sp, #28
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6a1b      	ldr	r3, [r3, #32]
 800c2ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6a1b      	ldr	r3, [r3, #32]
 800c2d0:	f023 0210 	bic.w	r2, r3, #16
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	699b      	ldr	r3, [r3, #24]
 800c2e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c2ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	021b      	lsls	r3, r3, #8
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	f023 0320 	bic.w	r3, r3, #32
 800c306:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	689b      	ldr	r3, [r3, #8]
 800c30c:	011b      	lsls	r3, r3, #4
 800c30e:	697a      	ldr	r2, [r7, #20]
 800c310:	4313      	orrs	r3, r2
 800c312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	4a1d      	ldr	r2, [pc, #116]	; (800c38c <TIM_OC2_SetConfig+0xd0>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d10d      	bne.n	800c338 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	011b      	lsls	r3, r3, #4
 800c32a:	697a      	ldr	r2, [r7, #20]
 800c32c:	4313      	orrs	r3, r2
 800c32e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c336:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	4a14      	ldr	r2, [pc, #80]	; (800c38c <TIM_OC2_SetConfig+0xd0>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d113      	bne.n	800c368 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c346:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c34e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	695b      	ldr	r3, [r3, #20]
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	693a      	ldr	r2, [r7, #16]
 800c358:	4313      	orrs	r3, r2
 800c35a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	699b      	ldr	r3, [r3, #24]
 800c360:	009b      	lsls	r3, r3, #2
 800c362:	693a      	ldr	r2, [r7, #16]
 800c364:	4313      	orrs	r3, r2
 800c366:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	693a      	ldr	r2, [r7, #16]
 800c36c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	685a      	ldr	r2, [r3, #4]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	697a      	ldr	r2, [r7, #20]
 800c380:	621a      	str	r2, [r3, #32]
}
 800c382:	bf00      	nop
 800c384:	371c      	adds	r7, #28
 800c386:	46bd      	mov	sp, r7
 800c388:	bc80      	pop	{r7}
 800c38a:	4770      	bx	lr
 800c38c:	40012c00 	.word	0x40012c00

0800c390 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c390:	b480      	push	{r7}
 800c392:	b087      	sub	sp, #28
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6a1b      	ldr	r3, [r3, #32]
 800c39e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6a1b      	ldr	r3, [r3, #32]
 800c3a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	69db      	ldr	r3, [r3, #28]
 800c3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f023 0303 	bic.w	r3, r3, #3
 800c3c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c3d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	021b      	lsls	r3, r3, #8
 800c3e0:	697a      	ldr	r2, [r7, #20]
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	4a1d      	ldr	r2, [pc, #116]	; (800c460 <TIM_OC3_SetConfig+0xd0>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d10d      	bne.n	800c40a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c3f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	021b      	lsls	r3, r3, #8
 800c3fc:	697a      	ldr	r2, [r7, #20]
 800c3fe:	4313      	orrs	r3, r2
 800c400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	4a14      	ldr	r2, [pc, #80]	; (800c460 <TIM_OC3_SetConfig+0xd0>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d113      	bne.n	800c43a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	695b      	ldr	r3, [r3, #20]
 800c426:	011b      	lsls	r3, r3, #4
 800c428:	693a      	ldr	r2, [r7, #16]
 800c42a:	4313      	orrs	r3, r2
 800c42c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	699b      	ldr	r3, [r3, #24]
 800c432:	011b      	lsls	r3, r3, #4
 800c434:	693a      	ldr	r2, [r7, #16]
 800c436:	4313      	orrs	r3, r2
 800c438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	693a      	ldr	r2, [r7, #16]
 800c43e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	68fa      	ldr	r2, [r7, #12]
 800c444:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	685a      	ldr	r2, [r3, #4]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	697a      	ldr	r2, [r7, #20]
 800c452:	621a      	str	r2, [r3, #32]
}
 800c454:	bf00      	nop
 800c456:	371c      	adds	r7, #28
 800c458:	46bd      	mov	sp, r7
 800c45a:	bc80      	pop	{r7}
 800c45c:	4770      	bx	lr
 800c45e:	bf00      	nop
 800c460:	40012c00 	.word	0x40012c00

0800c464 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c464:	b480      	push	{r7}
 800c466:	b087      	sub	sp, #28
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6a1b      	ldr	r3, [r3, #32]
 800c472:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6a1b      	ldr	r3, [r3, #32]
 800c478:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	69db      	ldr	r3, [r3, #28]
 800c48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c49a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	021b      	lsls	r3, r3, #8
 800c4a2:	68fa      	ldr	r2, [r7, #12]
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c4ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	031b      	lsls	r3, r3, #12
 800c4b6:	693a      	ldr	r2, [r7, #16]
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	4a0f      	ldr	r2, [pc, #60]	; (800c4fc <TIM_OC4_SetConfig+0x98>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d109      	bne.n	800c4d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c4ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	695b      	ldr	r3, [r3, #20]
 800c4d0:	019b      	lsls	r3, r3, #6
 800c4d2:	697a      	ldr	r2, [r7, #20]
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	697a      	ldr	r2, [r7, #20]
 800c4dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	68fa      	ldr	r2, [r7, #12]
 800c4e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	685a      	ldr	r2, [r3, #4]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	693a      	ldr	r2, [r7, #16]
 800c4f0:	621a      	str	r2, [r3, #32]
}
 800c4f2:	bf00      	nop
 800c4f4:	371c      	adds	r7, #28
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bc80      	pop	{r7}
 800c4fa:	4770      	bx	lr
 800c4fc:	40012c00 	.word	0x40012c00

0800c500 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c500:	b480      	push	{r7}
 800c502:	b087      	sub	sp, #28
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	f003 031f 	and.w	r3, r3, #31
 800c512:	2201      	movs	r2, #1
 800c514:	fa02 f303 	lsl.w	r3, r2, r3
 800c518:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	6a1a      	ldr	r2, [r3, #32]
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	43db      	mvns	r3, r3
 800c522:	401a      	ands	r2, r3
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	6a1a      	ldr	r2, [r3, #32]
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	f003 031f 	and.w	r3, r3, #31
 800c532:	6879      	ldr	r1, [r7, #4]
 800c534:	fa01 f303 	lsl.w	r3, r1, r3
 800c538:	431a      	orrs	r2, r3
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	621a      	str	r2, [r3, #32]
}
 800c53e:	bf00      	nop
 800c540:	371c      	adds	r7, #28
 800c542:	46bd      	mov	sp, r7
 800c544:	bc80      	pop	{r7}
 800c546:	4770      	bx	lr

0800c548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c548:	b480      	push	{r7}
 800c54a:	b085      	sub	sp, #20
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d101      	bne.n	800c560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c55c:	2302      	movs	r3, #2
 800c55e:	e046      	b.n	800c5ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2201      	movs	r2, #1
 800c564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2202      	movs	r2, #2
 800c56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	689b      	ldr	r3, [r3, #8]
 800c57e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	68fa      	ldr	r2, [r7, #12]
 800c58e:	4313      	orrs	r3, r2
 800c590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	68fa      	ldr	r2, [r7, #12]
 800c598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a16      	ldr	r2, [pc, #88]	; (800c5f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d00e      	beq.n	800c5c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5ac:	d009      	beq.n	800c5c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4a12      	ldr	r2, [pc, #72]	; (800c5fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d004      	beq.n	800c5c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4a10      	ldr	r2, [pc, #64]	; (800c600 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d10c      	bne.n	800c5dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	68ba      	ldr	r2, [r7, #8]
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	68ba      	ldr	r2, [r7, #8]
 800c5da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3714      	adds	r7, #20
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bc80      	pop	{r7}
 800c5f6:	4770      	bx	lr
 800c5f8:	40012c00 	.word	0x40012c00
 800c5fc:	40000400 	.word	0x40000400
 800c600:	40000800 	.word	0x40000800

0800c604 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c60e:	2300      	movs	r3, #0
 800c610:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c618:	2b01      	cmp	r3, #1
 800c61a:	d101      	bne.n	800c620 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c61c:	2302      	movs	r3, #2
 800c61e:	e03d      	b.n	800c69c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2201      	movs	r2, #1
 800c624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	4313      	orrs	r3, r2
 800c634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	4313      	orrs	r3, r2
 800c642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	685b      	ldr	r3, [r3, #4]
 800c64e:	4313      	orrs	r3, r2
 800c650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4313      	orrs	r3, r2
 800c65e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	691b      	ldr	r3, [r3, #16]
 800c66a:	4313      	orrs	r3, r2
 800c66c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	695b      	ldr	r3, [r3, #20]
 800c678:	4313      	orrs	r3, r2
 800c67a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	69db      	ldr	r3, [r3, #28]
 800c686:	4313      	orrs	r3, r2
 800c688:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	68fa      	ldr	r2, [r7, #12]
 800c690:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2200      	movs	r2, #0
 800c696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c69a:	2300      	movs	r3, #0
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3714      	adds	r7, #20
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bc80      	pop	{r7}
 800c6a4:	4770      	bx	lr

0800c6a6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c6a6:	b480      	push	{r7}
 800c6a8:	b083      	sub	sp, #12
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c6ae:	bf00      	nop
 800c6b0:	370c      	adds	r7, #12
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bc80      	pop	{r7}
 800c6b6:	4770      	bx	lr

0800c6b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c6c0:	bf00      	nop
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bc80      	pop	{r7}
 800c6c8:	4770      	bx	lr

0800c6ca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c6ca:	b580      	push	{r7, lr}
 800c6cc:	b082      	sub	sp, #8
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d101      	bne.n	800c6dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	e042      	b.n	800c762 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d106      	bne.n	800c6f6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f7fb fcb3 	bl	800805c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2224      	movs	r2, #36	; 0x24
 800c6fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	68da      	ldr	r2, [r3, #12]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c70c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 fdfc 	bl	800d30c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	691a      	ldr	r2, [r3, #16]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c722:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	695a      	ldr	r2, [r3, #20]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c732:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68da      	ldr	r2, [r3, #12]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c742:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2200      	movs	r2, #0
 800c748:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2220      	movs	r2, #32
 800c74e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2220      	movs	r2, #32
 800c756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c760:	2300      	movs	r3, #0
}
 800c762:	4618      	mov	r0, r3
 800c764:	3708      	adds	r7, #8
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b08a      	sub	sp, #40	; 0x28
 800c76e:	af02      	add	r7, sp, #8
 800c770:	60f8      	str	r0, [r7, #12]
 800c772:	60b9      	str	r1, [r7, #8]
 800c774:	603b      	str	r3, [r7, #0]
 800c776:	4613      	mov	r3, r2
 800c778:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c77a:	2300      	movs	r3, #0
 800c77c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c784:	b2db      	uxtb	r3, r3
 800c786:	2b20      	cmp	r3, #32
 800c788:	d16d      	bne.n	800c866 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d002      	beq.n	800c796 <HAL_UART_Transmit+0x2c>
 800c790:	88fb      	ldrh	r3, [r7, #6]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d101      	bne.n	800c79a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c796:	2301      	movs	r3, #1
 800c798:	e066      	b.n	800c868 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2200      	movs	r2, #0
 800c79e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	2221      	movs	r2, #33	; 0x21
 800c7a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c7a8:	f7fb fe56 	bl	8008458 <HAL_GetTick>
 800c7ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	88fa      	ldrh	r2, [r7, #6]
 800c7b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	88fa      	ldrh	r2, [r7, #6]
 800c7b8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7c2:	d108      	bne.n	800c7d6 <HAL_UART_Transmit+0x6c>
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	691b      	ldr	r3, [r3, #16]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d104      	bne.n	800c7d6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	61bb      	str	r3, [r7, #24]
 800c7d4:	e003      	b.n	800c7de <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c7de:	e02a      	b.n	800c836 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	9300      	str	r3, [sp, #0]
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	2180      	movs	r1, #128	; 0x80
 800c7ea:	68f8      	ldr	r0, [r7, #12]
 800c7ec:	f000 fb4b 	bl	800ce86 <UART_WaitOnFlagUntilTimeout>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d001      	beq.n	800c7fa <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800c7f6:	2303      	movs	r3, #3
 800c7f8:	e036      	b.n	800c868 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d10b      	bne.n	800c818 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c800:	69bb      	ldr	r3, [r7, #24]
 800c802:	881b      	ldrh	r3, [r3, #0]
 800c804:	461a      	mov	r2, r3
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c80e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c810:	69bb      	ldr	r3, [r7, #24]
 800c812:	3302      	adds	r3, #2
 800c814:	61bb      	str	r3, [r7, #24]
 800c816:	e007      	b.n	800c828 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	781a      	ldrb	r2, [r3, #0]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	3301      	adds	r3, #1
 800c826:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	3b01      	subs	r3, #1
 800c830:	b29a      	uxth	r2, r3
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c83a:	b29b      	uxth	r3, r3
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d1cf      	bne.n	800c7e0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	9300      	str	r3, [sp, #0]
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	2200      	movs	r2, #0
 800c848:	2140      	movs	r1, #64	; 0x40
 800c84a:	68f8      	ldr	r0, [r7, #12]
 800c84c:	f000 fb1b 	bl	800ce86 <UART_WaitOnFlagUntilTimeout>
 800c850:	4603      	mov	r3, r0
 800c852:	2b00      	cmp	r3, #0
 800c854:	d001      	beq.n	800c85a <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800c856:	2303      	movs	r3, #3
 800c858:	e006      	b.n	800c868 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	2220      	movs	r2, #32
 800c85e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800c862:	2300      	movs	r3, #0
 800c864:	e000      	b.n	800c868 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800c866:	2302      	movs	r3, #2
  }
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3720      	adds	r7, #32
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b08c      	sub	sp, #48	; 0x30
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	4613      	mov	r3, r2
 800c87c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c884:	b2db      	uxtb	r3, r3
 800c886:	2b20      	cmp	r3, #32
 800c888:	d14a      	bne.n	800c920 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d002      	beq.n	800c896 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800c890:	88fb      	ldrh	r3, [r7, #6]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d101      	bne.n	800c89a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800c896:	2301      	movs	r3, #1
 800c898:	e043      	b.n	800c922 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2201      	movs	r2, #1
 800c89e:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800c8a6:	88fb      	ldrh	r3, [r7, #6]
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	68b9      	ldr	r1, [r7, #8]
 800c8ac:	68f8      	ldr	r0, [r7, #12]
 800c8ae:	f000 fb58 	bl	800cf62 <UART_Start_Receive_IT>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c8b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d12c      	bne.n	800c91a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d125      	bne.n	800c914 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	613b      	str	r3, [r7, #16]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	613b      	str	r3, [r7, #16]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	613b      	str	r3, [r7, #16]
 800c8dc:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	330c      	adds	r3, #12
 800c8e4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8e6:	69bb      	ldr	r3, [r7, #24]
 800c8e8:	e853 3f00 	ldrex	r3, [r3]
 800c8ec:	617b      	str	r3, [r7, #20]
   return(result);
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	f043 0310 	orr.w	r3, r3, #16
 800c8f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	330c      	adds	r3, #12
 800c8fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8fe:	627a      	str	r2, [r7, #36]	; 0x24
 800c900:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c902:	6a39      	ldr	r1, [r7, #32]
 800c904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c906:	e841 2300 	strex	r3, r2, [r1]
 800c90a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d1e5      	bne.n	800c8de <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800c912:	e002      	b.n	800c91a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c914:	2301      	movs	r3, #1
 800c916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800c91a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c91e:	e000      	b.n	800c922 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800c920:	2302      	movs	r3, #2
  }
}
 800c922:	4618      	mov	r0, r3
 800c924:	3730      	adds	r7, #48	; 0x30
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
	...

0800c92c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b0ba      	sub	sp, #232	; 0xe8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	68db      	ldr	r3, [r3, #12]
 800c944:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	695b      	ldr	r3, [r3, #20]
 800c94e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c952:	2300      	movs	r3, #0
 800c954:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c958:	2300      	movs	r3, #0
 800c95a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c95e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c962:	f003 030f 	and.w	r3, r3, #15
 800c966:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c96a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d10f      	bne.n	800c992 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c976:	f003 0320 	and.w	r3, r3, #32
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d009      	beq.n	800c992 <HAL_UART_IRQHandler+0x66>
 800c97e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c982:	f003 0320 	and.w	r3, r3, #32
 800c986:	2b00      	cmp	r3, #0
 800c988:	d003      	beq.n	800c992 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 fbff 	bl	800d18e <UART_Receive_IT>
      return;
 800c990:	e25b      	b.n	800ce4a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c992:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c996:	2b00      	cmp	r3, #0
 800c998:	f000 80de 	beq.w	800cb58 <HAL_UART_IRQHandler+0x22c>
 800c99c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c9a0:	f003 0301 	and.w	r3, r3, #1
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d106      	bne.n	800c9b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c9a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	f000 80d1 	beq.w	800cb58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c9b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9ba:	f003 0301 	and.w	r3, r3, #1
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00b      	beq.n	800c9da <HAL_UART_IRQHandler+0xae>
 800c9c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d005      	beq.n	800c9da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9d2:	f043 0201 	orr.w	r2, r3, #1
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c9da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9de:	f003 0304 	and.w	r3, r3, #4
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d00b      	beq.n	800c9fe <HAL_UART_IRQHandler+0xd2>
 800c9e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c9ea:	f003 0301 	and.w	r3, r3, #1
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d005      	beq.n	800c9fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9f6:	f043 0202 	orr.w	r2, r3, #2
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c9fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca02:	f003 0302 	and.w	r3, r3, #2
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d00b      	beq.n	800ca22 <HAL_UART_IRQHandler+0xf6>
 800ca0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca0e:	f003 0301 	and.w	r3, r3, #1
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d005      	beq.n	800ca22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca1a:	f043 0204 	orr.w	r2, r3, #4
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ca22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca26:	f003 0308 	and.w	r3, r3, #8
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d011      	beq.n	800ca52 <HAL_UART_IRQHandler+0x126>
 800ca2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca32:	f003 0320 	and.w	r3, r3, #32
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d105      	bne.n	800ca46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ca3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca3e:	f003 0301 	and.w	r3, r3, #1
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d005      	beq.n	800ca52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca4a:	f043 0208 	orr.w	r2, r3, #8
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	f000 81f2 	beq.w	800ce40 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ca5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca60:	f003 0320 	and.w	r3, r3, #32
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d008      	beq.n	800ca7a <HAL_UART_IRQHandler+0x14e>
 800ca68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca6c:	f003 0320 	and.w	r3, r3, #32
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d002      	beq.n	800ca7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f000 fb8a 	bl	800d18e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	695b      	ldr	r3, [r3, #20]
 800ca80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	bf14      	ite	ne
 800ca88:	2301      	movne	r3, #1
 800ca8a:	2300      	moveq	r3, #0
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca96:	f003 0308 	and.w	r3, r3, #8
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d103      	bne.n	800caa6 <HAL_UART_IRQHandler+0x17a>
 800ca9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d04f      	beq.n	800cb46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 fa94 	bl	800cfd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	695b      	ldr	r3, [r3, #20]
 800cab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d041      	beq.n	800cb3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	3314      	adds	r3, #20
 800cac0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cac8:	e853 3f00 	ldrex	r3, [r3]
 800cacc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	3314      	adds	r3, #20
 800cae2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cae6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800caea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800caf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800caf6:	e841 2300 	strex	r3, r2, [r1]
 800cafa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cafe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d1d9      	bne.n	800caba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d013      	beq.n	800cb36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb12:	4a7e      	ldr	r2, [pc, #504]	; (800cd0c <HAL_UART_IRQHandler+0x3e0>)
 800cb14:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7fc fc00 	bl	8009320 <HAL_DMA_Abort_IT>
 800cb20:	4603      	mov	r3, r0
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d016      	beq.n	800cb54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cb30:	4610      	mov	r0, r2
 800cb32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb34:	e00e      	b.n	800cb54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f000 f99c 	bl	800ce74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb3c:	e00a      	b.n	800cb54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 f998 	bl	800ce74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb44:	e006      	b.n	800cb54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f000 f994 	bl	800ce74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800cb52:	e175      	b.n	800ce40 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb54:	bf00      	nop
    return;
 800cb56:	e173      	b.n	800ce40 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb5c:	2b01      	cmp	r3, #1
 800cb5e:	f040 814f 	bne.w	800ce00 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800cb62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb66:	f003 0310 	and.w	r3, r3, #16
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	f000 8148 	beq.w	800ce00 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800cb70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb74:	f003 0310 	and.w	r3, r3, #16
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	f000 8141 	beq.w	800ce00 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cb7e:	2300      	movs	r3, #0
 800cb80:	60bb      	str	r3, [r7, #8]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	60bb      	str	r3, [r7, #8]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	60bb      	str	r3, [r7, #8]
 800cb92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	695b      	ldr	r3, [r3, #20]
 800cb9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	f000 80b6 	beq.w	800cd10 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cbb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	f000 8145 	beq.w	800ce44 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cbbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	f080 813e 	bcs.w	800ce44 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cbce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbd4:	699b      	ldr	r3, [r3, #24]
 800cbd6:	2b20      	cmp	r3, #32
 800cbd8:	f000 8088 	beq.w	800ccec <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	330c      	adds	r3, #12
 800cbe2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cbea:	e853 3f00 	ldrex	r3, [r3]
 800cbee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cbf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cbf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbfa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	330c      	adds	r3, #12
 800cc04:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800cc08:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cc0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc10:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cc14:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cc18:	e841 2300 	strex	r3, r2, [r1]
 800cc1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cc20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d1d9      	bne.n	800cbdc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	3314      	adds	r3, #20
 800cc2e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc32:	e853 3f00 	ldrex	r3, [r3]
 800cc36:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cc38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cc3a:	f023 0301 	bic.w	r3, r3, #1
 800cc3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	3314      	adds	r3, #20
 800cc48:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cc4c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cc50:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc52:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cc54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cc58:	e841 2300 	strex	r3, r2, [r1]
 800cc5c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cc5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d1e1      	bne.n	800cc28 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	3314      	adds	r3, #20
 800cc6a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc6e:	e853 3f00 	ldrex	r3, [r3]
 800cc72:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cc74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	3314      	adds	r3, #20
 800cc84:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cc88:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cc8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc8c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cc8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cc90:	e841 2300 	strex	r3, r2, [r1]
 800cc94:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cc96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d1e3      	bne.n	800cc64 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2220      	movs	r2, #32
 800cca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2200      	movs	r2, #0
 800cca8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	330c      	adds	r3, #12
 800ccb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccb4:	e853 3f00 	ldrex	r3, [r3]
 800ccb8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ccba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccbc:	f023 0310 	bic.w	r3, r3, #16
 800ccc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	330c      	adds	r3, #12
 800ccca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ccce:	65ba      	str	r2, [r7, #88]	; 0x58
 800ccd0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccd2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ccd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ccd6:	e841 2300 	strex	r3, r2, [r1]
 800ccda:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ccdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d1e3      	bne.n	800ccaa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7fc fade 	bl	80092a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2202      	movs	r2, #2
 800ccf0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	1ad3      	subs	r3, r2, r3
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	4619      	mov	r1, r3
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f7f9 fb1e 	bl	8006344 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cd08:	e09c      	b.n	800ce44 <HAL_UART_IRQHandler+0x518>
 800cd0a:	bf00      	nop
 800cd0c:	0800d099 	.word	0x0800d099
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	1ad3      	subs	r3, r2, r3
 800cd1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	f000 808e 	beq.w	800ce48 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800cd2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	f000 8089 	beq.w	800ce48 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	330c      	adds	r3, #12
 800cd3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd40:	e853 3f00 	ldrex	r3, [r3]
 800cd44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cd46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cd4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	330c      	adds	r3, #12
 800cd56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cd5a:	647a      	str	r2, [r7, #68]	; 0x44
 800cd5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cd60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd62:	e841 2300 	strex	r3, r2, [r1]
 800cd66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cd68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d1e3      	bne.n	800cd36 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	3314      	adds	r3, #20
 800cd74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd78:	e853 3f00 	ldrex	r3, [r3]
 800cd7c:	623b      	str	r3, [r7, #32]
   return(result);
 800cd7e:	6a3b      	ldr	r3, [r7, #32]
 800cd80:	f023 0301 	bic.w	r3, r3, #1
 800cd84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	3314      	adds	r3, #20
 800cd8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cd92:	633a      	str	r2, [r7, #48]	; 0x30
 800cd94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd9a:	e841 2300 	strex	r3, r2, [r1]
 800cd9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d1e3      	bne.n	800cd6e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2220      	movs	r2, #32
 800cdaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	330c      	adds	r3, #12
 800cdba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	e853 3f00 	ldrex	r3, [r3]
 800cdc2:	60fb      	str	r3, [r7, #12]
   return(result);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f023 0310 	bic.w	r3, r3, #16
 800cdca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	330c      	adds	r3, #12
 800cdd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cdd8:	61fa      	str	r2, [r7, #28]
 800cdda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cddc:	69b9      	ldr	r1, [r7, #24]
 800cdde:	69fa      	ldr	r2, [r7, #28]
 800cde0:	e841 2300 	strex	r3, r2, [r1]
 800cde4:	617b      	str	r3, [r7, #20]
   return(result);
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d1e3      	bne.n	800cdb4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2202      	movs	r2, #2
 800cdf0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cdf2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f7f9 faa3 	bl	8006344 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cdfe:	e023      	b.n	800ce48 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ce00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d009      	beq.n	800ce20 <HAL_UART_IRQHandler+0x4f4>
 800ce0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d003      	beq.n	800ce20 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 f951 	bl	800d0c0 <UART_Transmit_IT>
    return;
 800ce1e:	e014      	b.n	800ce4a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ce20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d00e      	beq.n	800ce4a <HAL_UART_IRQHandler+0x51e>
 800ce2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d008      	beq.n	800ce4a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 f990 	bl	800d15e <UART_EndTransmit_IT>
    return;
 800ce3e:	e004      	b.n	800ce4a <HAL_UART_IRQHandler+0x51e>
    return;
 800ce40:	bf00      	nop
 800ce42:	e002      	b.n	800ce4a <HAL_UART_IRQHandler+0x51e>
      return;
 800ce44:	bf00      	nop
 800ce46:	e000      	b.n	800ce4a <HAL_UART_IRQHandler+0x51e>
      return;
 800ce48:	bf00      	nop
  }
}
 800ce4a:	37e8      	adds	r7, #232	; 0xe8
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ce58:	bf00      	nop
 800ce5a:	370c      	adds	r7, #12
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bc80      	pop	{r7}
 800ce60:	4770      	bx	lr

0800ce62 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ce62:	b480      	push	{r7}
 800ce64:	b083      	sub	sp, #12
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ce6a:	bf00      	nop
 800ce6c:	370c      	adds	r7, #12
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bc80      	pop	{r7}
 800ce72:	4770      	bx	lr

0800ce74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b083      	sub	sp, #12
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ce7c:	bf00      	nop
 800ce7e:	370c      	adds	r7, #12
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bc80      	pop	{r7}
 800ce84:	4770      	bx	lr

0800ce86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ce86:	b580      	push	{r7, lr}
 800ce88:	b090      	sub	sp, #64	; 0x40
 800ce8a:	af00      	add	r7, sp, #0
 800ce8c:	60f8      	str	r0, [r7, #12]
 800ce8e:	60b9      	str	r1, [r7, #8]
 800ce90:	603b      	str	r3, [r7, #0]
 800ce92:	4613      	mov	r3, r2
 800ce94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce96:	e050      	b.n	800cf3a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce9e:	d04c      	beq.n	800cf3a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d007      	beq.n	800ceb6 <UART_WaitOnFlagUntilTimeout+0x30>
 800cea6:	f7fb fad7 	bl	8008458 <HAL_GetTick>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	1ad3      	subs	r3, r2, r3
 800ceb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d241      	bcs.n	800cf3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	330c      	adds	r3, #12
 800cebc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec0:	e853 3f00 	ldrex	r3, [r3]
 800cec4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	330c      	adds	r3, #12
 800ced4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ced6:	637a      	str	r2, [r7, #52]	; 0x34
 800ced8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cedc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cede:	e841 2300 	strex	r3, r2, [r1]
 800cee2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d1e5      	bne.n	800ceb6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	3314      	adds	r3, #20
 800cef0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	e853 3f00 	ldrex	r3, [r3]
 800cef8:	613b      	str	r3, [r7, #16]
   return(result);
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	f023 0301 	bic.w	r3, r3, #1
 800cf00:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	3314      	adds	r3, #20
 800cf08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf0a:	623a      	str	r2, [r7, #32]
 800cf0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf0e:	69f9      	ldr	r1, [r7, #28]
 800cf10:	6a3a      	ldr	r2, [r7, #32]
 800cf12:	e841 2300 	strex	r3, r2, [r1]
 800cf16:	61bb      	str	r3, [r7, #24]
   return(result);
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d1e5      	bne.n	800ceea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2220      	movs	r2, #32
 800cf22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2220      	movs	r2, #32
 800cf2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2200      	movs	r2, #0
 800cf32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800cf36:	2303      	movs	r3, #3
 800cf38:	e00f      	b.n	800cf5a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	4013      	ands	r3, r2
 800cf44:	68ba      	ldr	r2, [r7, #8]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	bf0c      	ite	eq
 800cf4a:	2301      	moveq	r3, #1
 800cf4c:	2300      	movne	r3, #0
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	461a      	mov	r2, r3
 800cf52:	79fb      	ldrb	r3, [r7, #7]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d09f      	beq.n	800ce98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3740      	adds	r7, #64	; 0x40
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf62:	b480      	push	{r7}
 800cf64:	b085      	sub	sp, #20
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	60f8      	str	r0, [r7, #12]
 800cf6a:	60b9      	str	r1, [r7, #8]
 800cf6c:	4613      	mov	r3, r2
 800cf6e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	68ba      	ldr	r2, [r7, #8]
 800cf74:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	88fa      	ldrh	r2, [r7, #6]
 800cf7a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	88fa      	ldrh	r2, [r7, #6]
 800cf80:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2200      	movs	r2, #0
 800cf86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2222      	movs	r2, #34	; 0x22
 800cf8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	691b      	ldr	r3, [r3, #16]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d007      	beq.n	800cfa8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	68da      	ldr	r2, [r3, #12]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cfa6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	695a      	ldr	r2, [r3, #20]
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f042 0201 	orr.w	r2, r2, #1
 800cfb6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	68da      	ldr	r2, [r3, #12]
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f042 0220 	orr.w	r2, r2, #32
 800cfc6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cfc8:	2300      	movs	r3, #0
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3714      	adds	r7, #20
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bc80      	pop	{r7}
 800cfd2:	4770      	bx	lr

0800cfd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b095      	sub	sp, #84	; 0x54
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	330c      	adds	r3, #12
 800cfe2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfe6:	e853 3f00 	ldrex	r3, [r3]
 800cfea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	330c      	adds	r3, #12
 800cffa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cffc:	643a      	str	r2, [r7, #64]	; 0x40
 800cffe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d000:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d002:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d004:	e841 2300 	strex	r3, r2, [r1]
 800d008:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d1e5      	bne.n	800cfdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	3314      	adds	r3, #20
 800d016:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d018:	6a3b      	ldr	r3, [r7, #32]
 800d01a:	e853 3f00 	ldrex	r3, [r3]
 800d01e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d020:	69fb      	ldr	r3, [r7, #28]
 800d022:	f023 0301 	bic.w	r3, r3, #1
 800d026:	64bb      	str	r3, [r7, #72]	; 0x48
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	3314      	adds	r3, #20
 800d02e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d030:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d032:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d034:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d038:	e841 2300 	strex	r3, r2, [r1]
 800d03c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d040:	2b00      	cmp	r3, #0
 800d042:	d1e5      	bne.n	800d010 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d119      	bne.n	800d080 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	330c      	adds	r3, #12
 800d052:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	e853 3f00 	ldrex	r3, [r3]
 800d05a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	f023 0310 	bic.w	r3, r3, #16
 800d062:	647b      	str	r3, [r7, #68]	; 0x44
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	330c      	adds	r3, #12
 800d06a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d06c:	61ba      	str	r2, [r7, #24]
 800d06e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d070:	6979      	ldr	r1, [r7, #20]
 800d072:	69ba      	ldr	r2, [r7, #24]
 800d074:	e841 2300 	strex	r3, r2, [r1]
 800d078:	613b      	str	r3, [r7, #16]
   return(result);
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d1e5      	bne.n	800d04c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2220      	movs	r2, #32
 800d084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d08e:	bf00      	nop
 800d090:	3754      	adds	r7, #84	; 0x54
 800d092:	46bd      	mov	sp, r7
 800d094:	bc80      	pop	{r7}
 800d096:	4770      	bx	lr

0800d098 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d0b2:	68f8      	ldr	r0, [r7, #12]
 800d0b4:	f7ff fede 	bl	800ce74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d0b8:	bf00      	nop
 800d0ba:	3710      	adds	r7, #16
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	2b21      	cmp	r3, #33	; 0x21
 800d0d2:	d13e      	bne.n	800d152 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	689b      	ldr	r3, [r3, #8]
 800d0d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0dc:	d114      	bne.n	800d108 <UART_Transmit_IT+0x48>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	691b      	ldr	r3, [r3, #16]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d110      	bne.n	800d108 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6a1b      	ldr	r3, [r3, #32]
 800d0ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	881b      	ldrh	r3, [r3, #0]
 800d0f0:	461a      	mov	r2, r3
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d0fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6a1b      	ldr	r3, [r3, #32]
 800d100:	1c9a      	adds	r2, r3, #2
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	621a      	str	r2, [r3, #32]
 800d106:	e008      	b.n	800d11a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6a1b      	ldr	r3, [r3, #32]
 800d10c:	1c59      	adds	r1, r3, #1
 800d10e:	687a      	ldr	r2, [r7, #4]
 800d110:	6211      	str	r1, [r2, #32]
 800d112:	781a      	ldrb	r2, [r3, #0]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d11e:	b29b      	uxth	r3, r3
 800d120:	3b01      	subs	r3, #1
 800d122:	b29b      	uxth	r3, r3
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	4619      	mov	r1, r3
 800d128:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d10f      	bne.n	800d14e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	68da      	ldr	r2, [r3, #12]
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d13c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	68da      	ldr	r2, [r3, #12]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d14c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d14e:	2300      	movs	r3, #0
 800d150:	e000      	b.n	800d154 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d152:	2302      	movs	r3, #2
  }
}
 800d154:	4618      	mov	r0, r3
 800d156:	3714      	adds	r7, #20
 800d158:	46bd      	mov	sp, r7
 800d15a:	bc80      	pop	{r7}
 800d15c:	4770      	bx	lr

0800d15e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d15e:	b580      	push	{r7, lr}
 800d160:	b082      	sub	sp, #8
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	68da      	ldr	r2, [r3, #12]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d174:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2220      	movs	r2, #32
 800d17a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f7ff fe66 	bl	800ce50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d184:	2300      	movs	r3, #0
}
 800d186:	4618      	mov	r0, r3
 800d188:	3708      	adds	r7, #8
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}

0800d18e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d18e:	b580      	push	{r7, lr}
 800d190:	b08c      	sub	sp, #48	; 0x30
 800d192:	af00      	add	r7, sp, #0
 800d194:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	2b22      	cmp	r3, #34	; 0x22
 800d1a0:	f040 80ae 	bne.w	800d300 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	689b      	ldr	r3, [r3, #8]
 800d1a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1ac:	d117      	bne.n	800d1de <UART_Receive_IT+0x50>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	691b      	ldr	r3, [r3, #16]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d113      	bne.n	800d1de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	b29b      	uxth	r3, r3
 800d1c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1cc:	b29a      	uxth	r2, r3
 800d1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1d6:	1c9a      	adds	r2, r3, #2
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	629a      	str	r2, [r3, #40]	; 0x28
 800d1dc:	e026      	b.n	800d22c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1f0:	d007      	beq.n	800d202 <UART_Receive_IT+0x74>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	689b      	ldr	r3, [r3, #8]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d10a      	bne.n	800d210 <UART_Receive_IT+0x82>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	691b      	ldr	r3, [r3, #16]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d106      	bne.n	800d210 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	b2da      	uxtb	r2, r3
 800d20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20c:	701a      	strb	r2, [r3, #0]
 800d20e:	e008      	b.n	800d222 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	b2db      	uxtb	r3, r3
 800d218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d21c:	b2da      	uxtb	r2, r3
 800d21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d220:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d226:	1c5a      	adds	r2, r3, #1
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d230:	b29b      	uxth	r3, r3
 800d232:	3b01      	subs	r3, #1
 800d234:	b29b      	uxth	r3, r3
 800d236:	687a      	ldr	r2, [r7, #4]
 800d238:	4619      	mov	r1, r3
 800d23a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d15d      	bne.n	800d2fc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	68da      	ldr	r2, [r3, #12]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f022 0220 	bic.w	r2, r2, #32
 800d24e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	68da      	ldr	r2, [r3, #12]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d25e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	695a      	ldr	r2, [r3, #20]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f022 0201 	bic.w	r2, r2, #1
 800d26e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2220      	movs	r2, #32
 800d274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2200      	movs	r2, #0
 800d27c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d282:	2b01      	cmp	r3, #1
 800d284:	d135      	bne.n	800d2f2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2200      	movs	r2, #0
 800d28a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	330c      	adds	r3, #12
 800d292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	e853 3f00 	ldrex	r3, [r3]
 800d29a:	613b      	str	r3, [r7, #16]
   return(result);
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	f023 0310 	bic.w	r3, r3, #16
 800d2a2:	627b      	str	r3, [r7, #36]	; 0x24
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	330c      	adds	r3, #12
 800d2aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2ac:	623a      	str	r2, [r7, #32]
 800d2ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b0:	69f9      	ldr	r1, [r7, #28]
 800d2b2:	6a3a      	ldr	r2, [r7, #32]
 800d2b4:	e841 2300 	strex	r3, r2, [r1]
 800d2b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d2ba:	69bb      	ldr	r3, [r7, #24]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1e5      	bne.n	800d28c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f003 0310 	and.w	r3, r3, #16
 800d2ca:	2b10      	cmp	r3, #16
 800d2cc:	d10a      	bne.n	800d2e4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	60fb      	str	r3, [r7, #12]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	60fb      	str	r3, [r7, #12]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	60fb      	str	r3, [r7, #12]
 800d2e2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f7f9 f82a 	bl	8006344 <HAL_UARTEx_RxEventCallback>
 800d2f0:	e002      	b.n	800d2f8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f7ff fdb5 	bl	800ce62 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	e002      	b.n	800d302 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	e000      	b.n	800d302 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d300:	2302      	movs	r3, #2
  }
}
 800d302:	4618      	mov	r0, r3
 800d304:	3730      	adds	r7, #48	; 0x30
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
	...

0800d30c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b084      	sub	sp, #16
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	691b      	ldr	r3, [r3, #16]
 800d31a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	68da      	ldr	r2, [r3, #12]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	430a      	orrs	r2, r1
 800d328:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	689a      	ldr	r2, [r3, #8]
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	691b      	ldr	r3, [r3, #16]
 800d332:	431a      	orrs	r2, r3
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	695b      	ldr	r3, [r3, #20]
 800d338:	4313      	orrs	r3, r2
 800d33a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800d346:	f023 030c 	bic.w	r3, r3, #12
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	6812      	ldr	r2, [r2, #0]
 800d34e:	68b9      	ldr	r1, [r7, #8]
 800d350:	430b      	orrs	r3, r1
 800d352:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	695b      	ldr	r3, [r3, #20]
 800d35a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	699a      	ldr	r2, [r3, #24]
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	430a      	orrs	r2, r1
 800d368:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	4a2c      	ldr	r2, [pc, #176]	; (800d420 <UART_SetConfig+0x114>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d103      	bne.n	800d37c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800d374:	f7fd f94c 	bl	800a610 <HAL_RCC_GetPCLK2Freq>
 800d378:	60f8      	str	r0, [r7, #12]
 800d37a:	e002      	b.n	800d382 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800d37c:	f7fd f934 	bl	800a5e8 <HAL_RCC_GetPCLK1Freq>
 800d380:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d382:	68fa      	ldr	r2, [r7, #12]
 800d384:	4613      	mov	r3, r2
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	4413      	add	r3, r2
 800d38a:	009a      	lsls	r2, r3, #2
 800d38c:	441a      	add	r2, r3
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	009b      	lsls	r3, r3, #2
 800d394:	fbb2 f3f3 	udiv	r3, r2, r3
 800d398:	4a22      	ldr	r2, [pc, #136]	; (800d424 <UART_SetConfig+0x118>)
 800d39a:	fba2 2303 	umull	r2, r3, r2, r3
 800d39e:	095b      	lsrs	r3, r3, #5
 800d3a0:	0119      	lsls	r1, r3, #4
 800d3a2:	68fa      	ldr	r2, [r7, #12]
 800d3a4:	4613      	mov	r3, r2
 800d3a6:	009b      	lsls	r3, r3, #2
 800d3a8:	4413      	add	r3, r2
 800d3aa:	009a      	lsls	r2, r3, #2
 800d3ac:	441a      	add	r2, r3
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	009b      	lsls	r3, r3, #2
 800d3b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800d3b8:	4b1a      	ldr	r3, [pc, #104]	; (800d424 <UART_SetConfig+0x118>)
 800d3ba:	fba3 0302 	umull	r0, r3, r3, r2
 800d3be:	095b      	lsrs	r3, r3, #5
 800d3c0:	2064      	movs	r0, #100	; 0x64
 800d3c2:	fb00 f303 	mul.w	r3, r0, r3
 800d3c6:	1ad3      	subs	r3, r2, r3
 800d3c8:	011b      	lsls	r3, r3, #4
 800d3ca:	3332      	adds	r3, #50	; 0x32
 800d3cc:	4a15      	ldr	r2, [pc, #84]	; (800d424 <UART_SetConfig+0x118>)
 800d3ce:	fba2 2303 	umull	r2, r3, r2, r3
 800d3d2:	095b      	lsrs	r3, r3, #5
 800d3d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d3d8:	4419      	add	r1, r3
 800d3da:	68fa      	ldr	r2, [r7, #12]
 800d3dc:	4613      	mov	r3, r2
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	4413      	add	r3, r2
 800d3e2:	009a      	lsls	r2, r3, #2
 800d3e4:	441a      	add	r2, r3
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	fbb2 f2f3 	udiv	r2, r2, r3
 800d3f0:	4b0c      	ldr	r3, [pc, #48]	; (800d424 <UART_SetConfig+0x118>)
 800d3f2:	fba3 0302 	umull	r0, r3, r3, r2
 800d3f6:	095b      	lsrs	r3, r3, #5
 800d3f8:	2064      	movs	r0, #100	; 0x64
 800d3fa:	fb00 f303 	mul.w	r3, r0, r3
 800d3fe:	1ad3      	subs	r3, r2, r3
 800d400:	011b      	lsls	r3, r3, #4
 800d402:	3332      	adds	r3, #50	; 0x32
 800d404:	4a07      	ldr	r2, [pc, #28]	; (800d424 <UART_SetConfig+0x118>)
 800d406:	fba2 2303 	umull	r2, r3, r2, r3
 800d40a:	095b      	lsrs	r3, r3, #5
 800d40c:	f003 020f 	and.w	r2, r3, #15
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	440a      	add	r2, r1
 800d416:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800d418:	bf00      	nop
 800d41a:	3710      	adds	r7, #16
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}
 800d420:	40013800 	.word	0x40013800
 800d424:	51eb851f 	.word	0x51eb851f

0800d428 <__errno>:
 800d428:	4b01      	ldr	r3, [pc, #4]	; (800d430 <__errno+0x8>)
 800d42a:	6818      	ldr	r0, [r3, #0]
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop
 800d430:	20000044 	.word	0x20000044

0800d434 <__libc_init_array>:
 800d434:	b570      	push	{r4, r5, r6, lr}
 800d436:	2600      	movs	r6, #0
 800d438:	4d0c      	ldr	r5, [pc, #48]	; (800d46c <__libc_init_array+0x38>)
 800d43a:	4c0d      	ldr	r4, [pc, #52]	; (800d470 <__libc_init_array+0x3c>)
 800d43c:	1b64      	subs	r4, r4, r5
 800d43e:	10a4      	asrs	r4, r4, #2
 800d440:	42a6      	cmp	r6, r4
 800d442:	d109      	bne.n	800d458 <__libc_init_array+0x24>
 800d444:	f003 f9bc 	bl	80107c0 <_init>
 800d448:	2600      	movs	r6, #0
 800d44a:	4d0a      	ldr	r5, [pc, #40]	; (800d474 <__libc_init_array+0x40>)
 800d44c:	4c0a      	ldr	r4, [pc, #40]	; (800d478 <__libc_init_array+0x44>)
 800d44e:	1b64      	subs	r4, r4, r5
 800d450:	10a4      	asrs	r4, r4, #2
 800d452:	42a6      	cmp	r6, r4
 800d454:	d105      	bne.n	800d462 <__libc_init_array+0x2e>
 800d456:	bd70      	pop	{r4, r5, r6, pc}
 800d458:	f855 3b04 	ldr.w	r3, [r5], #4
 800d45c:	4798      	blx	r3
 800d45e:	3601      	adds	r6, #1
 800d460:	e7ee      	b.n	800d440 <__libc_init_array+0xc>
 800d462:	f855 3b04 	ldr.w	r3, [r5], #4
 800d466:	4798      	blx	r3
 800d468:	3601      	adds	r6, #1
 800d46a:	e7f2      	b.n	800d452 <__libc_init_array+0x1e>
 800d46c:	080130ec 	.word	0x080130ec
 800d470:	080130ec 	.word	0x080130ec
 800d474:	080130ec 	.word	0x080130ec
 800d478:	080130f0 	.word	0x080130f0

0800d47c <memset>:
 800d47c:	4603      	mov	r3, r0
 800d47e:	4402      	add	r2, r0
 800d480:	4293      	cmp	r3, r2
 800d482:	d100      	bne.n	800d486 <memset+0xa>
 800d484:	4770      	bx	lr
 800d486:	f803 1b01 	strb.w	r1, [r3], #1
 800d48a:	e7f9      	b.n	800d480 <memset+0x4>

0800d48c <__cvt>:
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d492:	461f      	mov	r7, r3
 800d494:	bfbb      	ittet	lt
 800d496:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800d49a:	461f      	movlt	r7, r3
 800d49c:	2300      	movge	r3, #0
 800d49e:	232d      	movlt	r3, #45	; 0x2d
 800d4a0:	b088      	sub	sp, #32
 800d4a2:	4614      	mov	r4, r2
 800d4a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d4a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d4a8:	7013      	strb	r3, [r2, #0]
 800d4aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d4ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800d4b0:	f023 0820 	bic.w	r8, r3, #32
 800d4b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d4b8:	d005      	beq.n	800d4c6 <__cvt+0x3a>
 800d4ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d4be:	d100      	bne.n	800d4c2 <__cvt+0x36>
 800d4c0:	3501      	adds	r5, #1
 800d4c2:	2302      	movs	r3, #2
 800d4c4:	e000      	b.n	800d4c8 <__cvt+0x3c>
 800d4c6:	2303      	movs	r3, #3
 800d4c8:	aa07      	add	r2, sp, #28
 800d4ca:	9204      	str	r2, [sp, #16]
 800d4cc:	aa06      	add	r2, sp, #24
 800d4ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d4d2:	e9cd 3500 	strd	r3, r5, [sp]
 800d4d6:	4622      	mov	r2, r4
 800d4d8:	463b      	mov	r3, r7
 800d4da:	f000 fce5 	bl	800dea8 <_dtoa_r>
 800d4de:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d4e2:	4606      	mov	r6, r0
 800d4e4:	d102      	bne.n	800d4ec <__cvt+0x60>
 800d4e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d4e8:	07db      	lsls	r3, r3, #31
 800d4ea:	d522      	bpl.n	800d532 <__cvt+0xa6>
 800d4ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d4f0:	eb06 0905 	add.w	r9, r6, r5
 800d4f4:	d110      	bne.n	800d518 <__cvt+0x8c>
 800d4f6:	7833      	ldrb	r3, [r6, #0]
 800d4f8:	2b30      	cmp	r3, #48	; 0x30
 800d4fa:	d10a      	bne.n	800d512 <__cvt+0x86>
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	2300      	movs	r3, #0
 800d500:	4620      	mov	r0, r4
 800d502:	4639      	mov	r1, r7
 800d504:	f7f3 fa50 	bl	80009a8 <__aeabi_dcmpeq>
 800d508:	b918      	cbnz	r0, 800d512 <__cvt+0x86>
 800d50a:	f1c5 0501 	rsb	r5, r5, #1
 800d50e:	f8ca 5000 	str.w	r5, [sl]
 800d512:	f8da 3000 	ldr.w	r3, [sl]
 800d516:	4499      	add	r9, r3
 800d518:	2200      	movs	r2, #0
 800d51a:	2300      	movs	r3, #0
 800d51c:	4620      	mov	r0, r4
 800d51e:	4639      	mov	r1, r7
 800d520:	f7f3 fa42 	bl	80009a8 <__aeabi_dcmpeq>
 800d524:	b108      	cbz	r0, 800d52a <__cvt+0x9e>
 800d526:	f8cd 901c 	str.w	r9, [sp, #28]
 800d52a:	2230      	movs	r2, #48	; 0x30
 800d52c:	9b07      	ldr	r3, [sp, #28]
 800d52e:	454b      	cmp	r3, r9
 800d530:	d307      	bcc.n	800d542 <__cvt+0xb6>
 800d532:	4630      	mov	r0, r6
 800d534:	9b07      	ldr	r3, [sp, #28]
 800d536:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d538:	1b9b      	subs	r3, r3, r6
 800d53a:	6013      	str	r3, [r2, #0]
 800d53c:	b008      	add	sp, #32
 800d53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d542:	1c59      	adds	r1, r3, #1
 800d544:	9107      	str	r1, [sp, #28]
 800d546:	701a      	strb	r2, [r3, #0]
 800d548:	e7f0      	b.n	800d52c <__cvt+0xa0>

0800d54a <__exponent>:
 800d54a:	4603      	mov	r3, r0
 800d54c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d54e:	2900      	cmp	r1, #0
 800d550:	f803 2b02 	strb.w	r2, [r3], #2
 800d554:	bfb6      	itet	lt
 800d556:	222d      	movlt	r2, #45	; 0x2d
 800d558:	222b      	movge	r2, #43	; 0x2b
 800d55a:	4249      	neglt	r1, r1
 800d55c:	2909      	cmp	r1, #9
 800d55e:	7042      	strb	r2, [r0, #1]
 800d560:	dd2b      	ble.n	800d5ba <__exponent+0x70>
 800d562:	f10d 0407 	add.w	r4, sp, #7
 800d566:	46a4      	mov	ip, r4
 800d568:	270a      	movs	r7, #10
 800d56a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d56e:	460a      	mov	r2, r1
 800d570:	46a6      	mov	lr, r4
 800d572:	fb07 1516 	mls	r5, r7, r6, r1
 800d576:	2a63      	cmp	r2, #99	; 0x63
 800d578:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800d57c:	4631      	mov	r1, r6
 800d57e:	f104 34ff 	add.w	r4, r4, #4294967295
 800d582:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d586:	dcf0      	bgt.n	800d56a <__exponent+0x20>
 800d588:	3130      	adds	r1, #48	; 0x30
 800d58a:	f1ae 0502 	sub.w	r5, lr, #2
 800d58e:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d592:	4629      	mov	r1, r5
 800d594:	1c44      	adds	r4, r0, #1
 800d596:	4561      	cmp	r1, ip
 800d598:	d30a      	bcc.n	800d5b0 <__exponent+0x66>
 800d59a:	f10d 0209 	add.w	r2, sp, #9
 800d59e:	eba2 020e 	sub.w	r2, r2, lr
 800d5a2:	4565      	cmp	r5, ip
 800d5a4:	bf88      	it	hi
 800d5a6:	2200      	movhi	r2, #0
 800d5a8:	4413      	add	r3, r2
 800d5aa:	1a18      	subs	r0, r3, r0
 800d5ac:	b003      	add	sp, #12
 800d5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5b4:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d5b8:	e7ed      	b.n	800d596 <__exponent+0x4c>
 800d5ba:	2330      	movs	r3, #48	; 0x30
 800d5bc:	3130      	adds	r1, #48	; 0x30
 800d5be:	7083      	strb	r3, [r0, #2]
 800d5c0:	70c1      	strb	r1, [r0, #3]
 800d5c2:	1d03      	adds	r3, r0, #4
 800d5c4:	e7f1      	b.n	800d5aa <__exponent+0x60>
	...

0800d5c8 <_printf_float>:
 800d5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5cc:	b091      	sub	sp, #68	; 0x44
 800d5ce:	460c      	mov	r4, r1
 800d5d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800d5d4:	4616      	mov	r6, r2
 800d5d6:	461f      	mov	r7, r3
 800d5d8:	4605      	mov	r5, r0
 800d5da:	f001 fa53 	bl	800ea84 <_localeconv_r>
 800d5de:	6803      	ldr	r3, [r0, #0]
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d5e4:	f7f2 fdb4 	bl	8000150 <strlen>
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	930e      	str	r3, [sp, #56]	; 0x38
 800d5ec:	f8d8 3000 	ldr.w	r3, [r8]
 800d5f0:	900a      	str	r0, [sp, #40]	; 0x28
 800d5f2:	3307      	adds	r3, #7
 800d5f4:	f023 0307 	bic.w	r3, r3, #7
 800d5f8:	f103 0208 	add.w	r2, r3, #8
 800d5fc:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d600:	f8d4 b000 	ldr.w	fp, [r4]
 800d604:	f8c8 2000 	str.w	r2, [r8]
 800d608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d610:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800d614:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800d618:	930b      	str	r3, [sp, #44]	; 0x2c
 800d61a:	f04f 32ff 	mov.w	r2, #4294967295
 800d61e:	4640      	mov	r0, r8
 800d620:	4b9c      	ldr	r3, [pc, #624]	; (800d894 <_printf_float+0x2cc>)
 800d622:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d624:	f7f3 f9f2 	bl	8000a0c <__aeabi_dcmpun>
 800d628:	bb70      	cbnz	r0, 800d688 <_printf_float+0xc0>
 800d62a:	f04f 32ff 	mov.w	r2, #4294967295
 800d62e:	4640      	mov	r0, r8
 800d630:	4b98      	ldr	r3, [pc, #608]	; (800d894 <_printf_float+0x2cc>)
 800d632:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d634:	f7f3 f9cc 	bl	80009d0 <__aeabi_dcmple>
 800d638:	bb30      	cbnz	r0, 800d688 <_printf_float+0xc0>
 800d63a:	2200      	movs	r2, #0
 800d63c:	2300      	movs	r3, #0
 800d63e:	4640      	mov	r0, r8
 800d640:	4651      	mov	r1, sl
 800d642:	f7f3 f9bb 	bl	80009bc <__aeabi_dcmplt>
 800d646:	b110      	cbz	r0, 800d64e <_printf_float+0x86>
 800d648:	232d      	movs	r3, #45	; 0x2d
 800d64a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d64e:	4b92      	ldr	r3, [pc, #584]	; (800d898 <_printf_float+0x2d0>)
 800d650:	4892      	ldr	r0, [pc, #584]	; (800d89c <_printf_float+0x2d4>)
 800d652:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d656:	bf94      	ite	ls
 800d658:	4698      	movls	r8, r3
 800d65a:	4680      	movhi	r8, r0
 800d65c:	2303      	movs	r3, #3
 800d65e:	f04f 0a00 	mov.w	sl, #0
 800d662:	6123      	str	r3, [r4, #16]
 800d664:	f02b 0304 	bic.w	r3, fp, #4
 800d668:	6023      	str	r3, [r4, #0]
 800d66a:	4633      	mov	r3, r6
 800d66c:	4621      	mov	r1, r4
 800d66e:	4628      	mov	r0, r5
 800d670:	9700      	str	r7, [sp, #0]
 800d672:	aa0f      	add	r2, sp, #60	; 0x3c
 800d674:	f000 f9d4 	bl	800da20 <_printf_common>
 800d678:	3001      	adds	r0, #1
 800d67a:	f040 8090 	bne.w	800d79e <_printf_float+0x1d6>
 800d67e:	f04f 30ff 	mov.w	r0, #4294967295
 800d682:	b011      	add	sp, #68	; 0x44
 800d684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d688:	4642      	mov	r2, r8
 800d68a:	4653      	mov	r3, sl
 800d68c:	4640      	mov	r0, r8
 800d68e:	4651      	mov	r1, sl
 800d690:	f7f3 f9bc 	bl	8000a0c <__aeabi_dcmpun>
 800d694:	b148      	cbz	r0, 800d6aa <_printf_float+0xe2>
 800d696:	f1ba 0f00 	cmp.w	sl, #0
 800d69a:	bfb8      	it	lt
 800d69c:	232d      	movlt	r3, #45	; 0x2d
 800d69e:	4880      	ldr	r0, [pc, #512]	; (800d8a0 <_printf_float+0x2d8>)
 800d6a0:	bfb8      	it	lt
 800d6a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d6a6:	4b7f      	ldr	r3, [pc, #508]	; (800d8a4 <_printf_float+0x2dc>)
 800d6a8:	e7d3      	b.n	800d652 <_printf_float+0x8a>
 800d6aa:	6863      	ldr	r3, [r4, #4]
 800d6ac:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d6b0:	1c5a      	adds	r2, r3, #1
 800d6b2:	d142      	bne.n	800d73a <_printf_float+0x172>
 800d6b4:	2306      	movs	r3, #6
 800d6b6:	6063      	str	r3, [r4, #4]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	9206      	str	r2, [sp, #24]
 800d6bc:	aa0e      	add	r2, sp, #56	; 0x38
 800d6be:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800d6c2:	aa0d      	add	r2, sp, #52	; 0x34
 800d6c4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800d6c8:	9203      	str	r2, [sp, #12]
 800d6ca:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800d6ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d6d2:	6023      	str	r3, [r4, #0]
 800d6d4:	6863      	ldr	r3, [r4, #4]
 800d6d6:	4642      	mov	r2, r8
 800d6d8:	9300      	str	r3, [sp, #0]
 800d6da:	4628      	mov	r0, r5
 800d6dc:	4653      	mov	r3, sl
 800d6de:	910b      	str	r1, [sp, #44]	; 0x2c
 800d6e0:	f7ff fed4 	bl	800d48c <__cvt>
 800d6e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d6e6:	4680      	mov	r8, r0
 800d6e8:	2947      	cmp	r1, #71	; 0x47
 800d6ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d6ec:	d108      	bne.n	800d700 <_printf_float+0x138>
 800d6ee:	1cc8      	adds	r0, r1, #3
 800d6f0:	db02      	blt.n	800d6f8 <_printf_float+0x130>
 800d6f2:	6863      	ldr	r3, [r4, #4]
 800d6f4:	4299      	cmp	r1, r3
 800d6f6:	dd40      	ble.n	800d77a <_printf_float+0x1b2>
 800d6f8:	f1a9 0902 	sub.w	r9, r9, #2
 800d6fc:	fa5f f989 	uxtb.w	r9, r9
 800d700:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d704:	d81f      	bhi.n	800d746 <_printf_float+0x17e>
 800d706:	464a      	mov	r2, r9
 800d708:	3901      	subs	r1, #1
 800d70a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d70e:	910d      	str	r1, [sp, #52]	; 0x34
 800d710:	f7ff ff1b 	bl	800d54a <__exponent>
 800d714:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d716:	4682      	mov	sl, r0
 800d718:	1813      	adds	r3, r2, r0
 800d71a:	2a01      	cmp	r2, #1
 800d71c:	6123      	str	r3, [r4, #16]
 800d71e:	dc02      	bgt.n	800d726 <_printf_float+0x15e>
 800d720:	6822      	ldr	r2, [r4, #0]
 800d722:	07d2      	lsls	r2, r2, #31
 800d724:	d501      	bpl.n	800d72a <_printf_float+0x162>
 800d726:	3301      	adds	r3, #1
 800d728:	6123      	str	r3, [r4, #16]
 800d72a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d09b      	beq.n	800d66a <_printf_float+0xa2>
 800d732:	232d      	movs	r3, #45	; 0x2d
 800d734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d738:	e797      	b.n	800d66a <_printf_float+0xa2>
 800d73a:	2947      	cmp	r1, #71	; 0x47
 800d73c:	d1bc      	bne.n	800d6b8 <_printf_float+0xf0>
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d1ba      	bne.n	800d6b8 <_printf_float+0xf0>
 800d742:	2301      	movs	r3, #1
 800d744:	e7b7      	b.n	800d6b6 <_printf_float+0xee>
 800d746:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d74a:	d118      	bne.n	800d77e <_printf_float+0x1b6>
 800d74c:	2900      	cmp	r1, #0
 800d74e:	6863      	ldr	r3, [r4, #4]
 800d750:	dd0b      	ble.n	800d76a <_printf_float+0x1a2>
 800d752:	6121      	str	r1, [r4, #16]
 800d754:	b913      	cbnz	r3, 800d75c <_printf_float+0x194>
 800d756:	6822      	ldr	r2, [r4, #0]
 800d758:	07d0      	lsls	r0, r2, #31
 800d75a:	d502      	bpl.n	800d762 <_printf_float+0x19a>
 800d75c:	3301      	adds	r3, #1
 800d75e:	440b      	add	r3, r1
 800d760:	6123      	str	r3, [r4, #16]
 800d762:	f04f 0a00 	mov.w	sl, #0
 800d766:	65a1      	str	r1, [r4, #88]	; 0x58
 800d768:	e7df      	b.n	800d72a <_printf_float+0x162>
 800d76a:	b913      	cbnz	r3, 800d772 <_printf_float+0x1aa>
 800d76c:	6822      	ldr	r2, [r4, #0]
 800d76e:	07d2      	lsls	r2, r2, #31
 800d770:	d501      	bpl.n	800d776 <_printf_float+0x1ae>
 800d772:	3302      	adds	r3, #2
 800d774:	e7f4      	b.n	800d760 <_printf_float+0x198>
 800d776:	2301      	movs	r3, #1
 800d778:	e7f2      	b.n	800d760 <_printf_float+0x198>
 800d77a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d77e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d780:	4299      	cmp	r1, r3
 800d782:	db05      	blt.n	800d790 <_printf_float+0x1c8>
 800d784:	6823      	ldr	r3, [r4, #0]
 800d786:	6121      	str	r1, [r4, #16]
 800d788:	07d8      	lsls	r0, r3, #31
 800d78a:	d5ea      	bpl.n	800d762 <_printf_float+0x19a>
 800d78c:	1c4b      	adds	r3, r1, #1
 800d78e:	e7e7      	b.n	800d760 <_printf_float+0x198>
 800d790:	2900      	cmp	r1, #0
 800d792:	bfcc      	ite	gt
 800d794:	2201      	movgt	r2, #1
 800d796:	f1c1 0202 	rsble	r2, r1, #2
 800d79a:	4413      	add	r3, r2
 800d79c:	e7e0      	b.n	800d760 <_printf_float+0x198>
 800d79e:	6823      	ldr	r3, [r4, #0]
 800d7a0:	055a      	lsls	r2, r3, #21
 800d7a2:	d407      	bmi.n	800d7b4 <_printf_float+0x1ec>
 800d7a4:	6923      	ldr	r3, [r4, #16]
 800d7a6:	4642      	mov	r2, r8
 800d7a8:	4631      	mov	r1, r6
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	47b8      	blx	r7
 800d7ae:	3001      	adds	r0, #1
 800d7b0:	d12b      	bne.n	800d80a <_printf_float+0x242>
 800d7b2:	e764      	b.n	800d67e <_printf_float+0xb6>
 800d7b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d7b8:	f240 80dd 	bls.w	800d976 <_printf_float+0x3ae>
 800d7bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	f7f3 f8f0 	bl	80009a8 <__aeabi_dcmpeq>
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	d033      	beq.n	800d834 <_printf_float+0x26c>
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	4631      	mov	r1, r6
 800d7d0:	4628      	mov	r0, r5
 800d7d2:	4a35      	ldr	r2, [pc, #212]	; (800d8a8 <_printf_float+0x2e0>)
 800d7d4:	47b8      	blx	r7
 800d7d6:	3001      	adds	r0, #1
 800d7d8:	f43f af51 	beq.w	800d67e <_printf_float+0xb6>
 800d7dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	db02      	blt.n	800d7ea <_printf_float+0x222>
 800d7e4:	6823      	ldr	r3, [r4, #0]
 800d7e6:	07d8      	lsls	r0, r3, #31
 800d7e8:	d50f      	bpl.n	800d80a <_printf_float+0x242>
 800d7ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d7ee:	4631      	mov	r1, r6
 800d7f0:	4628      	mov	r0, r5
 800d7f2:	47b8      	blx	r7
 800d7f4:	3001      	adds	r0, #1
 800d7f6:	f43f af42 	beq.w	800d67e <_printf_float+0xb6>
 800d7fa:	f04f 0800 	mov.w	r8, #0
 800d7fe:	f104 091a 	add.w	r9, r4, #26
 800d802:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d804:	3b01      	subs	r3, #1
 800d806:	4543      	cmp	r3, r8
 800d808:	dc09      	bgt.n	800d81e <_printf_float+0x256>
 800d80a:	6823      	ldr	r3, [r4, #0]
 800d80c:	079b      	lsls	r3, r3, #30
 800d80e:	f100 8102 	bmi.w	800da16 <_printf_float+0x44e>
 800d812:	68e0      	ldr	r0, [r4, #12]
 800d814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d816:	4298      	cmp	r0, r3
 800d818:	bfb8      	it	lt
 800d81a:	4618      	movlt	r0, r3
 800d81c:	e731      	b.n	800d682 <_printf_float+0xba>
 800d81e:	2301      	movs	r3, #1
 800d820:	464a      	mov	r2, r9
 800d822:	4631      	mov	r1, r6
 800d824:	4628      	mov	r0, r5
 800d826:	47b8      	blx	r7
 800d828:	3001      	adds	r0, #1
 800d82a:	f43f af28 	beq.w	800d67e <_printf_float+0xb6>
 800d82e:	f108 0801 	add.w	r8, r8, #1
 800d832:	e7e6      	b.n	800d802 <_printf_float+0x23a>
 800d834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d836:	2b00      	cmp	r3, #0
 800d838:	dc38      	bgt.n	800d8ac <_printf_float+0x2e4>
 800d83a:	2301      	movs	r3, #1
 800d83c:	4631      	mov	r1, r6
 800d83e:	4628      	mov	r0, r5
 800d840:	4a19      	ldr	r2, [pc, #100]	; (800d8a8 <_printf_float+0x2e0>)
 800d842:	47b8      	blx	r7
 800d844:	3001      	adds	r0, #1
 800d846:	f43f af1a 	beq.w	800d67e <_printf_float+0xb6>
 800d84a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d84e:	4313      	orrs	r3, r2
 800d850:	d102      	bne.n	800d858 <_printf_float+0x290>
 800d852:	6823      	ldr	r3, [r4, #0]
 800d854:	07d9      	lsls	r1, r3, #31
 800d856:	d5d8      	bpl.n	800d80a <_printf_float+0x242>
 800d858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d85c:	4631      	mov	r1, r6
 800d85e:	4628      	mov	r0, r5
 800d860:	47b8      	blx	r7
 800d862:	3001      	adds	r0, #1
 800d864:	f43f af0b 	beq.w	800d67e <_printf_float+0xb6>
 800d868:	f04f 0900 	mov.w	r9, #0
 800d86c:	f104 0a1a 	add.w	sl, r4, #26
 800d870:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d872:	425b      	negs	r3, r3
 800d874:	454b      	cmp	r3, r9
 800d876:	dc01      	bgt.n	800d87c <_printf_float+0x2b4>
 800d878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d87a:	e794      	b.n	800d7a6 <_printf_float+0x1de>
 800d87c:	2301      	movs	r3, #1
 800d87e:	4652      	mov	r2, sl
 800d880:	4631      	mov	r1, r6
 800d882:	4628      	mov	r0, r5
 800d884:	47b8      	blx	r7
 800d886:	3001      	adds	r0, #1
 800d888:	f43f aef9 	beq.w	800d67e <_printf_float+0xb6>
 800d88c:	f109 0901 	add.w	r9, r9, #1
 800d890:	e7ee      	b.n	800d870 <_printf_float+0x2a8>
 800d892:	bf00      	nop
 800d894:	7fefffff 	.word	0x7fefffff
 800d898:	08012d14 	.word	0x08012d14
 800d89c:	08012d18 	.word	0x08012d18
 800d8a0:	08012d20 	.word	0x08012d20
 800d8a4:	08012d1c 	.word	0x08012d1c
 800d8a8:	08012d24 	.word	0x08012d24
 800d8ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	bfa8      	it	ge
 800d8b4:	461a      	movge	r2, r3
 800d8b6:	2a00      	cmp	r2, #0
 800d8b8:	4691      	mov	r9, r2
 800d8ba:	dc37      	bgt.n	800d92c <_printf_float+0x364>
 800d8bc:	f04f 0b00 	mov.w	fp, #0
 800d8c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d8c4:	f104 021a 	add.w	r2, r4, #26
 800d8c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d8cc:	ebaa 0309 	sub.w	r3, sl, r9
 800d8d0:	455b      	cmp	r3, fp
 800d8d2:	dc33      	bgt.n	800d93c <_printf_float+0x374>
 800d8d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	db3b      	blt.n	800d954 <_printf_float+0x38c>
 800d8dc:	6823      	ldr	r3, [r4, #0]
 800d8de:	07da      	lsls	r2, r3, #31
 800d8e0:	d438      	bmi.n	800d954 <_printf_float+0x38c>
 800d8e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d8e6:	eba3 020a 	sub.w	r2, r3, sl
 800d8ea:	eba3 0901 	sub.w	r9, r3, r1
 800d8ee:	4591      	cmp	r9, r2
 800d8f0:	bfa8      	it	ge
 800d8f2:	4691      	movge	r9, r2
 800d8f4:	f1b9 0f00 	cmp.w	r9, #0
 800d8f8:	dc34      	bgt.n	800d964 <_printf_float+0x39c>
 800d8fa:	f04f 0800 	mov.w	r8, #0
 800d8fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d902:	f104 0a1a 	add.w	sl, r4, #26
 800d906:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d90a:	1a9b      	subs	r3, r3, r2
 800d90c:	eba3 0309 	sub.w	r3, r3, r9
 800d910:	4543      	cmp	r3, r8
 800d912:	f77f af7a 	ble.w	800d80a <_printf_float+0x242>
 800d916:	2301      	movs	r3, #1
 800d918:	4652      	mov	r2, sl
 800d91a:	4631      	mov	r1, r6
 800d91c:	4628      	mov	r0, r5
 800d91e:	47b8      	blx	r7
 800d920:	3001      	adds	r0, #1
 800d922:	f43f aeac 	beq.w	800d67e <_printf_float+0xb6>
 800d926:	f108 0801 	add.w	r8, r8, #1
 800d92a:	e7ec      	b.n	800d906 <_printf_float+0x33e>
 800d92c:	4613      	mov	r3, r2
 800d92e:	4631      	mov	r1, r6
 800d930:	4642      	mov	r2, r8
 800d932:	4628      	mov	r0, r5
 800d934:	47b8      	blx	r7
 800d936:	3001      	adds	r0, #1
 800d938:	d1c0      	bne.n	800d8bc <_printf_float+0x2f4>
 800d93a:	e6a0      	b.n	800d67e <_printf_float+0xb6>
 800d93c:	2301      	movs	r3, #1
 800d93e:	4631      	mov	r1, r6
 800d940:	4628      	mov	r0, r5
 800d942:	920b      	str	r2, [sp, #44]	; 0x2c
 800d944:	47b8      	blx	r7
 800d946:	3001      	adds	r0, #1
 800d948:	f43f ae99 	beq.w	800d67e <_printf_float+0xb6>
 800d94c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d94e:	f10b 0b01 	add.w	fp, fp, #1
 800d952:	e7b9      	b.n	800d8c8 <_printf_float+0x300>
 800d954:	4631      	mov	r1, r6
 800d956:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d95a:	4628      	mov	r0, r5
 800d95c:	47b8      	blx	r7
 800d95e:	3001      	adds	r0, #1
 800d960:	d1bf      	bne.n	800d8e2 <_printf_float+0x31a>
 800d962:	e68c      	b.n	800d67e <_printf_float+0xb6>
 800d964:	464b      	mov	r3, r9
 800d966:	4631      	mov	r1, r6
 800d968:	4628      	mov	r0, r5
 800d96a:	eb08 020a 	add.w	r2, r8, sl
 800d96e:	47b8      	blx	r7
 800d970:	3001      	adds	r0, #1
 800d972:	d1c2      	bne.n	800d8fa <_printf_float+0x332>
 800d974:	e683      	b.n	800d67e <_printf_float+0xb6>
 800d976:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d978:	2a01      	cmp	r2, #1
 800d97a:	dc01      	bgt.n	800d980 <_printf_float+0x3b8>
 800d97c:	07db      	lsls	r3, r3, #31
 800d97e:	d537      	bpl.n	800d9f0 <_printf_float+0x428>
 800d980:	2301      	movs	r3, #1
 800d982:	4642      	mov	r2, r8
 800d984:	4631      	mov	r1, r6
 800d986:	4628      	mov	r0, r5
 800d988:	47b8      	blx	r7
 800d98a:	3001      	adds	r0, #1
 800d98c:	f43f ae77 	beq.w	800d67e <_printf_float+0xb6>
 800d990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d994:	4631      	mov	r1, r6
 800d996:	4628      	mov	r0, r5
 800d998:	47b8      	blx	r7
 800d99a:	3001      	adds	r0, #1
 800d99c:	f43f ae6f 	beq.w	800d67e <_printf_float+0xb6>
 800d9a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	f7f2 fffe 	bl	80009a8 <__aeabi_dcmpeq>
 800d9ac:	b9d8      	cbnz	r0, 800d9e6 <_printf_float+0x41e>
 800d9ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9b0:	f108 0201 	add.w	r2, r8, #1
 800d9b4:	3b01      	subs	r3, #1
 800d9b6:	4631      	mov	r1, r6
 800d9b8:	4628      	mov	r0, r5
 800d9ba:	47b8      	blx	r7
 800d9bc:	3001      	adds	r0, #1
 800d9be:	d10e      	bne.n	800d9de <_printf_float+0x416>
 800d9c0:	e65d      	b.n	800d67e <_printf_float+0xb6>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	464a      	mov	r2, r9
 800d9c6:	4631      	mov	r1, r6
 800d9c8:	4628      	mov	r0, r5
 800d9ca:	47b8      	blx	r7
 800d9cc:	3001      	adds	r0, #1
 800d9ce:	f43f ae56 	beq.w	800d67e <_printf_float+0xb6>
 800d9d2:	f108 0801 	add.w	r8, r8, #1
 800d9d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9d8:	3b01      	subs	r3, #1
 800d9da:	4543      	cmp	r3, r8
 800d9dc:	dcf1      	bgt.n	800d9c2 <_printf_float+0x3fa>
 800d9de:	4653      	mov	r3, sl
 800d9e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d9e4:	e6e0      	b.n	800d7a8 <_printf_float+0x1e0>
 800d9e6:	f04f 0800 	mov.w	r8, #0
 800d9ea:	f104 091a 	add.w	r9, r4, #26
 800d9ee:	e7f2      	b.n	800d9d6 <_printf_float+0x40e>
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	4642      	mov	r2, r8
 800d9f4:	e7df      	b.n	800d9b6 <_printf_float+0x3ee>
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	464a      	mov	r2, r9
 800d9fa:	4631      	mov	r1, r6
 800d9fc:	4628      	mov	r0, r5
 800d9fe:	47b8      	blx	r7
 800da00:	3001      	adds	r0, #1
 800da02:	f43f ae3c 	beq.w	800d67e <_printf_float+0xb6>
 800da06:	f108 0801 	add.w	r8, r8, #1
 800da0a:	68e3      	ldr	r3, [r4, #12]
 800da0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800da0e:	1a5b      	subs	r3, r3, r1
 800da10:	4543      	cmp	r3, r8
 800da12:	dcf0      	bgt.n	800d9f6 <_printf_float+0x42e>
 800da14:	e6fd      	b.n	800d812 <_printf_float+0x24a>
 800da16:	f04f 0800 	mov.w	r8, #0
 800da1a:	f104 0919 	add.w	r9, r4, #25
 800da1e:	e7f4      	b.n	800da0a <_printf_float+0x442>

0800da20 <_printf_common>:
 800da20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da24:	4616      	mov	r6, r2
 800da26:	4699      	mov	r9, r3
 800da28:	688a      	ldr	r2, [r1, #8]
 800da2a:	690b      	ldr	r3, [r1, #16]
 800da2c:	4607      	mov	r7, r0
 800da2e:	4293      	cmp	r3, r2
 800da30:	bfb8      	it	lt
 800da32:	4613      	movlt	r3, r2
 800da34:	6033      	str	r3, [r6, #0]
 800da36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da3a:	460c      	mov	r4, r1
 800da3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da40:	b10a      	cbz	r2, 800da46 <_printf_common+0x26>
 800da42:	3301      	adds	r3, #1
 800da44:	6033      	str	r3, [r6, #0]
 800da46:	6823      	ldr	r3, [r4, #0]
 800da48:	0699      	lsls	r1, r3, #26
 800da4a:	bf42      	ittt	mi
 800da4c:	6833      	ldrmi	r3, [r6, #0]
 800da4e:	3302      	addmi	r3, #2
 800da50:	6033      	strmi	r3, [r6, #0]
 800da52:	6825      	ldr	r5, [r4, #0]
 800da54:	f015 0506 	ands.w	r5, r5, #6
 800da58:	d106      	bne.n	800da68 <_printf_common+0x48>
 800da5a:	f104 0a19 	add.w	sl, r4, #25
 800da5e:	68e3      	ldr	r3, [r4, #12]
 800da60:	6832      	ldr	r2, [r6, #0]
 800da62:	1a9b      	subs	r3, r3, r2
 800da64:	42ab      	cmp	r3, r5
 800da66:	dc28      	bgt.n	800daba <_printf_common+0x9a>
 800da68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da6c:	1e13      	subs	r3, r2, #0
 800da6e:	6822      	ldr	r2, [r4, #0]
 800da70:	bf18      	it	ne
 800da72:	2301      	movne	r3, #1
 800da74:	0692      	lsls	r2, r2, #26
 800da76:	d42d      	bmi.n	800dad4 <_printf_common+0xb4>
 800da78:	4649      	mov	r1, r9
 800da7a:	4638      	mov	r0, r7
 800da7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da80:	47c0      	blx	r8
 800da82:	3001      	adds	r0, #1
 800da84:	d020      	beq.n	800dac8 <_printf_common+0xa8>
 800da86:	6823      	ldr	r3, [r4, #0]
 800da88:	68e5      	ldr	r5, [r4, #12]
 800da8a:	f003 0306 	and.w	r3, r3, #6
 800da8e:	2b04      	cmp	r3, #4
 800da90:	bf18      	it	ne
 800da92:	2500      	movne	r5, #0
 800da94:	6832      	ldr	r2, [r6, #0]
 800da96:	f04f 0600 	mov.w	r6, #0
 800da9a:	68a3      	ldr	r3, [r4, #8]
 800da9c:	bf08      	it	eq
 800da9e:	1aad      	subeq	r5, r5, r2
 800daa0:	6922      	ldr	r2, [r4, #16]
 800daa2:	bf08      	it	eq
 800daa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800daa8:	4293      	cmp	r3, r2
 800daaa:	bfc4      	itt	gt
 800daac:	1a9b      	subgt	r3, r3, r2
 800daae:	18ed      	addgt	r5, r5, r3
 800dab0:	341a      	adds	r4, #26
 800dab2:	42b5      	cmp	r5, r6
 800dab4:	d11a      	bne.n	800daec <_printf_common+0xcc>
 800dab6:	2000      	movs	r0, #0
 800dab8:	e008      	b.n	800dacc <_printf_common+0xac>
 800daba:	2301      	movs	r3, #1
 800dabc:	4652      	mov	r2, sl
 800dabe:	4649      	mov	r1, r9
 800dac0:	4638      	mov	r0, r7
 800dac2:	47c0      	blx	r8
 800dac4:	3001      	adds	r0, #1
 800dac6:	d103      	bne.n	800dad0 <_printf_common+0xb0>
 800dac8:	f04f 30ff 	mov.w	r0, #4294967295
 800dacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dad0:	3501      	adds	r5, #1
 800dad2:	e7c4      	b.n	800da5e <_printf_common+0x3e>
 800dad4:	2030      	movs	r0, #48	; 0x30
 800dad6:	18e1      	adds	r1, r4, r3
 800dad8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dadc:	1c5a      	adds	r2, r3, #1
 800dade:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dae2:	4422      	add	r2, r4
 800dae4:	3302      	adds	r3, #2
 800dae6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800daea:	e7c5      	b.n	800da78 <_printf_common+0x58>
 800daec:	2301      	movs	r3, #1
 800daee:	4622      	mov	r2, r4
 800daf0:	4649      	mov	r1, r9
 800daf2:	4638      	mov	r0, r7
 800daf4:	47c0      	blx	r8
 800daf6:	3001      	adds	r0, #1
 800daf8:	d0e6      	beq.n	800dac8 <_printf_common+0xa8>
 800dafa:	3601      	adds	r6, #1
 800dafc:	e7d9      	b.n	800dab2 <_printf_common+0x92>
	...

0800db00 <_printf_i>:
 800db00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db04:	7e0f      	ldrb	r7, [r1, #24]
 800db06:	4691      	mov	r9, r2
 800db08:	2f78      	cmp	r7, #120	; 0x78
 800db0a:	4680      	mov	r8, r0
 800db0c:	460c      	mov	r4, r1
 800db0e:	469a      	mov	sl, r3
 800db10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800db16:	d807      	bhi.n	800db28 <_printf_i+0x28>
 800db18:	2f62      	cmp	r7, #98	; 0x62
 800db1a:	d80a      	bhi.n	800db32 <_printf_i+0x32>
 800db1c:	2f00      	cmp	r7, #0
 800db1e:	f000 80d9 	beq.w	800dcd4 <_printf_i+0x1d4>
 800db22:	2f58      	cmp	r7, #88	; 0x58
 800db24:	f000 80a4 	beq.w	800dc70 <_printf_i+0x170>
 800db28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db30:	e03a      	b.n	800dba8 <_printf_i+0xa8>
 800db32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db36:	2b15      	cmp	r3, #21
 800db38:	d8f6      	bhi.n	800db28 <_printf_i+0x28>
 800db3a:	a101      	add	r1, pc, #4	; (adr r1, 800db40 <_printf_i+0x40>)
 800db3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db40:	0800db99 	.word	0x0800db99
 800db44:	0800dbad 	.word	0x0800dbad
 800db48:	0800db29 	.word	0x0800db29
 800db4c:	0800db29 	.word	0x0800db29
 800db50:	0800db29 	.word	0x0800db29
 800db54:	0800db29 	.word	0x0800db29
 800db58:	0800dbad 	.word	0x0800dbad
 800db5c:	0800db29 	.word	0x0800db29
 800db60:	0800db29 	.word	0x0800db29
 800db64:	0800db29 	.word	0x0800db29
 800db68:	0800db29 	.word	0x0800db29
 800db6c:	0800dcbb 	.word	0x0800dcbb
 800db70:	0800dbdd 	.word	0x0800dbdd
 800db74:	0800dc9d 	.word	0x0800dc9d
 800db78:	0800db29 	.word	0x0800db29
 800db7c:	0800db29 	.word	0x0800db29
 800db80:	0800dcdd 	.word	0x0800dcdd
 800db84:	0800db29 	.word	0x0800db29
 800db88:	0800dbdd 	.word	0x0800dbdd
 800db8c:	0800db29 	.word	0x0800db29
 800db90:	0800db29 	.word	0x0800db29
 800db94:	0800dca5 	.word	0x0800dca5
 800db98:	682b      	ldr	r3, [r5, #0]
 800db9a:	1d1a      	adds	r2, r3, #4
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	602a      	str	r2, [r5, #0]
 800dba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dba8:	2301      	movs	r3, #1
 800dbaa:	e0a4      	b.n	800dcf6 <_printf_i+0x1f6>
 800dbac:	6820      	ldr	r0, [r4, #0]
 800dbae:	6829      	ldr	r1, [r5, #0]
 800dbb0:	0606      	lsls	r6, r0, #24
 800dbb2:	f101 0304 	add.w	r3, r1, #4
 800dbb6:	d50a      	bpl.n	800dbce <_printf_i+0xce>
 800dbb8:	680e      	ldr	r6, [r1, #0]
 800dbba:	602b      	str	r3, [r5, #0]
 800dbbc:	2e00      	cmp	r6, #0
 800dbbe:	da03      	bge.n	800dbc8 <_printf_i+0xc8>
 800dbc0:	232d      	movs	r3, #45	; 0x2d
 800dbc2:	4276      	negs	r6, r6
 800dbc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbc8:	230a      	movs	r3, #10
 800dbca:	485e      	ldr	r0, [pc, #376]	; (800dd44 <_printf_i+0x244>)
 800dbcc:	e019      	b.n	800dc02 <_printf_i+0x102>
 800dbce:	680e      	ldr	r6, [r1, #0]
 800dbd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dbd4:	602b      	str	r3, [r5, #0]
 800dbd6:	bf18      	it	ne
 800dbd8:	b236      	sxthne	r6, r6
 800dbda:	e7ef      	b.n	800dbbc <_printf_i+0xbc>
 800dbdc:	682b      	ldr	r3, [r5, #0]
 800dbde:	6820      	ldr	r0, [r4, #0]
 800dbe0:	1d19      	adds	r1, r3, #4
 800dbe2:	6029      	str	r1, [r5, #0]
 800dbe4:	0601      	lsls	r1, r0, #24
 800dbe6:	d501      	bpl.n	800dbec <_printf_i+0xec>
 800dbe8:	681e      	ldr	r6, [r3, #0]
 800dbea:	e002      	b.n	800dbf2 <_printf_i+0xf2>
 800dbec:	0646      	lsls	r6, r0, #25
 800dbee:	d5fb      	bpl.n	800dbe8 <_printf_i+0xe8>
 800dbf0:	881e      	ldrh	r6, [r3, #0]
 800dbf2:	2f6f      	cmp	r7, #111	; 0x6f
 800dbf4:	bf0c      	ite	eq
 800dbf6:	2308      	moveq	r3, #8
 800dbf8:	230a      	movne	r3, #10
 800dbfa:	4852      	ldr	r0, [pc, #328]	; (800dd44 <_printf_i+0x244>)
 800dbfc:	2100      	movs	r1, #0
 800dbfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dc02:	6865      	ldr	r5, [r4, #4]
 800dc04:	2d00      	cmp	r5, #0
 800dc06:	bfa8      	it	ge
 800dc08:	6821      	ldrge	r1, [r4, #0]
 800dc0a:	60a5      	str	r5, [r4, #8]
 800dc0c:	bfa4      	itt	ge
 800dc0e:	f021 0104 	bicge.w	r1, r1, #4
 800dc12:	6021      	strge	r1, [r4, #0]
 800dc14:	b90e      	cbnz	r6, 800dc1a <_printf_i+0x11a>
 800dc16:	2d00      	cmp	r5, #0
 800dc18:	d04d      	beq.n	800dcb6 <_printf_i+0x1b6>
 800dc1a:	4615      	mov	r5, r2
 800dc1c:	fbb6 f1f3 	udiv	r1, r6, r3
 800dc20:	fb03 6711 	mls	r7, r3, r1, r6
 800dc24:	5dc7      	ldrb	r7, [r0, r7]
 800dc26:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dc2a:	4637      	mov	r7, r6
 800dc2c:	42bb      	cmp	r3, r7
 800dc2e:	460e      	mov	r6, r1
 800dc30:	d9f4      	bls.n	800dc1c <_printf_i+0x11c>
 800dc32:	2b08      	cmp	r3, #8
 800dc34:	d10b      	bne.n	800dc4e <_printf_i+0x14e>
 800dc36:	6823      	ldr	r3, [r4, #0]
 800dc38:	07de      	lsls	r6, r3, #31
 800dc3a:	d508      	bpl.n	800dc4e <_printf_i+0x14e>
 800dc3c:	6923      	ldr	r3, [r4, #16]
 800dc3e:	6861      	ldr	r1, [r4, #4]
 800dc40:	4299      	cmp	r1, r3
 800dc42:	bfde      	ittt	le
 800dc44:	2330      	movle	r3, #48	; 0x30
 800dc46:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dc4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dc4e:	1b52      	subs	r2, r2, r5
 800dc50:	6122      	str	r2, [r4, #16]
 800dc52:	464b      	mov	r3, r9
 800dc54:	4621      	mov	r1, r4
 800dc56:	4640      	mov	r0, r8
 800dc58:	f8cd a000 	str.w	sl, [sp]
 800dc5c:	aa03      	add	r2, sp, #12
 800dc5e:	f7ff fedf 	bl	800da20 <_printf_common>
 800dc62:	3001      	adds	r0, #1
 800dc64:	d14c      	bne.n	800dd00 <_printf_i+0x200>
 800dc66:	f04f 30ff 	mov.w	r0, #4294967295
 800dc6a:	b004      	add	sp, #16
 800dc6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc70:	4834      	ldr	r0, [pc, #208]	; (800dd44 <_printf_i+0x244>)
 800dc72:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dc76:	6829      	ldr	r1, [r5, #0]
 800dc78:	6823      	ldr	r3, [r4, #0]
 800dc7a:	f851 6b04 	ldr.w	r6, [r1], #4
 800dc7e:	6029      	str	r1, [r5, #0]
 800dc80:	061d      	lsls	r5, r3, #24
 800dc82:	d514      	bpl.n	800dcae <_printf_i+0x1ae>
 800dc84:	07df      	lsls	r7, r3, #31
 800dc86:	bf44      	itt	mi
 800dc88:	f043 0320 	orrmi.w	r3, r3, #32
 800dc8c:	6023      	strmi	r3, [r4, #0]
 800dc8e:	b91e      	cbnz	r6, 800dc98 <_printf_i+0x198>
 800dc90:	6823      	ldr	r3, [r4, #0]
 800dc92:	f023 0320 	bic.w	r3, r3, #32
 800dc96:	6023      	str	r3, [r4, #0]
 800dc98:	2310      	movs	r3, #16
 800dc9a:	e7af      	b.n	800dbfc <_printf_i+0xfc>
 800dc9c:	6823      	ldr	r3, [r4, #0]
 800dc9e:	f043 0320 	orr.w	r3, r3, #32
 800dca2:	6023      	str	r3, [r4, #0]
 800dca4:	2378      	movs	r3, #120	; 0x78
 800dca6:	4828      	ldr	r0, [pc, #160]	; (800dd48 <_printf_i+0x248>)
 800dca8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dcac:	e7e3      	b.n	800dc76 <_printf_i+0x176>
 800dcae:	0659      	lsls	r1, r3, #25
 800dcb0:	bf48      	it	mi
 800dcb2:	b2b6      	uxthmi	r6, r6
 800dcb4:	e7e6      	b.n	800dc84 <_printf_i+0x184>
 800dcb6:	4615      	mov	r5, r2
 800dcb8:	e7bb      	b.n	800dc32 <_printf_i+0x132>
 800dcba:	682b      	ldr	r3, [r5, #0]
 800dcbc:	6826      	ldr	r6, [r4, #0]
 800dcbe:	1d18      	adds	r0, r3, #4
 800dcc0:	6961      	ldr	r1, [r4, #20]
 800dcc2:	6028      	str	r0, [r5, #0]
 800dcc4:	0635      	lsls	r5, r6, #24
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	d501      	bpl.n	800dcce <_printf_i+0x1ce>
 800dcca:	6019      	str	r1, [r3, #0]
 800dccc:	e002      	b.n	800dcd4 <_printf_i+0x1d4>
 800dcce:	0670      	lsls	r0, r6, #25
 800dcd0:	d5fb      	bpl.n	800dcca <_printf_i+0x1ca>
 800dcd2:	8019      	strh	r1, [r3, #0]
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	4615      	mov	r5, r2
 800dcd8:	6123      	str	r3, [r4, #16]
 800dcda:	e7ba      	b.n	800dc52 <_printf_i+0x152>
 800dcdc:	682b      	ldr	r3, [r5, #0]
 800dcde:	2100      	movs	r1, #0
 800dce0:	1d1a      	adds	r2, r3, #4
 800dce2:	602a      	str	r2, [r5, #0]
 800dce4:	681d      	ldr	r5, [r3, #0]
 800dce6:	6862      	ldr	r2, [r4, #4]
 800dce8:	4628      	mov	r0, r5
 800dcea:	f000 fed7 	bl	800ea9c <memchr>
 800dcee:	b108      	cbz	r0, 800dcf4 <_printf_i+0x1f4>
 800dcf0:	1b40      	subs	r0, r0, r5
 800dcf2:	6060      	str	r0, [r4, #4]
 800dcf4:	6863      	ldr	r3, [r4, #4]
 800dcf6:	6123      	str	r3, [r4, #16]
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcfe:	e7a8      	b.n	800dc52 <_printf_i+0x152>
 800dd00:	462a      	mov	r2, r5
 800dd02:	4649      	mov	r1, r9
 800dd04:	4640      	mov	r0, r8
 800dd06:	6923      	ldr	r3, [r4, #16]
 800dd08:	47d0      	blx	sl
 800dd0a:	3001      	adds	r0, #1
 800dd0c:	d0ab      	beq.n	800dc66 <_printf_i+0x166>
 800dd0e:	6823      	ldr	r3, [r4, #0]
 800dd10:	079b      	lsls	r3, r3, #30
 800dd12:	d413      	bmi.n	800dd3c <_printf_i+0x23c>
 800dd14:	68e0      	ldr	r0, [r4, #12]
 800dd16:	9b03      	ldr	r3, [sp, #12]
 800dd18:	4298      	cmp	r0, r3
 800dd1a:	bfb8      	it	lt
 800dd1c:	4618      	movlt	r0, r3
 800dd1e:	e7a4      	b.n	800dc6a <_printf_i+0x16a>
 800dd20:	2301      	movs	r3, #1
 800dd22:	4632      	mov	r2, r6
 800dd24:	4649      	mov	r1, r9
 800dd26:	4640      	mov	r0, r8
 800dd28:	47d0      	blx	sl
 800dd2a:	3001      	adds	r0, #1
 800dd2c:	d09b      	beq.n	800dc66 <_printf_i+0x166>
 800dd2e:	3501      	adds	r5, #1
 800dd30:	68e3      	ldr	r3, [r4, #12]
 800dd32:	9903      	ldr	r1, [sp, #12]
 800dd34:	1a5b      	subs	r3, r3, r1
 800dd36:	42ab      	cmp	r3, r5
 800dd38:	dcf2      	bgt.n	800dd20 <_printf_i+0x220>
 800dd3a:	e7eb      	b.n	800dd14 <_printf_i+0x214>
 800dd3c:	2500      	movs	r5, #0
 800dd3e:	f104 0619 	add.w	r6, r4, #25
 800dd42:	e7f5      	b.n	800dd30 <_printf_i+0x230>
 800dd44:	08012d26 	.word	0x08012d26
 800dd48:	08012d37 	.word	0x08012d37

0800dd4c <siprintf>:
 800dd4c:	b40e      	push	{r1, r2, r3}
 800dd4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dd52:	b500      	push	{lr}
 800dd54:	b09c      	sub	sp, #112	; 0x70
 800dd56:	ab1d      	add	r3, sp, #116	; 0x74
 800dd58:	9002      	str	r0, [sp, #8]
 800dd5a:	9006      	str	r0, [sp, #24]
 800dd5c:	9107      	str	r1, [sp, #28]
 800dd5e:	9104      	str	r1, [sp, #16]
 800dd60:	4808      	ldr	r0, [pc, #32]	; (800dd84 <siprintf+0x38>)
 800dd62:	4909      	ldr	r1, [pc, #36]	; (800dd88 <siprintf+0x3c>)
 800dd64:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd68:	9105      	str	r1, [sp, #20]
 800dd6a:	6800      	ldr	r0, [r0, #0]
 800dd6c:	a902      	add	r1, sp, #8
 800dd6e:	9301      	str	r3, [sp, #4]
 800dd70:	f001 fb7e 	bl	800f470 <_svfiprintf_r>
 800dd74:	2200      	movs	r2, #0
 800dd76:	9b02      	ldr	r3, [sp, #8]
 800dd78:	701a      	strb	r2, [r3, #0]
 800dd7a:	b01c      	add	sp, #112	; 0x70
 800dd7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd80:	b003      	add	sp, #12
 800dd82:	4770      	bx	lr
 800dd84:	20000044 	.word	0x20000044
 800dd88:	ffff0208 	.word	0xffff0208

0800dd8c <quorem>:
 800dd8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd90:	6903      	ldr	r3, [r0, #16]
 800dd92:	690c      	ldr	r4, [r1, #16]
 800dd94:	4607      	mov	r7, r0
 800dd96:	42a3      	cmp	r3, r4
 800dd98:	f2c0 8082 	blt.w	800dea0 <quorem+0x114>
 800dd9c:	3c01      	subs	r4, #1
 800dd9e:	f100 0514 	add.w	r5, r0, #20
 800dda2:	f101 0814 	add.w	r8, r1, #20
 800dda6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ddaa:	9301      	str	r3, [sp, #4]
 800ddac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ddb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	fbb2 f6f3 	udiv	r6, r2, r3
 800ddbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ddc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ddc4:	d331      	bcc.n	800de2a <quorem+0x9e>
 800ddc6:	f04f 0e00 	mov.w	lr, #0
 800ddca:	4640      	mov	r0, r8
 800ddcc:	46ac      	mov	ip, r5
 800ddce:	46f2      	mov	sl, lr
 800ddd0:	f850 2b04 	ldr.w	r2, [r0], #4
 800ddd4:	b293      	uxth	r3, r2
 800ddd6:	fb06 e303 	mla	r3, r6, r3, lr
 800ddda:	0c12      	lsrs	r2, r2, #16
 800dddc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dde0:	b29b      	uxth	r3, r3
 800dde2:	fb06 e202 	mla	r2, r6, r2, lr
 800dde6:	ebaa 0303 	sub.w	r3, sl, r3
 800ddea:	f8dc a000 	ldr.w	sl, [ip]
 800ddee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ddf2:	fa1f fa8a 	uxth.w	sl, sl
 800ddf6:	4453      	add	r3, sl
 800ddf8:	f8dc a000 	ldr.w	sl, [ip]
 800ddfc:	b292      	uxth	r2, r2
 800ddfe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800de02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de06:	b29b      	uxth	r3, r3
 800de08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de0c:	4581      	cmp	r9, r0
 800de0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800de12:	f84c 3b04 	str.w	r3, [ip], #4
 800de16:	d2db      	bcs.n	800ddd0 <quorem+0x44>
 800de18:	f855 300b 	ldr.w	r3, [r5, fp]
 800de1c:	b92b      	cbnz	r3, 800de2a <quorem+0x9e>
 800de1e:	9b01      	ldr	r3, [sp, #4]
 800de20:	3b04      	subs	r3, #4
 800de22:	429d      	cmp	r5, r3
 800de24:	461a      	mov	r2, r3
 800de26:	d32f      	bcc.n	800de88 <quorem+0xfc>
 800de28:	613c      	str	r4, [r7, #16]
 800de2a:	4638      	mov	r0, r7
 800de2c:	f001 f8d0 	bl	800efd0 <__mcmp>
 800de30:	2800      	cmp	r0, #0
 800de32:	db25      	blt.n	800de80 <quorem+0xf4>
 800de34:	4628      	mov	r0, r5
 800de36:	f04f 0c00 	mov.w	ip, #0
 800de3a:	3601      	adds	r6, #1
 800de3c:	f858 1b04 	ldr.w	r1, [r8], #4
 800de40:	f8d0 e000 	ldr.w	lr, [r0]
 800de44:	b28b      	uxth	r3, r1
 800de46:	ebac 0303 	sub.w	r3, ip, r3
 800de4a:	fa1f f28e 	uxth.w	r2, lr
 800de4e:	4413      	add	r3, r2
 800de50:	0c0a      	lsrs	r2, r1, #16
 800de52:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800de56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de60:	45c1      	cmp	r9, r8
 800de62:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800de66:	f840 3b04 	str.w	r3, [r0], #4
 800de6a:	d2e7      	bcs.n	800de3c <quorem+0xb0>
 800de6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de74:	b922      	cbnz	r2, 800de80 <quorem+0xf4>
 800de76:	3b04      	subs	r3, #4
 800de78:	429d      	cmp	r5, r3
 800de7a:	461a      	mov	r2, r3
 800de7c:	d30a      	bcc.n	800de94 <quorem+0x108>
 800de7e:	613c      	str	r4, [r7, #16]
 800de80:	4630      	mov	r0, r6
 800de82:	b003      	add	sp, #12
 800de84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de88:	6812      	ldr	r2, [r2, #0]
 800de8a:	3b04      	subs	r3, #4
 800de8c:	2a00      	cmp	r2, #0
 800de8e:	d1cb      	bne.n	800de28 <quorem+0x9c>
 800de90:	3c01      	subs	r4, #1
 800de92:	e7c6      	b.n	800de22 <quorem+0x96>
 800de94:	6812      	ldr	r2, [r2, #0]
 800de96:	3b04      	subs	r3, #4
 800de98:	2a00      	cmp	r2, #0
 800de9a:	d1f0      	bne.n	800de7e <quorem+0xf2>
 800de9c:	3c01      	subs	r4, #1
 800de9e:	e7eb      	b.n	800de78 <quorem+0xec>
 800dea0:	2000      	movs	r0, #0
 800dea2:	e7ee      	b.n	800de82 <quorem+0xf6>
 800dea4:	0000      	movs	r0, r0
	...

0800dea8 <_dtoa_r>:
 800dea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deac:	4616      	mov	r6, r2
 800deae:	461f      	mov	r7, r3
 800deb0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800deb2:	b099      	sub	sp, #100	; 0x64
 800deb4:	4605      	mov	r5, r0
 800deb6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800deba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800debe:	b974      	cbnz	r4, 800dede <_dtoa_r+0x36>
 800dec0:	2010      	movs	r0, #16
 800dec2:	f000 fde3 	bl	800ea8c <malloc>
 800dec6:	4602      	mov	r2, r0
 800dec8:	6268      	str	r0, [r5, #36]	; 0x24
 800deca:	b920      	cbnz	r0, 800ded6 <_dtoa_r+0x2e>
 800decc:	21ea      	movs	r1, #234	; 0xea
 800dece:	4ba8      	ldr	r3, [pc, #672]	; (800e170 <_dtoa_r+0x2c8>)
 800ded0:	48a8      	ldr	r0, [pc, #672]	; (800e174 <_dtoa_r+0x2cc>)
 800ded2:	f001 fbdd 	bl	800f690 <__assert_func>
 800ded6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800deda:	6004      	str	r4, [r0, #0]
 800dedc:	60c4      	str	r4, [r0, #12]
 800dede:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dee0:	6819      	ldr	r1, [r3, #0]
 800dee2:	b151      	cbz	r1, 800defa <_dtoa_r+0x52>
 800dee4:	685a      	ldr	r2, [r3, #4]
 800dee6:	2301      	movs	r3, #1
 800dee8:	4093      	lsls	r3, r2
 800deea:	604a      	str	r2, [r1, #4]
 800deec:	608b      	str	r3, [r1, #8]
 800deee:	4628      	mov	r0, r5
 800def0:	f000 fe30 	bl	800eb54 <_Bfree>
 800def4:	2200      	movs	r2, #0
 800def6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800def8:	601a      	str	r2, [r3, #0]
 800defa:	1e3b      	subs	r3, r7, #0
 800defc:	bfaf      	iteee	ge
 800defe:	2300      	movge	r3, #0
 800df00:	2201      	movlt	r2, #1
 800df02:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800df06:	9305      	strlt	r3, [sp, #20]
 800df08:	bfa8      	it	ge
 800df0a:	f8c8 3000 	strge.w	r3, [r8]
 800df0e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800df12:	4b99      	ldr	r3, [pc, #612]	; (800e178 <_dtoa_r+0x2d0>)
 800df14:	bfb8      	it	lt
 800df16:	f8c8 2000 	strlt.w	r2, [r8]
 800df1a:	ea33 0309 	bics.w	r3, r3, r9
 800df1e:	d119      	bne.n	800df54 <_dtoa_r+0xac>
 800df20:	f242 730f 	movw	r3, #9999	; 0x270f
 800df24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800df26:	6013      	str	r3, [r2, #0]
 800df28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800df2c:	4333      	orrs	r3, r6
 800df2e:	f000 857f 	beq.w	800ea30 <_dtoa_r+0xb88>
 800df32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800df34:	b953      	cbnz	r3, 800df4c <_dtoa_r+0xa4>
 800df36:	4b91      	ldr	r3, [pc, #580]	; (800e17c <_dtoa_r+0x2d4>)
 800df38:	e022      	b.n	800df80 <_dtoa_r+0xd8>
 800df3a:	4b91      	ldr	r3, [pc, #580]	; (800e180 <_dtoa_r+0x2d8>)
 800df3c:	9303      	str	r3, [sp, #12]
 800df3e:	3308      	adds	r3, #8
 800df40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800df42:	6013      	str	r3, [r2, #0]
 800df44:	9803      	ldr	r0, [sp, #12]
 800df46:	b019      	add	sp, #100	; 0x64
 800df48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df4c:	4b8b      	ldr	r3, [pc, #556]	; (800e17c <_dtoa_r+0x2d4>)
 800df4e:	9303      	str	r3, [sp, #12]
 800df50:	3303      	adds	r3, #3
 800df52:	e7f5      	b.n	800df40 <_dtoa_r+0x98>
 800df54:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800df58:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800df5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800df60:	2200      	movs	r2, #0
 800df62:	2300      	movs	r3, #0
 800df64:	f7f2 fd20 	bl	80009a8 <__aeabi_dcmpeq>
 800df68:	4680      	mov	r8, r0
 800df6a:	b158      	cbz	r0, 800df84 <_dtoa_r+0xdc>
 800df6c:	2301      	movs	r3, #1
 800df6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800df70:	6013      	str	r3, [r2, #0]
 800df72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800df74:	2b00      	cmp	r3, #0
 800df76:	f000 8558 	beq.w	800ea2a <_dtoa_r+0xb82>
 800df7a:	4882      	ldr	r0, [pc, #520]	; (800e184 <_dtoa_r+0x2dc>)
 800df7c:	6018      	str	r0, [r3, #0]
 800df7e:	1e43      	subs	r3, r0, #1
 800df80:	9303      	str	r3, [sp, #12]
 800df82:	e7df      	b.n	800df44 <_dtoa_r+0x9c>
 800df84:	ab16      	add	r3, sp, #88	; 0x58
 800df86:	9301      	str	r3, [sp, #4]
 800df88:	ab17      	add	r3, sp, #92	; 0x5c
 800df8a:	9300      	str	r3, [sp, #0]
 800df8c:	4628      	mov	r0, r5
 800df8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800df92:	f001 f8c5 	bl	800f120 <__d2b>
 800df96:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800df9a:	4683      	mov	fp, r0
 800df9c:	2c00      	cmp	r4, #0
 800df9e:	d07f      	beq.n	800e0a0 <_dtoa_r+0x1f8>
 800dfa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dfa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfa6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800dfaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800dfb2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800dfb6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800dfba:	2200      	movs	r2, #0
 800dfbc:	4b72      	ldr	r3, [pc, #456]	; (800e188 <_dtoa_r+0x2e0>)
 800dfbe:	f7f2 f8d3 	bl	8000168 <__aeabi_dsub>
 800dfc2:	a365      	add	r3, pc, #404	; (adr r3, 800e158 <_dtoa_r+0x2b0>)
 800dfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc8:	f7f2 fa86 	bl	80004d8 <__aeabi_dmul>
 800dfcc:	a364      	add	r3, pc, #400	; (adr r3, 800e160 <_dtoa_r+0x2b8>)
 800dfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd2:	f7f2 f8cb 	bl	800016c <__adddf3>
 800dfd6:	4606      	mov	r6, r0
 800dfd8:	4620      	mov	r0, r4
 800dfda:	460f      	mov	r7, r1
 800dfdc:	f7f2 fa12 	bl	8000404 <__aeabi_i2d>
 800dfe0:	a361      	add	r3, pc, #388	; (adr r3, 800e168 <_dtoa_r+0x2c0>)
 800dfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe6:	f7f2 fa77 	bl	80004d8 <__aeabi_dmul>
 800dfea:	4602      	mov	r2, r0
 800dfec:	460b      	mov	r3, r1
 800dfee:	4630      	mov	r0, r6
 800dff0:	4639      	mov	r1, r7
 800dff2:	f7f2 f8bb 	bl	800016c <__adddf3>
 800dff6:	4606      	mov	r6, r0
 800dff8:	460f      	mov	r7, r1
 800dffa:	f7f2 fd1d 	bl	8000a38 <__aeabi_d2iz>
 800dffe:	2200      	movs	r2, #0
 800e000:	4682      	mov	sl, r0
 800e002:	2300      	movs	r3, #0
 800e004:	4630      	mov	r0, r6
 800e006:	4639      	mov	r1, r7
 800e008:	f7f2 fcd8 	bl	80009bc <__aeabi_dcmplt>
 800e00c:	b148      	cbz	r0, 800e022 <_dtoa_r+0x17a>
 800e00e:	4650      	mov	r0, sl
 800e010:	f7f2 f9f8 	bl	8000404 <__aeabi_i2d>
 800e014:	4632      	mov	r2, r6
 800e016:	463b      	mov	r3, r7
 800e018:	f7f2 fcc6 	bl	80009a8 <__aeabi_dcmpeq>
 800e01c:	b908      	cbnz	r0, 800e022 <_dtoa_r+0x17a>
 800e01e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e022:	f1ba 0f16 	cmp.w	sl, #22
 800e026:	d858      	bhi.n	800e0da <_dtoa_r+0x232>
 800e028:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e02c:	4b57      	ldr	r3, [pc, #348]	; (800e18c <_dtoa_r+0x2e4>)
 800e02e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e036:	f7f2 fcc1 	bl	80009bc <__aeabi_dcmplt>
 800e03a:	2800      	cmp	r0, #0
 800e03c:	d04f      	beq.n	800e0de <_dtoa_r+0x236>
 800e03e:	2300      	movs	r3, #0
 800e040:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e044:	930f      	str	r3, [sp, #60]	; 0x3c
 800e046:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e048:	1b1c      	subs	r4, r3, r4
 800e04a:	1e63      	subs	r3, r4, #1
 800e04c:	9309      	str	r3, [sp, #36]	; 0x24
 800e04e:	bf49      	itett	mi
 800e050:	f1c4 0301 	rsbmi	r3, r4, #1
 800e054:	2300      	movpl	r3, #0
 800e056:	9306      	strmi	r3, [sp, #24]
 800e058:	2300      	movmi	r3, #0
 800e05a:	bf54      	ite	pl
 800e05c:	9306      	strpl	r3, [sp, #24]
 800e05e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800e060:	f1ba 0f00 	cmp.w	sl, #0
 800e064:	db3d      	blt.n	800e0e2 <_dtoa_r+0x23a>
 800e066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e068:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e06c:	4453      	add	r3, sl
 800e06e:	9309      	str	r3, [sp, #36]	; 0x24
 800e070:	2300      	movs	r3, #0
 800e072:	930a      	str	r3, [sp, #40]	; 0x28
 800e074:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e076:	2b09      	cmp	r3, #9
 800e078:	f200 808c 	bhi.w	800e194 <_dtoa_r+0x2ec>
 800e07c:	2b05      	cmp	r3, #5
 800e07e:	bfc4      	itt	gt
 800e080:	3b04      	subgt	r3, #4
 800e082:	9322      	strgt	r3, [sp, #136]	; 0x88
 800e084:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e086:	bfc8      	it	gt
 800e088:	2400      	movgt	r4, #0
 800e08a:	f1a3 0302 	sub.w	r3, r3, #2
 800e08e:	bfd8      	it	le
 800e090:	2401      	movle	r4, #1
 800e092:	2b03      	cmp	r3, #3
 800e094:	f200 808a 	bhi.w	800e1ac <_dtoa_r+0x304>
 800e098:	e8df f003 	tbb	[pc, r3]
 800e09c:	5b4d4f2d 	.word	0x5b4d4f2d
 800e0a0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800e0a4:	441c      	add	r4, r3
 800e0a6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800e0aa:	2b20      	cmp	r3, #32
 800e0ac:	bfc3      	ittte	gt
 800e0ae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e0b2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800e0b6:	fa09 f303 	lslgt.w	r3, r9, r3
 800e0ba:	f1c3 0320 	rsble	r3, r3, #32
 800e0be:	bfc6      	itte	gt
 800e0c0:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e0c4:	4318      	orrgt	r0, r3
 800e0c6:	fa06 f003 	lslle.w	r0, r6, r3
 800e0ca:	f7f2 f98b 	bl	80003e4 <__aeabi_ui2d>
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800e0d4:	3c01      	subs	r4, #1
 800e0d6:	9313      	str	r3, [sp, #76]	; 0x4c
 800e0d8:	e76f      	b.n	800dfba <_dtoa_r+0x112>
 800e0da:	2301      	movs	r3, #1
 800e0dc:	e7b2      	b.n	800e044 <_dtoa_r+0x19c>
 800e0de:	900f      	str	r0, [sp, #60]	; 0x3c
 800e0e0:	e7b1      	b.n	800e046 <_dtoa_r+0x19e>
 800e0e2:	9b06      	ldr	r3, [sp, #24]
 800e0e4:	eba3 030a 	sub.w	r3, r3, sl
 800e0e8:	9306      	str	r3, [sp, #24]
 800e0ea:	f1ca 0300 	rsb	r3, sl, #0
 800e0ee:	930a      	str	r3, [sp, #40]	; 0x28
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	930e      	str	r3, [sp, #56]	; 0x38
 800e0f4:	e7be      	b.n	800e074 <_dtoa_r+0x1cc>
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e0fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	dc58      	bgt.n	800e1b2 <_dtoa_r+0x30a>
 800e100:	f04f 0901 	mov.w	r9, #1
 800e104:	464b      	mov	r3, r9
 800e106:	f8cd 9020 	str.w	r9, [sp, #32]
 800e10a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800e10e:	2200      	movs	r2, #0
 800e110:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800e112:	6042      	str	r2, [r0, #4]
 800e114:	2204      	movs	r2, #4
 800e116:	f102 0614 	add.w	r6, r2, #20
 800e11a:	429e      	cmp	r6, r3
 800e11c:	6841      	ldr	r1, [r0, #4]
 800e11e:	d94e      	bls.n	800e1be <_dtoa_r+0x316>
 800e120:	4628      	mov	r0, r5
 800e122:	f000 fcd7 	bl	800ead4 <_Balloc>
 800e126:	9003      	str	r0, [sp, #12]
 800e128:	2800      	cmp	r0, #0
 800e12a:	d14c      	bne.n	800e1c6 <_dtoa_r+0x31e>
 800e12c:	4602      	mov	r2, r0
 800e12e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e132:	4b17      	ldr	r3, [pc, #92]	; (800e190 <_dtoa_r+0x2e8>)
 800e134:	e6cc      	b.n	800ded0 <_dtoa_r+0x28>
 800e136:	2301      	movs	r3, #1
 800e138:	e7de      	b.n	800e0f8 <_dtoa_r+0x250>
 800e13a:	2300      	movs	r3, #0
 800e13c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e13e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e140:	eb0a 0903 	add.w	r9, sl, r3
 800e144:	f109 0301 	add.w	r3, r9, #1
 800e148:	2b01      	cmp	r3, #1
 800e14a:	9308      	str	r3, [sp, #32]
 800e14c:	bfb8      	it	lt
 800e14e:	2301      	movlt	r3, #1
 800e150:	e7dd      	b.n	800e10e <_dtoa_r+0x266>
 800e152:	2301      	movs	r3, #1
 800e154:	e7f2      	b.n	800e13c <_dtoa_r+0x294>
 800e156:	bf00      	nop
 800e158:	636f4361 	.word	0x636f4361
 800e15c:	3fd287a7 	.word	0x3fd287a7
 800e160:	8b60c8b3 	.word	0x8b60c8b3
 800e164:	3fc68a28 	.word	0x3fc68a28
 800e168:	509f79fb 	.word	0x509f79fb
 800e16c:	3fd34413 	.word	0x3fd34413
 800e170:	08012d55 	.word	0x08012d55
 800e174:	08012d6c 	.word	0x08012d6c
 800e178:	7ff00000 	.word	0x7ff00000
 800e17c:	08012d51 	.word	0x08012d51
 800e180:	08012d48 	.word	0x08012d48
 800e184:	08012d25 	.word	0x08012d25
 800e188:	3ff80000 	.word	0x3ff80000
 800e18c:	08012e60 	.word	0x08012e60
 800e190:	08012dc7 	.word	0x08012dc7
 800e194:	2401      	movs	r4, #1
 800e196:	2300      	movs	r3, #0
 800e198:	940b      	str	r4, [sp, #44]	; 0x2c
 800e19a:	9322      	str	r3, [sp, #136]	; 0x88
 800e19c:	f04f 39ff 	mov.w	r9, #4294967295
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	2312      	movs	r3, #18
 800e1a4:	f8cd 9020 	str.w	r9, [sp, #32]
 800e1a8:	9223      	str	r2, [sp, #140]	; 0x8c
 800e1aa:	e7b0      	b.n	800e10e <_dtoa_r+0x266>
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800e1b0:	e7f4      	b.n	800e19c <_dtoa_r+0x2f4>
 800e1b2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800e1b6:	464b      	mov	r3, r9
 800e1b8:	f8cd 9020 	str.w	r9, [sp, #32]
 800e1bc:	e7a7      	b.n	800e10e <_dtoa_r+0x266>
 800e1be:	3101      	adds	r1, #1
 800e1c0:	6041      	str	r1, [r0, #4]
 800e1c2:	0052      	lsls	r2, r2, #1
 800e1c4:	e7a7      	b.n	800e116 <_dtoa_r+0x26e>
 800e1c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e1c8:	9a03      	ldr	r2, [sp, #12]
 800e1ca:	601a      	str	r2, [r3, #0]
 800e1cc:	9b08      	ldr	r3, [sp, #32]
 800e1ce:	2b0e      	cmp	r3, #14
 800e1d0:	f200 80a8 	bhi.w	800e324 <_dtoa_r+0x47c>
 800e1d4:	2c00      	cmp	r4, #0
 800e1d6:	f000 80a5 	beq.w	800e324 <_dtoa_r+0x47c>
 800e1da:	f1ba 0f00 	cmp.w	sl, #0
 800e1de:	dd34      	ble.n	800e24a <_dtoa_r+0x3a2>
 800e1e0:	4a9a      	ldr	r2, [pc, #616]	; (800e44c <_dtoa_r+0x5a4>)
 800e1e2:	f00a 030f 	and.w	r3, sl, #15
 800e1e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e1ea:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e1ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e1f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800e1f6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800e1fa:	d016      	beq.n	800e22a <_dtoa_r+0x382>
 800e1fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e200:	4b93      	ldr	r3, [pc, #588]	; (800e450 <_dtoa_r+0x5a8>)
 800e202:	2703      	movs	r7, #3
 800e204:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e208:	f7f2 fa90 	bl	800072c <__aeabi_ddiv>
 800e20c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e210:	f004 040f 	and.w	r4, r4, #15
 800e214:	4e8e      	ldr	r6, [pc, #568]	; (800e450 <_dtoa_r+0x5a8>)
 800e216:	b954      	cbnz	r4, 800e22e <_dtoa_r+0x386>
 800e218:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e21c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e220:	f7f2 fa84 	bl	800072c <__aeabi_ddiv>
 800e224:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e228:	e029      	b.n	800e27e <_dtoa_r+0x3d6>
 800e22a:	2702      	movs	r7, #2
 800e22c:	e7f2      	b.n	800e214 <_dtoa_r+0x36c>
 800e22e:	07e1      	lsls	r1, r4, #31
 800e230:	d508      	bpl.n	800e244 <_dtoa_r+0x39c>
 800e232:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e236:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e23a:	f7f2 f94d 	bl	80004d8 <__aeabi_dmul>
 800e23e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e242:	3701      	adds	r7, #1
 800e244:	1064      	asrs	r4, r4, #1
 800e246:	3608      	adds	r6, #8
 800e248:	e7e5      	b.n	800e216 <_dtoa_r+0x36e>
 800e24a:	f000 80a5 	beq.w	800e398 <_dtoa_r+0x4f0>
 800e24e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e252:	f1ca 0400 	rsb	r4, sl, #0
 800e256:	4b7d      	ldr	r3, [pc, #500]	; (800e44c <_dtoa_r+0x5a4>)
 800e258:	f004 020f 	and.w	r2, r4, #15
 800e25c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e264:	f7f2 f938 	bl	80004d8 <__aeabi_dmul>
 800e268:	2702      	movs	r7, #2
 800e26a:	2300      	movs	r3, #0
 800e26c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e270:	4e77      	ldr	r6, [pc, #476]	; (800e450 <_dtoa_r+0x5a8>)
 800e272:	1124      	asrs	r4, r4, #4
 800e274:	2c00      	cmp	r4, #0
 800e276:	f040 8084 	bne.w	800e382 <_dtoa_r+0x4da>
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d1d2      	bne.n	800e224 <_dtoa_r+0x37c>
 800e27e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e280:	2b00      	cmp	r3, #0
 800e282:	f000 808b 	beq.w	800e39c <_dtoa_r+0x4f4>
 800e286:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e28a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800e28e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e292:	2200      	movs	r2, #0
 800e294:	4b6f      	ldr	r3, [pc, #444]	; (800e454 <_dtoa_r+0x5ac>)
 800e296:	f7f2 fb91 	bl	80009bc <__aeabi_dcmplt>
 800e29a:	2800      	cmp	r0, #0
 800e29c:	d07e      	beq.n	800e39c <_dtoa_r+0x4f4>
 800e29e:	9b08      	ldr	r3, [sp, #32]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d07b      	beq.n	800e39c <_dtoa_r+0x4f4>
 800e2a4:	f1b9 0f00 	cmp.w	r9, #0
 800e2a8:	dd38      	ble.n	800e31c <_dtoa_r+0x474>
 800e2aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	4b69      	ldr	r3, [pc, #420]	; (800e458 <_dtoa_r+0x5b0>)
 800e2b2:	f7f2 f911 	bl	80004d8 <__aeabi_dmul>
 800e2b6:	464c      	mov	r4, r9
 800e2b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e2bc:	f10a 38ff 	add.w	r8, sl, #4294967295
 800e2c0:	3701      	adds	r7, #1
 800e2c2:	4638      	mov	r0, r7
 800e2c4:	f7f2 f89e 	bl	8000404 <__aeabi_i2d>
 800e2c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e2cc:	f7f2 f904 	bl	80004d8 <__aeabi_dmul>
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	4b62      	ldr	r3, [pc, #392]	; (800e45c <_dtoa_r+0x5b4>)
 800e2d4:	f7f1 ff4a 	bl	800016c <__adddf3>
 800e2d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e2dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e2e0:	9611      	str	r6, [sp, #68]	; 0x44
 800e2e2:	2c00      	cmp	r4, #0
 800e2e4:	d15d      	bne.n	800e3a2 <_dtoa_r+0x4fa>
 800e2e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	4b5c      	ldr	r3, [pc, #368]	; (800e460 <_dtoa_r+0x5b8>)
 800e2ee:	f7f1 ff3b 	bl	8000168 <__aeabi_dsub>
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e2fa:	4633      	mov	r3, r6
 800e2fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e2fe:	f7f2 fb7b 	bl	80009f8 <__aeabi_dcmpgt>
 800e302:	2800      	cmp	r0, #0
 800e304:	f040 829c 	bne.w	800e840 <_dtoa_r+0x998>
 800e308:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e30c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e30e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e312:	f7f2 fb53 	bl	80009bc <__aeabi_dcmplt>
 800e316:	2800      	cmp	r0, #0
 800e318:	f040 8290 	bne.w	800e83c <_dtoa_r+0x994>
 800e31c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800e320:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e324:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e326:	2b00      	cmp	r3, #0
 800e328:	f2c0 8152 	blt.w	800e5d0 <_dtoa_r+0x728>
 800e32c:	f1ba 0f0e 	cmp.w	sl, #14
 800e330:	f300 814e 	bgt.w	800e5d0 <_dtoa_r+0x728>
 800e334:	4b45      	ldr	r3, [pc, #276]	; (800e44c <_dtoa_r+0x5a4>)
 800e336:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e33a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e33e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800e342:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e344:	2b00      	cmp	r3, #0
 800e346:	f280 80db 	bge.w	800e500 <_dtoa_r+0x658>
 800e34a:	9b08      	ldr	r3, [sp, #32]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	f300 80d7 	bgt.w	800e500 <_dtoa_r+0x658>
 800e352:	f040 8272 	bne.w	800e83a <_dtoa_r+0x992>
 800e356:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e35a:	2200      	movs	r2, #0
 800e35c:	4b40      	ldr	r3, [pc, #256]	; (800e460 <_dtoa_r+0x5b8>)
 800e35e:	f7f2 f8bb 	bl	80004d8 <__aeabi_dmul>
 800e362:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e366:	f7f2 fb3d 	bl	80009e4 <__aeabi_dcmpge>
 800e36a:	9c08      	ldr	r4, [sp, #32]
 800e36c:	4626      	mov	r6, r4
 800e36e:	2800      	cmp	r0, #0
 800e370:	f040 8248 	bne.w	800e804 <_dtoa_r+0x95c>
 800e374:	2331      	movs	r3, #49	; 0x31
 800e376:	9f03      	ldr	r7, [sp, #12]
 800e378:	f10a 0a01 	add.w	sl, sl, #1
 800e37c:	f807 3b01 	strb.w	r3, [r7], #1
 800e380:	e244      	b.n	800e80c <_dtoa_r+0x964>
 800e382:	07e2      	lsls	r2, r4, #31
 800e384:	d505      	bpl.n	800e392 <_dtoa_r+0x4ea>
 800e386:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e38a:	f7f2 f8a5 	bl	80004d8 <__aeabi_dmul>
 800e38e:	2301      	movs	r3, #1
 800e390:	3701      	adds	r7, #1
 800e392:	1064      	asrs	r4, r4, #1
 800e394:	3608      	adds	r6, #8
 800e396:	e76d      	b.n	800e274 <_dtoa_r+0x3cc>
 800e398:	2702      	movs	r7, #2
 800e39a:	e770      	b.n	800e27e <_dtoa_r+0x3d6>
 800e39c:	46d0      	mov	r8, sl
 800e39e:	9c08      	ldr	r4, [sp, #32]
 800e3a0:	e78f      	b.n	800e2c2 <_dtoa_r+0x41a>
 800e3a2:	9903      	ldr	r1, [sp, #12]
 800e3a4:	4b29      	ldr	r3, [pc, #164]	; (800e44c <_dtoa_r+0x5a4>)
 800e3a6:	4421      	add	r1, r4
 800e3a8:	9112      	str	r1, [sp, #72]	; 0x48
 800e3aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e3b0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800e3b4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e3b8:	2900      	cmp	r1, #0
 800e3ba:	d055      	beq.n	800e468 <_dtoa_r+0x5c0>
 800e3bc:	2000      	movs	r0, #0
 800e3be:	4929      	ldr	r1, [pc, #164]	; (800e464 <_dtoa_r+0x5bc>)
 800e3c0:	f7f2 f9b4 	bl	800072c <__aeabi_ddiv>
 800e3c4:	463b      	mov	r3, r7
 800e3c6:	4632      	mov	r2, r6
 800e3c8:	f7f1 fece 	bl	8000168 <__aeabi_dsub>
 800e3cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e3d0:	9f03      	ldr	r7, [sp, #12]
 800e3d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3d6:	f7f2 fb2f 	bl	8000a38 <__aeabi_d2iz>
 800e3da:	4604      	mov	r4, r0
 800e3dc:	f7f2 f812 	bl	8000404 <__aeabi_i2d>
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	460b      	mov	r3, r1
 800e3e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3e8:	f7f1 febe 	bl	8000168 <__aeabi_dsub>
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	3430      	adds	r4, #48	; 0x30
 800e3f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e3f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e3fa:	f807 4b01 	strb.w	r4, [r7], #1
 800e3fe:	f7f2 fadd 	bl	80009bc <__aeabi_dcmplt>
 800e402:	2800      	cmp	r0, #0
 800e404:	d174      	bne.n	800e4f0 <_dtoa_r+0x648>
 800e406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e40a:	2000      	movs	r0, #0
 800e40c:	4911      	ldr	r1, [pc, #68]	; (800e454 <_dtoa_r+0x5ac>)
 800e40e:	f7f1 feab 	bl	8000168 <__aeabi_dsub>
 800e412:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e416:	f7f2 fad1 	bl	80009bc <__aeabi_dcmplt>
 800e41a:	2800      	cmp	r0, #0
 800e41c:	f040 80b7 	bne.w	800e58e <_dtoa_r+0x6e6>
 800e420:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e422:	429f      	cmp	r7, r3
 800e424:	f43f af7a 	beq.w	800e31c <_dtoa_r+0x474>
 800e428:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e42c:	2200      	movs	r2, #0
 800e42e:	4b0a      	ldr	r3, [pc, #40]	; (800e458 <_dtoa_r+0x5b0>)
 800e430:	f7f2 f852 	bl	80004d8 <__aeabi_dmul>
 800e434:	2200      	movs	r2, #0
 800e436:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e43a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e43e:	4b06      	ldr	r3, [pc, #24]	; (800e458 <_dtoa_r+0x5b0>)
 800e440:	f7f2 f84a 	bl	80004d8 <__aeabi_dmul>
 800e444:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e448:	e7c3      	b.n	800e3d2 <_dtoa_r+0x52a>
 800e44a:	bf00      	nop
 800e44c:	08012e60 	.word	0x08012e60
 800e450:	08012e38 	.word	0x08012e38
 800e454:	3ff00000 	.word	0x3ff00000
 800e458:	40240000 	.word	0x40240000
 800e45c:	401c0000 	.word	0x401c0000
 800e460:	40140000 	.word	0x40140000
 800e464:	3fe00000 	.word	0x3fe00000
 800e468:	4630      	mov	r0, r6
 800e46a:	4639      	mov	r1, r7
 800e46c:	f7f2 f834 	bl	80004d8 <__aeabi_dmul>
 800e470:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e472:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e476:	9c03      	ldr	r4, [sp, #12]
 800e478:	9314      	str	r3, [sp, #80]	; 0x50
 800e47a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e47e:	f7f2 fadb 	bl	8000a38 <__aeabi_d2iz>
 800e482:	9015      	str	r0, [sp, #84]	; 0x54
 800e484:	f7f1 ffbe 	bl	8000404 <__aeabi_i2d>
 800e488:	4602      	mov	r2, r0
 800e48a:	460b      	mov	r3, r1
 800e48c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e490:	f7f1 fe6a 	bl	8000168 <__aeabi_dsub>
 800e494:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e496:	4606      	mov	r6, r0
 800e498:	3330      	adds	r3, #48	; 0x30
 800e49a:	f804 3b01 	strb.w	r3, [r4], #1
 800e49e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e4a0:	460f      	mov	r7, r1
 800e4a2:	429c      	cmp	r4, r3
 800e4a4:	f04f 0200 	mov.w	r2, #0
 800e4a8:	d124      	bne.n	800e4f4 <_dtoa_r+0x64c>
 800e4aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e4ae:	4bb0      	ldr	r3, [pc, #704]	; (800e770 <_dtoa_r+0x8c8>)
 800e4b0:	f7f1 fe5c 	bl	800016c <__adddf3>
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	460b      	mov	r3, r1
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	4639      	mov	r1, r7
 800e4bc:	f7f2 fa9c 	bl	80009f8 <__aeabi_dcmpgt>
 800e4c0:	2800      	cmp	r0, #0
 800e4c2:	d163      	bne.n	800e58c <_dtoa_r+0x6e4>
 800e4c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e4c8:	2000      	movs	r0, #0
 800e4ca:	49a9      	ldr	r1, [pc, #676]	; (800e770 <_dtoa_r+0x8c8>)
 800e4cc:	f7f1 fe4c 	bl	8000168 <__aeabi_dsub>
 800e4d0:	4602      	mov	r2, r0
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	4630      	mov	r0, r6
 800e4d6:	4639      	mov	r1, r7
 800e4d8:	f7f2 fa70 	bl	80009bc <__aeabi_dcmplt>
 800e4dc:	2800      	cmp	r0, #0
 800e4de:	f43f af1d 	beq.w	800e31c <_dtoa_r+0x474>
 800e4e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800e4e4:	1e7b      	subs	r3, r7, #1
 800e4e6:	9314      	str	r3, [sp, #80]	; 0x50
 800e4e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800e4ec:	2b30      	cmp	r3, #48	; 0x30
 800e4ee:	d0f8      	beq.n	800e4e2 <_dtoa_r+0x63a>
 800e4f0:	46c2      	mov	sl, r8
 800e4f2:	e03b      	b.n	800e56c <_dtoa_r+0x6c4>
 800e4f4:	4b9f      	ldr	r3, [pc, #636]	; (800e774 <_dtoa_r+0x8cc>)
 800e4f6:	f7f1 ffef 	bl	80004d8 <__aeabi_dmul>
 800e4fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e4fe:	e7bc      	b.n	800e47a <_dtoa_r+0x5d2>
 800e500:	9f03      	ldr	r7, [sp, #12]
 800e502:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e506:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e50a:	4640      	mov	r0, r8
 800e50c:	4649      	mov	r1, r9
 800e50e:	f7f2 f90d 	bl	800072c <__aeabi_ddiv>
 800e512:	f7f2 fa91 	bl	8000a38 <__aeabi_d2iz>
 800e516:	4604      	mov	r4, r0
 800e518:	f7f1 ff74 	bl	8000404 <__aeabi_i2d>
 800e51c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e520:	f7f1 ffda 	bl	80004d8 <__aeabi_dmul>
 800e524:	4602      	mov	r2, r0
 800e526:	460b      	mov	r3, r1
 800e528:	4640      	mov	r0, r8
 800e52a:	4649      	mov	r1, r9
 800e52c:	f7f1 fe1c 	bl	8000168 <__aeabi_dsub>
 800e530:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800e534:	f807 6b01 	strb.w	r6, [r7], #1
 800e538:	9e03      	ldr	r6, [sp, #12]
 800e53a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800e53e:	1bbe      	subs	r6, r7, r6
 800e540:	45b4      	cmp	ip, r6
 800e542:	4602      	mov	r2, r0
 800e544:	460b      	mov	r3, r1
 800e546:	d136      	bne.n	800e5b6 <_dtoa_r+0x70e>
 800e548:	f7f1 fe10 	bl	800016c <__adddf3>
 800e54c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e550:	4680      	mov	r8, r0
 800e552:	4689      	mov	r9, r1
 800e554:	f7f2 fa50 	bl	80009f8 <__aeabi_dcmpgt>
 800e558:	bb58      	cbnz	r0, 800e5b2 <_dtoa_r+0x70a>
 800e55a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e55e:	4640      	mov	r0, r8
 800e560:	4649      	mov	r1, r9
 800e562:	f7f2 fa21 	bl	80009a8 <__aeabi_dcmpeq>
 800e566:	b108      	cbz	r0, 800e56c <_dtoa_r+0x6c4>
 800e568:	07e1      	lsls	r1, r4, #31
 800e56a:	d422      	bmi.n	800e5b2 <_dtoa_r+0x70a>
 800e56c:	4628      	mov	r0, r5
 800e56e:	4659      	mov	r1, fp
 800e570:	f000 faf0 	bl	800eb54 <_Bfree>
 800e574:	2300      	movs	r3, #0
 800e576:	703b      	strb	r3, [r7, #0]
 800e578:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e57a:	f10a 0001 	add.w	r0, sl, #1
 800e57e:	6018      	str	r0, [r3, #0]
 800e580:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e582:	2b00      	cmp	r3, #0
 800e584:	f43f acde 	beq.w	800df44 <_dtoa_r+0x9c>
 800e588:	601f      	str	r7, [r3, #0]
 800e58a:	e4db      	b.n	800df44 <_dtoa_r+0x9c>
 800e58c:	4627      	mov	r7, r4
 800e58e:	463b      	mov	r3, r7
 800e590:	461f      	mov	r7, r3
 800e592:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e596:	2a39      	cmp	r2, #57	; 0x39
 800e598:	d107      	bne.n	800e5aa <_dtoa_r+0x702>
 800e59a:	9a03      	ldr	r2, [sp, #12]
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d1f7      	bne.n	800e590 <_dtoa_r+0x6e8>
 800e5a0:	2230      	movs	r2, #48	; 0x30
 800e5a2:	9903      	ldr	r1, [sp, #12]
 800e5a4:	f108 0801 	add.w	r8, r8, #1
 800e5a8:	700a      	strb	r2, [r1, #0]
 800e5aa:	781a      	ldrb	r2, [r3, #0]
 800e5ac:	3201      	adds	r2, #1
 800e5ae:	701a      	strb	r2, [r3, #0]
 800e5b0:	e79e      	b.n	800e4f0 <_dtoa_r+0x648>
 800e5b2:	46d0      	mov	r8, sl
 800e5b4:	e7eb      	b.n	800e58e <_dtoa_r+0x6e6>
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	4b6e      	ldr	r3, [pc, #440]	; (800e774 <_dtoa_r+0x8cc>)
 800e5ba:	f7f1 ff8d 	bl	80004d8 <__aeabi_dmul>
 800e5be:	2200      	movs	r2, #0
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	4680      	mov	r8, r0
 800e5c4:	4689      	mov	r9, r1
 800e5c6:	f7f2 f9ef 	bl	80009a8 <__aeabi_dcmpeq>
 800e5ca:	2800      	cmp	r0, #0
 800e5cc:	d09b      	beq.n	800e506 <_dtoa_r+0x65e>
 800e5ce:	e7cd      	b.n	800e56c <_dtoa_r+0x6c4>
 800e5d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e5d2:	2a00      	cmp	r2, #0
 800e5d4:	f000 80d0 	beq.w	800e778 <_dtoa_r+0x8d0>
 800e5d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e5da:	2a01      	cmp	r2, #1
 800e5dc:	f300 80ae 	bgt.w	800e73c <_dtoa_r+0x894>
 800e5e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e5e2:	2a00      	cmp	r2, #0
 800e5e4:	f000 80a6 	beq.w	800e734 <_dtoa_r+0x88c>
 800e5e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e5ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e5ee:	9f06      	ldr	r7, [sp, #24]
 800e5f0:	9a06      	ldr	r2, [sp, #24]
 800e5f2:	2101      	movs	r1, #1
 800e5f4:	441a      	add	r2, r3
 800e5f6:	9206      	str	r2, [sp, #24]
 800e5f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	441a      	add	r2, r3
 800e5fe:	9209      	str	r2, [sp, #36]	; 0x24
 800e600:	f000 fb5e 	bl	800ecc0 <__i2b>
 800e604:	4606      	mov	r6, r0
 800e606:	2f00      	cmp	r7, #0
 800e608:	dd0c      	ble.n	800e624 <_dtoa_r+0x77c>
 800e60a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	dd09      	ble.n	800e624 <_dtoa_r+0x77c>
 800e610:	42bb      	cmp	r3, r7
 800e612:	bfa8      	it	ge
 800e614:	463b      	movge	r3, r7
 800e616:	9a06      	ldr	r2, [sp, #24]
 800e618:	1aff      	subs	r7, r7, r3
 800e61a:	1ad2      	subs	r2, r2, r3
 800e61c:	9206      	str	r2, [sp, #24]
 800e61e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e620:	1ad3      	subs	r3, r2, r3
 800e622:	9309      	str	r3, [sp, #36]	; 0x24
 800e624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e626:	b1f3      	cbz	r3, 800e666 <_dtoa_r+0x7be>
 800e628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	f000 80a8 	beq.w	800e780 <_dtoa_r+0x8d8>
 800e630:	2c00      	cmp	r4, #0
 800e632:	dd10      	ble.n	800e656 <_dtoa_r+0x7ae>
 800e634:	4631      	mov	r1, r6
 800e636:	4622      	mov	r2, r4
 800e638:	4628      	mov	r0, r5
 800e63a:	f000 fbff 	bl	800ee3c <__pow5mult>
 800e63e:	465a      	mov	r2, fp
 800e640:	4601      	mov	r1, r0
 800e642:	4606      	mov	r6, r0
 800e644:	4628      	mov	r0, r5
 800e646:	f000 fb51 	bl	800ecec <__multiply>
 800e64a:	4680      	mov	r8, r0
 800e64c:	4659      	mov	r1, fp
 800e64e:	4628      	mov	r0, r5
 800e650:	f000 fa80 	bl	800eb54 <_Bfree>
 800e654:	46c3      	mov	fp, r8
 800e656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e658:	1b1a      	subs	r2, r3, r4
 800e65a:	d004      	beq.n	800e666 <_dtoa_r+0x7be>
 800e65c:	4659      	mov	r1, fp
 800e65e:	4628      	mov	r0, r5
 800e660:	f000 fbec 	bl	800ee3c <__pow5mult>
 800e664:	4683      	mov	fp, r0
 800e666:	2101      	movs	r1, #1
 800e668:	4628      	mov	r0, r5
 800e66a:	f000 fb29 	bl	800ecc0 <__i2b>
 800e66e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e670:	4604      	mov	r4, r0
 800e672:	2b00      	cmp	r3, #0
 800e674:	f340 8086 	ble.w	800e784 <_dtoa_r+0x8dc>
 800e678:	461a      	mov	r2, r3
 800e67a:	4601      	mov	r1, r0
 800e67c:	4628      	mov	r0, r5
 800e67e:	f000 fbdd 	bl	800ee3c <__pow5mult>
 800e682:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e684:	4604      	mov	r4, r0
 800e686:	2b01      	cmp	r3, #1
 800e688:	dd7f      	ble.n	800e78a <_dtoa_r+0x8e2>
 800e68a:	f04f 0800 	mov.w	r8, #0
 800e68e:	6923      	ldr	r3, [r4, #16]
 800e690:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e694:	6918      	ldr	r0, [r3, #16]
 800e696:	f000 fac5 	bl	800ec24 <__hi0bits>
 800e69a:	f1c0 0020 	rsb	r0, r0, #32
 800e69e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6a0:	4418      	add	r0, r3
 800e6a2:	f010 001f 	ands.w	r0, r0, #31
 800e6a6:	f000 8092 	beq.w	800e7ce <_dtoa_r+0x926>
 800e6aa:	f1c0 0320 	rsb	r3, r0, #32
 800e6ae:	2b04      	cmp	r3, #4
 800e6b0:	f340 808a 	ble.w	800e7c8 <_dtoa_r+0x920>
 800e6b4:	f1c0 001c 	rsb	r0, r0, #28
 800e6b8:	9b06      	ldr	r3, [sp, #24]
 800e6ba:	4407      	add	r7, r0
 800e6bc:	4403      	add	r3, r0
 800e6be:	9306      	str	r3, [sp, #24]
 800e6c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6c2:	4403      	add	r3, r0
 800e6c4:	9309      	str	r3, [sp, #36]	; 0x24
 800e6c6:	9b06      	ldr	r3, [sp, #24]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	dd05      	ble.n	800e6d8 <_dtoa_r+0x830>
 800e6cc:	4659      	mov	r1, fp
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	4628      	mov	r0, r5
 800e6d2:	f000 fc0d 	bl	800eef0 <__lshift>
 800e6d6:	4683      	mov	fp, r0
 800e6d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	dd05      	ble.n	800e6ea <_dtoa_r+0x842>
 800e6de:	4621      	mov	r1, r4
 800e6e0:	461a      	mov	r2, r3
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	f000 fc04 	bl	800eef0 <__lshift>
 800e6e8:	4604      	mov	r4, r0
 800e6ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d070      	beq.n	800e7d2 <_dtoa_r+0x92a>
 800e6f0:	4621      	mov	r1, r4
 800e6f2:	4658      	mov	r0, fp
 800e6f4:	f000 fc6c 	bl	800efd0 <__mcmp>
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	da6a      	bge.n	800e7d2 <_dtoa_r+0x92a>
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	4659      	mov	r1, fp
 800e700:	220a      	movs	r2, #10
 800e702:	4628      	mov	r0, r5
 800e704:	f000 fa48 	bl	800eb98 <__multadd>
 800e708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e70a:	4683      	mov	fp, r0
 800e70c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e710:	2b00      	cmp	r3, #0
 800e712:	f000 8194 	beq.w	800ea3e <_dtoa_r+0xb96>
 800e716:	4631      	mov	r1, r6
 800e718:	2300      	movs	r3, #0
 800e71a:	220a      	movs	r2, #10
 800e71c:	4628      	mov	r0, r5
 800e71e:	f000 fa3b 	bl	800eb98 <__multadd>
 800e722:	f1b9 0f00 	cmp.w	r9, #0
 800e726:	4606      	mov	r6, r0
 800e728:	f300 8093 	bgt.w	800e852 <_dtoa_r+0x9aa>
 800e72c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e72e:	2b02      	cmp	r3, #2
 800e730:	dc57      	bgt.n	800e7e2 <_dtoa_r+0x93a>
 800e732:	e08e      	b.n	800e852 <_dtoa_r+0x9aa>
 800e734:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e736:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e73a:	e757      	b.n	800e5ec <_dtoa_r+0x744>
 800e73c:	9b08      	ldr	r3, [sp, #32]
 800e73e:	1e5c      	subs	r4, r3, #1
 800e740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e742:	42a3      	cmp	r3, r4
 800e744:	bfb7      	itett	lt
 800e746:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e748:	1b1c      	subge	r4, r3, r4
 800e74a:	1ae2      	sublt	r2, r4, r3
 800e74c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e74e:	bfbe      	ittt	lt
 800e750:	940a      	strlt	r4, [sp, #40]	; 0x28
 800e752:	189b      	addlt	r3, r3, r2
 800e754:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e756:	9b08      	ldr	r3, [sp, #32]
 800e758:	bfb8      	it	lt
 800e75a:	2400      	movlt	r4, #0
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	bfbb      	ittet	lt
 800e760:	9b06      	ldrlt	r3, [sp, #24]
 800e762:	9a08      	ldrlt	r2, [sp, #32]
 800e764:	9f06      	ldrge	r7, [sp, #24]
 800e766:	1a9f      	sublt	r7, r3, r2
 800e768:	bfac      	ite	ge
 800e76a:	9b08      	ldrge	r3, [sp, #32]
 800e76c:	2300      	movlt	r3, #0
 800e76e:	e73f      	b.n	800e5f0 <_dtoa_r+0x748>
 800e770:	3fe00000 	.word	0x3fe00000
 800e774:	40240000 	.word	0x40240000
 800e778:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e77a:	9f06      	ldr	r7, [sp, #24]
 800e77c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800e77e:	e742      	b.n	800e606 <_dtoa_r+0x75e>
 800e780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e782:	e76b      	b.n	800e65c <_dtoa_r+0x7b4>
 800e784:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e786:	2b01      	cmp	r3, #1
 800e788:	dc19      	bgt.n	800e7be <_dtoa_r+0x916>
 800e78a:	9b04      	ldr	r3, [sp, #16]
 800e78c:	b9bb      	cbnz	r3, 800e7be <_dtoa_r+0x916>
 800e78e:	9b05      	ldr	r3, [sp, #20]
 800e790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e794:	b99b      	cbnz	r3, 800e7be <_dtoa_r+0x916>
 800e796:	9b05      	ldr	r3, [sp, #20]
 800e798:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e79c:	0d1b      	lsrs	r3, r3, #20
 800e79e:	051b      	lsls	r3, r3, #20
 800e7a0:	b183      	cbz	r3, 800e7c4 <_dtoa_r+0x91c>
 800e7a2:	f04f 0801 	mov.w	r8, #1
 800e7a6:	9b06      	ldr	r3, [sp, #24]
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	9306      	str	r3, [sp, #24]
 800e7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	9309      	str	r3, [sp, #36]	; 0x24
 800e7b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	f47f af6a 	bne.w	800e68e <_dtoa_r+0x7e6>
 800e7ba:	2001      	movs	r0, #1
 800e7bc:	e76f      	b.n	800e69e <_dtoa_r+0x7f6>
 800e7be:	f04f 0800 	mov.w	r8, #0
 800e7c2:	e7f6      	b.n	800e7b2 <_dtoa_r+0x90a>
 800e7c4:	4698      	mov	r8, r3
 800e7c6:	e7f4      	b.n	800e7b2 <_dtoa_r+0x90a>
 800e7c8:	f43f af7d 	beq.w	800e6c6 <_dtoa_r+0x81e>
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	301c      	adds	r0, #28
 800e7d0:	e772      	b.n	800e6b8 <_dtoa_r+0x810>
 800e7d2:	9b08      	ldr	r3, [sp, #32]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	dc36      	bgt.n	800e846 <_dtoa_r+0x99e>
 800e7d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e7da:	2b02      	cmp	r3, #2
 800e7dc:	dd33      	ble.n	800e846 <_dtoa_r+0x99e>
 800e7de:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e7e2:	f1b9 0f00 	cmp.w	r9, #0
 800e7e6:	d10d      	bne.n	800e804 <_dtoa_r+0x95c>
 800e7e8:	4621      	mov	r1, r4
 800e7ea:	464b      	mov	r3, r9
 800e7ec:	2205      	movs	r2, #5
 800e7ee:	4628      	mov	r0, r5
 800e7f0:	f000 f9d2 	bl	800eb98 <__multadd>
 800e7f4:	4601      	mov	r1, r0
 800e7f6:	4604      	mov	r4, r0
 800e7f8:	4658      	mov	r0, fp
 800e7fa:	f000 fbe9 	bl	800efd0 <__mcmp>
 800e7fe:	2800      	cmp	r0, #0
 800e800:	f73f adb8 	bgt.w	800e374 <_dtoa_r+0x4cc>
 800e804:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e806:	9f03      	ldr	r7, [sp, #12]
 800e808:	ea6f 0a03 	mvn.w	sl, r3
 800e80c:	f04f 0800 	mov.w	r8, #0
 800e810:	4621      	mov	r1, r4
 800e812:	4628      	mov	r0, r5
 800e814:	f000 f99e 	bl	800eb54 <_Bfree>
 800e818:	2e00      	cmp	r6, #0
 800e81a:	f43f aea7 	beq.w	800e56c <_dtoa_r+0x6c4>
 800e81e:	f1b8 0f00 	cmp.w	r8, #0
 800e822:	d005      	beq.n	800e830 <_dtoa_r+0x988>
 800e824:	45b0      	cmp	r8, r6
 800e826:	d003      	beq.n	800e830 <_dtoa_r+0x988>
 800e828:	4641      	mov	r1, r8
 800e82a:	4628      	mov	r0, r5
 800e82c:	f000 f992 	bl	800eb54 <_Bfree>
 800e830:	4631      	mov	r1, r6
 800e832:	4628      	mov	r0, r5
 800e834:	f000 f98e 	bl	800eb54 <_Bfree>
 800e838:	e698      	b.n	800e56c <_dtoa_r+0x6c4>
 800e83a:	2400      	movs	r4, #0
 800e83c:	4626      	mov	r6, r4
 800e83e:	e7e1      	b.n	800e804 <_dtoa_r+0x95c>
 800e840:	46c2      	mov	sl, r8
 800e842:	4626      	mov	r6, r4
 800e844:	e596      	b.n	800e374 <_dtoa_r+0x4cc>
 800e846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e848:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	f000 80fd 	beq.w	800ea4c <_dtoa_r+0xba4>
 800e852:	2f00      	cmp	r7, #0
 800e854:	dd05      	ble.n	800e862 <_dtoa_r+0x9ba>
 800e856:	4631      	mov	r1, r6
 800e858:	463a      	mov	r2, r7
 800e85a:	4628      	mov	r0, r5
 800e85c:	f000 fb48 	bl	800eef0 <__lshift>
 800e860:	4606      	mov	r6, r0
 800e862:	f1b8 0f00 	cmp.w	r8, #0
 800e866:	d05c      	beq.n	800e922 <_dtoa_r+0xa7a>
 800e868:	4628      	mov	r0, r5
 800e86a:	6871      	ldr	r1, [r6, #4]
 800e86c:	f000 f932 	bl	800ead4 <_Balloc>
 800e870:	4607      	mov	r7, r0
 800e872:	b928      	cbnz	r0, 800e880 <_dtoa_r+0x9d8>
 800e874:	4602      	mov	r2, r0
 800e876:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e87a:	4b7f      	ldr	r3, [pc, #508]	; (800ea78 <_dtoa_r+0xbd0>)
 800e87c:	f7ff bb28 	b.w	800ded0 <_dtoa_r+0x28>
 800e880:	6932      	ldr	r2, [r6, #16]
 800e882:	f106 010c 	add.w	r1, r6, #12
 800e886:	3202      	adds	r2, #2
 800e888:	0092      	lsls	r2, r2, #2
 800e88a:	300c      	adds	r0, #12
 800e88c:	f000 f914 	bl	800eab8 <memcpy>
 800e890:	2201      	movs	r2, #1
 800e892:	4639      	mov	r1, r7
 800e894:	4628      	mov	r0, r5
 800e896:	f000 fb2b 	bl	800eef0 <__lshift>
 800e89a:	46b0      	mov	r8, r6
 800e89c:	4606      	mov	r6, r0
 800e89e:	9b03      	ldr	r3, [sp, #12]
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	9308      	str	r3, [sp, #32]
 800e8a4:	9b03      	ldr	r3, [sp, #12]
 800e8a6:	444b      	add	r3, r9
 800e8a8:	930a      	str	r3, [sp, #40]	; 0x28
 800e8aa:	9b04      	ldr	r3, [sp, #16]
 800e8ac:	f003 0301 	and.w	r3, r3, #1
 800e8b0:	9309      	str	r3, [sp, #36]	; 0x24
 800e8b2:	9b08      	ldr	r3, [sp, #32]
 800e8b4:	4621      	mov	r1, r4
 800e8b6:	3b01      	subs	r3, #1
 800e8b8:	4658      	mov	r0, fp
 800e8ba:	9304      	str	r3, [sp, #16]
 800e8bc:	f7ff fa66 	bl	800dd8c <quorem>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	4641      	mov	r1, r8
 800e8c4:	3330      	adds	r3, #48	; 0x30
 800e8c6:	9006      	str	r0, [sp, #24]
 800e8c8:	4658      	mov	r0, fp
 800e8ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800e8cc:	f000 fb80 	bl	800efd0 <__mcmp>
 800e8d0:	4632      	mov	r2, r6
 800e8d2:	4681      	mov	r9, r0
 800e8d4:	4621      	mov	r1, r4
 800e8d6:	4628      	mov	r0, r5
 800e8d8:	f000 fb96 	bl	800f008 <__mdiff>
 800e8dc:	68c2      	ldr	r2, [r0, #12]
 800e8de:	4607      	mov	r7, r0
 800e8e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8e2:	bb02      	cbnz	r2, 800e926 <_dtoa_r+0xa7e>
 800e8e4:	4601      	mov	r1, r0
 800e8e6:	4658      	mov	r0, fp
 800e8e8:	f000 fb72 	bl	800efd0 <__mcmp>
 800e8ec:	4602      	mov	r2, r0
 800e8ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8f0:	4639      	mov	r1, r7
 800e8f2:	4628      	mov	r0, r5
 800e8f4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800e8f8:	f000 f92c 	bl	800eb54 <_Bfree>
 800e8fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e8fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e900:	9f08      	ldr	r7, [sp, #32]
 800e902:	ea43 0102 	orr.w	r1, r3, r2
 800e906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e908:	430b      	orrs	r3, r1
 800e90a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e90c:	d10d      	bne.n	800e92a <_dtoa_r+0xa82>
 800e90e:	2b39      	cmp	r3, #57	; 0x39
 800e910:	d029      	beq.n	800e966 <_dtoa_r+0xabe>
 800e912:	f1b9 0f00 	cmp.w	r9, #0
 800e916:	dd01      	ble.n	800e91c <_dtoa_r+0xa74>
 800e918:	9b06      	ldr	r3, [sp, #24]
 800e91a:	3331      	adds	r3, #49	; 0x31
 800e91c:	9a04      	ldr	r2, [sp, #16]
 800e91e:	7013      	strb	r3, [r2, #0]
 800e920:	e776      	b.n	800e810 <_dtoa_r+0x968>
 800e922:	4630      	mov	r0, r6
 800e924:	e7b9      	b.n	800e89a <_dtoa_r+0x9f2>
 800e926:	2201      	movs	r2, #1
 800e928:	e7e2      	b.n	800e8f0 <_dtoa_r+0xa48>
 800e92a:	f1b9 0f00 	cmp.w	r9, #0
 800e92e:	db06      	blt.n	800e93e <_dtoa_r+0xa96>
 800e930:	9922      	ldr	r1, [sp, #136]	; 0x88
 800e932:	ea41 0909 	orr.w	r9, r1, r9
 800e936:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e938:	ea59 0101 	orrs.w	r1, r9, r1
 800e93c:	d120      	bne.n	800e980 <_dtoa_r+0xad8>
 800e93e:	2a00      	cmp	r2, #0
 800e940:	ddec      	ble.n	800e91c <_dtoa_r+0xa74>
 800e942:	4659      	mov	r1, fp
 800e944:	2201      	movs	r2, #1
 800e946:	4628      	mov	r0, r5
 800e948:	9308      	str	r3, [sp, #32]
 800e94a:	f000 fad1 	bl	800eef0 <__lshift>
 800e94e:	4621      	mov	r1, r4
 800e950:	4683      	mov	fp, r0
 800e952:	f000 fb3d 	bl	800efd0 <__mcmp>
 800e956:	2800      	cmp	r0, #0
 800e958:	9b08      	ldr	r3, [sp, #32]
 800e95a:	dc02      	bgt.n	800e962 <_dtoa_r+0xaba>
 800e95c:	d1de      	bne.n	800e91c <_dtoa_r+0xa74>
 800e95e:	07da      	lsls	r2, r3, #31
 800e960:	d5dc      	bpl.n	800e91c <_dtoa_r+0xa74>
 800e962:	2b39      	cmp	r3, #57	; 0x39
 800e964:	d1d8      	bne.n	800e918 <_dtoa_r+0xa70>
 800e966:	2339      	movs	r3, #57	; 0x39
 800e968:	9a04      	ldr	r2, [sp, #16]
 800e96a:	7013      	strb	r3, [r2, #0]
 800e96c:	463b      	mov	r3, r7
 800e96e:	461f      	mov	r7, r3
 800e970:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800e974:	3b01      	subs	r3, #1
 800e976:	2a39      	cmp	r2, #57	; 0x39
 800e978:	d050      	beq.n	800ea1c <_dtoa_r+0xb74>
 800e97a:	3201      	adds	r2, #1
 800e97c:	701a      	strb	r2, [r3, #0]
 800e97e:	e747      	b.n	800e810 <_dtoa_r+0x968>
 800e980:	2a00      	cmp	r2, #0
 800e982:	dd03      	ble.n	800e98c <_dtoa_r+0xae4>
 800e984:	2b39      	cmp	r3, #57	; 0x39
 800e986:	d0ee      	beq.n	800e966 <_dtoa_r+0xabe>
 800e988:	3301      	adds	r3, #1
 800e98a:	e7c7      	b.n	800e91c <_dtoa_r+0xa74>
 800e98c:	9a08      	ldr	r2, [sp, #32]
 800e98e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e990:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e994:	428a      	cmp	r2, r1
 800e996:	d02a      	beq.n	800e9ee <_dtoa_r+0xb46>
 800e998:	4659      	mov	r1, fp
 800e99a:	2300      	movs	r3, #0
 800e99c:	220a      	movs	r2, #10
 800e99e:	4628      	mov	r0, r5
 800e9a0:	f000 f8fa 	bl	800eb98 <__multadd>
 800e9a4:	45b0      	cmp	r8, r6
 800e9a6:	4683      	mov	fp, r0
 800e9a8:	f04f 0300 	mov.w	r3, #0
 800e9ac:	f04f 020a 	mov.w	r2, #10
 800e9b0:	4641      	mov	r1, r8
 800e9b2:	4628      	mov	r0, r5
 800e9b4:	d107      	bne.n	800e9c6 <_dtoa_r+0xb1e>
 800e9b6:	f000 f8ef 	bl	800eb98 <__multadd>
 800e9ba:	4680      	mov	r8, r0
 800e9bc:	4606      	mov	r6, r0
 800e9be:	9b08      	ldr	r3, [sp, #32]
 800e9c0:	3301      	adds	r3, #1
 800e9c2:	9308      	str	r3, [sp, #32]
 800e9c4:	e775      	b.n	800e8b2 <_dtoa_r+0xa0a>
 800e9c6:	f000 f8e7 	bl	800eb98 <__multadd>
 800e9ca:	4631      	mov	r1, r6
 800e9cc:	4680      	mov	r8, r0
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	220a      	movs	r2, #10
 800e9d2:	4628      	mov	r0, r5
 800e9d4:	f000 f8e0 	bl	800eb98 <__multadd>
 800e9d8:	4606      	mov	r6, r0
 800e9da:	e7f0      	b.n	800e9be <_dtoa_r+0xb16>
 800e9dc:	f1b9 0f00 	cmp.w	r9, #0
 800e9e0:	bfcc      	ite	gt
 800e9e2:	464f      	movgt	r7, r9
 800e9e4:	2701      	movle	r7, #1
 800e9e6:	f04f 0800 	mov.w	r8, #0
 800e9ea:	9a03      	ldr	r2, [sp, #12]
 800e9ec:	4417      	add	r7, r2
 800e9ee:	4659      	mov	r1, fp
 800e9f0:	2201      	movs	r2, #1
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	9308      	str	r3, [sp, #32]
 800e9f6:	f000 fa7b 	bl	800eef0 <__lshift>
 800e9fa:	4621      	mov	r1, r4
 800e9fc:	4683      	mov	fp, r0
 800e9fe:	f000 fae7 	bl	800efd0 <__mcmp>
 800ea02:	2800      	cmp	r0, #0
 800ea04:	dcb2      	bgt.n	800e96c <_dtoa_r+0xac4>
 800ea06:	d102      	bne.n	800ea0e <_dtoa_r+0xb66>
 800ea08:	9b08      	ldr	r3, [sp, #32]
 800ea0a:	07db      	lsls	r3, r3, #31
 800ea0c:	d4ae      	bmi.n	800e96c <_dtoa_r+0xac4>
 800ea0e:	463b      	mov	r3, r7
 800ea10:	461f      	mov	r7, r3
 800ea12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea16:	2a30      	cmp	r2, #48	; 0x30
 800ea18:	d0fa      	beq.n	800ea10 <_dtoa_r+0xb68>
 800ea1a:	e6f9      	b.n	800e810 <_dtoa_r+0x968>
 800ea1c:	9a03      	ldr	r2, [sp, #12]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d1a5      	bne.n	800e96e <_dtoa_r+0xac6>
 800ea22:	2331      	movs	r3, #49	; 0x31
 800ea24:	f10a 0a01 	add.w	sl, sl, #1
 800ea28:	e779      	b.n	800e91e <_dtoa_r+0xa76>
 800ea2a:	4b14      	ldr	r3, [pc, #80]	; (800ea7c <_dtoa_r+0xbd4>)
 800ea2c:	f7ff baa8 	b.w	800df80 <_dtoa_r+0xd8>
 800ea30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	f47f aa81 	bne.w	800df3a <_dtoa_r+0x92>
 800ea38:	4b11      	ldr	r3, [pc, #68]	; (800ea80 <_dtoa_r+0xbd8>)
 800ea3a:	f7ff baa1 	b.w	800df80 <_dtoa_r+0xd8>
 800ea3e:	f1b9 0f00 	cmp.w	r9, #0
 800ea42:	dc03      	bgt.n	800ea4c <_dtoa_r+0xba4>
 800ea44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ea46:	2b02      	cmp	r3, #2
 800ea48:	f73f aecb 	bgt.w	800e7e2 <_dtoa_r+0x93a>
 800ea4c:	9f03      	ldr	r7, [sp, #12]
 800ea4e:	4621      	mov	r1, r4
 800ea50:	4658      	mov	r0, fp
 800ea52:	f7ff f99b 	bl	800dd8c <quorem>
 800ea56:	9a03      	ldr	r2, [sp, #12]
 800ea58:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ea5c:	f807 3b01 	strb.w	r3, [r7], #1
 800ea60:	1aba      	subs	r2, r7, r2
 800ea62:	4591      	cmp	r9, r2
 800ea64:	ddba      	ble.n	800e9dc <_dtoa_r+0xb34>
 800ea66:	4659      	mov	r1, fp
 800ea68:	2300      	movs	r3, #0
 800ea6a:	220a      	movs	r2, #10
 800ea6c:	4628      	mov	r0, r5
 800ea6e:	f000 f893 	bl	800eb98 <__multadd>
 800ea72:	4683      	mov	fp, r0
 800ea74:	e7eb      	b.n	800ea4e <_dtoa_r+0xba6>
 800ea76:	bf00      	nop
 800ea78:	08012dc7 	.word	0x08012dc7
 800ea7c:	08012d24 	.word	0x08012d24
 800ea80:	08012d48 	.word	0x08012d48

0800ea84 <_localeconv_r>:
 800ea84:	4800      	ldr	r0, [pc, #0]	; (800ea88 <_localeconv_r+0x4>)
 800ea86:	4770      	bx	lr
 800ea88:	20000198 	.word	0x20000198

0800ea8c <malloc>:
 800ea8c:	4b02      	ldr	r3, [pc, #8]	; (800ea98 <malloc+0xc>)
 800ea8e:	4601      	mov	r1, r0
 800ea90:	6818      	ldr	r0, [r3, #0]
 800ea92:	f000 bc1d 	b.w	800f2d0 <_malloc_r>
 800ea96:	bf00      	nop
 800ea98:	20000044 	.word	0x20000044

0800ea9c <memchr>:
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	b510      	push	{r4, lr}
 800eaa0:	b2c9      	uxtb	r1, r1
 800eaa2:	4402      	add	r2, r0
 800eaa4:	4293      	cmp	r3, r2
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	d101      	bne.n	800eaae <memchr+0x12>
 800eaaa:	2000      	movs	r0, #0
 800eaac:	e003      	b.n	800eab6 <memchr+0x1a>
 800eaae:	7804      	ldrb	r4, [r0, #0]
 800eab0:	3301      	adds	r3, #1
 800eab2:	428c      	cmp	r4, r1
 800eab4:	d1f6      	bne.n	800eaa4 <memchr+0x8>
 800eab6:	bd10      	pop	{r4, pc}

0800eab8 <memcpy>:
 800eab8:	440a      	add	r2, r1
 800eaba:	4291      	cmp	r1, r2
 800eabc:	f100 33ff 	add.w	r3, r0, #4294967295
 800eac0:	d100      	bne.n	800eac4 <memcpy+0xc>
 800eac2:	4770      	bx	lr
 800eac4:	b510      	push	{r4, lr}
 800eac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eaca:	4291      	cmp	r1, r2
 800eacc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ead0:	d1f9      	bne.n	800eac6 <memcpy+0xe>
 800ead2:	bd10      	pop	{r4, pc}

0800ead4 <_Balloc>:
 800ead4:	b570      	push	{r4, r5, r6, lr}
 800ead6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ead8:	4604      	mov	r4, r0
 800eada:	460d      	mov	r5, r1
 800eadc:	b976      	cbnz	r6, 800eafc <_Balloc+0x28>
 800eade:	2010      	movs	r0, #16
 800eae0:	f7ff ffd4 	bl	800ea8c <malloc>
 800eae4:	4602      	mov	r2, r0
 800eae6:	6260      	str	r0, [r4, #36]	; 0x24
 800eae8:	b920      	cbnz	r0, 800eaf4 <_Balloc+0x20>
 800eaea:	2166      	movs	r1, #102	; 0x66
 800eaec:	4b17      	ldr	r3, [pc, #92]	; (800eb4c <_Balloc+0x78>)
 800eaee:	4818      	ldr	r0, [pc, #96]	; (800eb50 <_Balloc+0x7c>)
 800eaf0:	f000 fdce 	bl	800f690 <__assert_func>
 800eaf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eaf8:	6006      	str	r6, [r0, #0]
 800eafa:	60c6      	str	r6, [r0, #12]
 800eafc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800eafe:	68f3      	ldr	r3, [r6, #12]
 800eb00:	b183      	cbz	r3, 800eb24 <_Balloc+0x50>
 800eb02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb04:	68db      	ldr	r3, [r3, #12]
 800eb06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eb0a:	b9b8      	cbnz	r0, 800eb3c <_Balloc+0x68>
 800eb0c:	2101      	movs	r1, #1
 800eb0e:	fa01 f605 	lsl.w	r6, r1, r5
 800eb12:	1d72      	adds	r2, r6, #5
 800eb14:	4620      	mov	r0, r4
 800eb16:	0092      	lsls	r2, r2, #2
 800eb18:	f000 fb5e 	bl	800f1d8 <_calloc_r>
 800eb1c:	b160      	cbz	r0, 800eb38 <_Balloc+0x64>
 800eb1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eb22:	e00e      	b.n	800eb42 <_Balloc+0x6e>
 800eb24:	2221      	movs	r2, #33	; 0x21
 800eb26:	2104      	movs	r1, #4
 800eb28:	4620      	mov	r0, r4
 800eb2a:	f000 fb55 	bl	800f1d8 <_calloc_r>
 800eb2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb30:	60f0      	str	r0, [r6, #12]
 800eb32:	68db      	ldr	r3, [r3, #12]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d1e4      	bne.n	800eb02 <_Balloc+0x2e>
 800eb38:	2000      	movs	r0, #0
 800eb3a:	bd70      	pop	{r4, r5, r6, pc}
 800eb3c:	6802      	ldr	r2, [r0, #0]
 800eb3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eb42:	2300      	movs	r3, #0
 800eb44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eb48:	e7f7      	b.n	800eb3a <_Balloc+0x66>
 800eb4a:	bf00      	nop
 800eb4c:	08012d55 	.word	0x08012d55
 800eb50:	08012dd8 	.word	0x08012dd8

0800eb54 <_Bfree>:
 800eb54:	b570      	push	{r4, r5, r6, lr}
 800eb56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eb58:	4605      	mov	r5, r0
 800eb5a:	460c      	mov	r4, r1
 800eb5c:	b976      	cbnz	r6, 800eb7c <_Bfree+0x28>
 800eb5e:	2010      	movs	r0, #16
 800eb60:	f7ff ff94 	bl	800ea8c <malloc>
 800eb64:	4602      	mov	r2, r0
 800eb66:	6268      	str	r0, [r5, #36]	; 0x24
 800eb68:	b920      	cbnz	r0, 800eb74 <_Bfree+0x20>
 800eb6a:	218a      	movs	r1, #138	; 0x8a
 800eb6c:	4b08      	ldr	r3, [pc, #32]	; (800eb90 <_Bfree+0x3c>)
 800eb6e:	4809      	ldr	r0, [pc, #36]	; (800eb94 <_Bfree+0x40>)
 800eb70:	f000 fd8e 	bl	800f690 <__assert_func>
 800eb74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb78:	6006      	str	r6, [r0, #0]
 800eb7a:	60c6      	str	r6, [r0, #12]
 800eb7c:	b13c      	cbz	r4, 800eb8e <_Bfree+0x3a>
 800eb7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eb80:	6862      	ldr	r2, [r4, #4]
 800eb82:	68db      	ldr	r3, [r3, #12]
 800eb84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb88:	6021      	str	r1, [r4, #0]
 800eb8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eb8e:	bd70      	pop	{r4, r5, r6, pc}
 800eb90:	08012d55 	.word	0x08012d55
 800eb94:	08012dd8 	.word	0x08012dd8

0800eb98 <__multadd>:
 800eb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb9c:	4607      	mov	r7, r0
 800eb9e:	460c      	mov	r4, r1
 800eba0:	461e      	mov	r6, r3
 800eba2:	2000      	movs	r0, #0
 800eba4:	690d      	ldr	r5, [r1, #16]
 800eba6:	f101 0c14 	add.w	ip, r1, #20
 800ebaa:	f8dc 3000 	ldr.w	r3, [ip]
 800ebae:	3001      	adds	r0, #1
 800ebb0:	b299      	uxth	r1, r3
 800ebb2:	fb02 6101 	mla	r1, r2, r1, r6
 800ebb6:	0c1e      	lsrs	r6, r3, #16
 800ebb8:	0c0b      	lsrs	r3, r1, #16
 800ebba:	fb02 3306 	mla	r3, r2, r6, r3
 800ebbe:	b289      	uxth	r1, r1
 800ebc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ebc4:	4285      	cmp	r5, r0
 800ebc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ebca:	f84c 1b04 	str.w	r1, [ip], #4
 800ebce:	dcec      	bgt.n	800ebaa <__multadd+0x12>
 800ebd0:	b30e      	cbz	r6, 800ec16 <__multadd+0x7e>
 800ebd2:	68a3      	ldr	r3, [r4, #8]
 800ebd4:	42ab      	cmp	r3, r5
 800ebd6:	dc19      	bgt.n	800ec0c <__multadd+0x74>
 800ebd8:	6861      	ldr	r1, [r4, #4]
 800ebda:	4638      	mov	r0, r7
 800ebdc:	3101      	adds	r1, #1
 800ebde:	f7ff ff79 	bl	800ead4 <_Balloc>
 800ebe2:	4680      	mov	r8, r0
 800ebe4:	b928      	cbnz	r0, 800ebf2 <__multadd+0x5a>
 800ebe6:	4602      	mov	r2, r0
 800ebe8:	21b5      	movs	r1, #181	; 0xb5
 800ebea:	4b0c      	ldr	r3, [pc, #48]	; (800ec1c <__multadd+0x84>)
 800ebec:	480c      	ldr	r0, [pc, #48]	; (800ec20 <__multadd+0x88>)
 800ebee:	f000 fd4f 	bl	800f690 <__assert_func>
 800ebf2:	6922      	ldr	r2, [r4, #16]
 800ebf4:	f104 010c 	add.w	r1, r4, #12
 800ebf8:	3202      	adds	r2, #2
 800ebfa:	0092      	lsls	r2, r2, #2
 800ebfc:	300c      	adds	r0, #12
 800ebfe:	f7ff ff5b 	bl	800eab8 <memcpy>
 800ec02:	4621      	mov	r1, r4
 800ec04:	4638      	mov	r0, r7
 800ec06:	f7ff ffa5 	bl	800eb54 <_Bfree>
 800ec0a:	4644      	mov	r4, r8
 800ec0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ec10:	3501      	adds	r5, #1
 800ec12:	615e      	str	r6, [r3, #20]
 800ec14:	6125      	str	r5, [r4, #16]
 800ec16:	4620      	mov	r0, r4
 800ec18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec1c:	08012dc7 	.word	0x08012dc7
 800ec20:	08012dd8 	.word	0x08012dd8

0800ec24 <__hi0bits>:
 800ec24:	0c02      	lsrs	r2, r0, #16
 800ec26:	0412      	lsls	r2, r2, #16
 800ec28:	4603      	mov	r3, r0
 800ec2a:	b9ca      	cbnz	r2, 800ec60 <__hi0bits+0x3c>
 800ec2c:	0403      	lsls	r3, r0, #16
 800ec2e:	2010      	movs	r0, #16
 800ec30:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ec34:	bf04      	itt	eq
 800ec36:	021b      	lsleq	r3, r3, #8
 800ec38:	3008      	addeq	r0, #8
 800ec3a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ec3e:	bf04      	itt	eq
 800ec40:	011b      	lsleq	r3, r3, #4
 800ec42:	3004      	addeq	r0, #4
 800ec44:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ec48:	bf04      	itt	eq
 800ec4a:	009b      	lsleq	r3, r3, #2
 800ec4c:	3002      	addeq	r0, #2
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	db05      	blt.n	800ec5e <__hi0bits+0x3a>
 800ec52:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ec56:	f100 0001 	add.w	r0, r0, #1
 800ec5a:	bf08      	it	eq
 800ec5c:	2020      	moveq	r0, #32
 800ec5e:	4770      	bx	lr
 800ec60:	2000      	movs	r0, #0
 800ec62:	e7e5      	b.n	800ec30 <__hi0bits+0xc>

0800ec64 <__lo0bits>:
 800ec64:	6803      	ldr	r3, [r0, #0]
 800ec66:	4602      	mov	r2, r0
 800ec68:	f013 0007 	ands.w	r0, r3, #7
 800ec6c:	d00b      	beq.n	800ec86 <__lo0bits+0x22>
 800ec6e:	07d9      	lsls	r1, r3, #31
 800ec70:	d421      	bmi.n	800ecb6 <__lo0bits+0x52>
 800ec72:	0798      	lsls	r0, r3, #30
 800ec74:	bf49      	itett	mi
 800ec76:	085b      	lsrmi	r3, r3, #1
 800ec78:	089b      	lsrpl	r3, r3, #2
 800ec7a:	2001      	movmi	r0, #1
 800ec7c:	6013      	strmi	r3, [r2, #0]
 800ec7e:	bf5c      	itt	pl
 800ec80:	2002      	movpl	r0, #2
 800ec82:	6013      	strpl	r3, [r2, #0]
 800ec84:	4770      	bx	lr
 800ec86:	b299      	uxth	r1, r3
 800ec88:	b909      	cbnz	r1, 800ec8e <__lo0bits+0x2a>
 800ec8a:	2010      	movs	r0, #16
 800ec8c:	0c1b      	lsrs	r3, r3, #16
 800ec8e:	b2d9      	uxtb	r1, r3
 800ec90:	b909      	cbnz	r1, 800ec96 <__lo0bits+0x32>
 800ec92:	3008      	adds	r0, #8
 800ec94:	0a1b      	lsrs	r3, r3, #8
 800ec96:	0719      	lsls	r1, r3, #28
 800ec98:	bf04      	itt	eq
 800ec9a:	091b      	lsreq	r3, r3, #4
 800ec9c:	3004      	addeq	r0, #4
 800ec9e:	0799      	lsls	r1, r3, #30
 800eca0:	bf04      	itt	eq
 800eca2:	089b      	lsreq	r3, r3, #2
 800eca4:	3002      	addeq	r0, #2
 800eca6:	07d9      	lsls	r1, r3, #31
 800eca8:	d403      	bmi.n	800ecb2 <__lo0bits+0x4e>
 800ecaa:	085b      	lsrs	r3, r3, #1
 800ecac:	f100 0001 	add.w	r0, r0, #1
 800ecb0:	d003      	beq.n	800ecba <__lo0bits+0x56>
 800ecb2:	6013      	str	r3, [r2, #0]
 800ecb4:	4770      	bx	lr
 800ecb6:	2000      	movs	r0, #0
 800ecb8:	4770      	bx	lr
 800ecba:	2020      	movs	r0, #32
 800ecbc:	4770      	bx	lr
	...

0800ecc0 <__i2b>:
 800ecc0:	b510      	push	{r4, lr}
 800ecc2:	460c      	mov	r4, r1
 800ecc4:	2101      	movs	r1, #1
 800ecc6:	f7ff ff05 	bl	800ead4 <_Balloc>
 800ecca:	4602      	mov	r2, r0
 800eccc:	b928      	cbnz	r0, 800ecda <__i2b+0x1a>
 800ecce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ecd2:	4b04      	ldr	r3, [pc, #16]	; (800ece4 <__i2b+0x24>)
 800ecd4:	4804      	ldr	r0, [pc, #16]	; (800ece8 <__i2b+0x28>)
 800ecd6:	f000 fcdb 	bl	800f690 <__assert_func>
 800ecda:	2301      	movs	r3, #1
 800ecdc:	6144      	str	r4, [r0, #20]
 800ecde:	6103      	str	r3, [r0, #16]
 800ece0:	bd10      	pop	{r4, pc}
 800ece2:	bf00      	nop
 800ece4:	08012dc7 	.word	0x08012dc7
 800ece8:	08012dd8 	.word	0x08012dd8

0800ecec <__multiply>:
 800ecec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecf0:	4691      	mov	r9, r2
 800ecf2:	690a      	ldr	r2, [r1, #16]
 800ecf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ecf8:	460c      	mov	r4, r1
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	bfbe      	ittt	lt
 800ecfe:	460b      	movlt	r3, r1
 800ed00:	464c      	movlt	r4, r9
 800ed02:	4699      	movlt	r9, r3
 800ed04:	6927      	ldr	r7, [r4, #16]
 800ed06:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ed0a:	68a3      	ldr	r3, [r4, #8]
 800ed0c:	6861      	ldr	r1, [r4, #4]
 800ed0e:	eb07 060a 	add.w	r6, r7, sl
 800ed12:	42b3      	cmp	r3, r6
 800ed14:	b085      	sub	sp, #20
 800ed16:	bfb8      	it	lt
 800ed18:	3101      	addlt	r1, #1
 800ed1a:	f7ff fedb 	bl	800ead4 <_Balloc>
 800ed1e:	b930      	cbnz	r0, 800ed2e <__multiply+0x42>
 800ed20:	4602      	mov	r2, r0
 800ed22:	f240 115d 	movw	r1, #349	; 0x15d
 800ed26:	4b43      	ldr	r3, [pc, #268]	; (800ee34 <__multiply+0x148>)
 800ed28:	4843      	ldr	r0, [pc, #268]	; (800ee38 <__multiply+0x14c>)
 800ed2a:	f000 fcb1 	bl	800f690 <__assert_func>
 800ed2e:	f100 0514 	add.w	r5, r0, #20
 800ed32:	462b      	mov	r3, r5
 800ed34:	2200      	movs	r2, #0
 800ed36:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ed3a:	4543      	cmp	r3, r8
 800ed3c:	d321      	bcc.n	800ed82 <__multiply+0x96>
 800ed3e:	f104 0314 	add.w	r3, r4, #20
 800ed42:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ed46:	f109 0314 	add.w	r3, r9, #20
 800ed4a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ed4e:	9202      	str	r2, [sp, #8]
 800ed50:	1b3a      	subs	r2, r7, r4
 800ed52:	3a15      	subs	r2, #21
 800ed54:	f022 0203 	bic.w	r2, r2, #3
 800ed58:	3204      	adds	r2, #4
 800ed5a:	f104 0115 	add.w	r1, r4, #21
 800ed5e:	428f      	cmp	r7, r1
 800ed60:	bf38      	it	cc
 800ed62:	2204      	movcc	r2, #4
 800ed64:	9201      	str	r2, [sp, #4]
 800ed66:	9a02      	ldr	r2, [sp, #8]
 800ed68:	9303      	str	r3, [sp, #12]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d80c      	bhi.n	800ed88 <__multiply+0x9c>
 800ed6e:	2e00      	cmp	r6, #0
 800ed70:	dd03      	ble.n	800ed7a <__multiply+0x8e>
 800ed72:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d059      	beq.n	800ee2e <__multiply+0x142>
 800ed7a:	6106      	str	r6, [r0, #16]
 800ed7c:	b005      	add	sp, #20
 800ed7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed82:	f843 2b04 	str.w	r2, [r3], #4
 800ed86:	e7d8      	b.n	800ed3a <__multiply+0x4e>
 800ed88:	f8b3 a000 	ldrh.w	sl, [r3]
 800ed8c:	f1ba 0f00 	cmp.w	sl, #0
 800ed90:	d023      	beq.n	800edda <__multiply+0xee>
 800ed92:	46a9      	mov	r9, r5
 800ed94:	f04f 0c00 	mov.w	ip, #0
 800ed98:	f104 0e14 	add.w	lr, r4, #20
 800ed9c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eda0:	f8d9 1000 	ldr.w	r1, [r9]
 800eda4:	fa1f fb82 	uxth.w	fp, r2
 800eda8:	b289      	uxth	r1, r1
 800edaa:	fb0a 110b 	mla	r1, sl, fp, r1
 800edae:	4461      	add	r1, ip
 800edb0:	f8d9 c000 	ldr.w	ip, [r9]
 800edb4:	0c12      	lsrs	r2, r2, #16
 800edb6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800edba:	fb0a c202 	mla	r2, sl, r2, ip
 800edbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800edc2:	b289      	uxth	r1, r1
 800edc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800edc8:	4577      	cmp	r7, lr
 800edca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800edce:	f849 1b04 	str.w	r1, [r9], #4
 800edd2:	d8e3      	bhi.n	800ed9c <__multiply+0xb0>
 800edd4:	9a01      	ldr	r2, [sp, #4]
 800edd6:	f845 c002 	str.w	ip, [r5, r2]
 800edda:	9a03      	ldr	r2, [sp, #12]
 800eddc:	3304      	adds	r3, #4
 800edde:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ede2:	f1b9 0f00 	cmp.w	r9, #0
 800ede6:	d020      	beq.n	800ee2a <__multiply+0x13e>
 800ede8:	46ae      	mov	lr, r5
 800edea:	f04f 0a00 	mov.w	sl, #0
 800edee:	6829      	ldr	r1, [r5, #0]
 800edf0:	f104 0c14 	add.w	ip, r4, #20
 800edf4:	f8bc b000 	ldrh.w	fp, [ip]
 800edf8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800edfc:	b289      	uxth	r1, r1
 800edfe:	fb09 220b 	mla	r2, r9, fp, r2
 800ee02:	4492      	add	sl, r2
 800ee04:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ee08:	f84e 1b04 	str.w	r1, [lr], #4
 800ee0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ee10:	f8be 1000 	ldrh.w	r1, [lr]
 800ee14:	0c12      	lsrs	r2, r2, #16
 800ee16:	fb09 1102 	mla	r1, r9, r2, r1
 800ee1a:	4567      	cmp	r7, ip
 800ee1c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ee20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ee24:	d8e6      	bhi.n	800edf4 <__multiply+0x108>
 800ee26:	9a01      	ldr	r2, [sp, #4]
 800ee28:	50a9      	str	r1, [r5, r2]
 800ee2a:	3504      	adds	r5, #4
 800ee2c:	e79b      	b.n	800ed66 <__multiply+0x7a>
 800ee2e:	3e01      	subs	r6, #1
 800ee30:	e79d      	b.n	800ed6e <__multiply+0x82>
 800ee32:	bf00      	nop
 800ee34:	08012dc7 	.word	0x08012dc7
 800ee38:	08012dd8 	.word	0x08012dd8

0800ee3c <__pow5mult>:
 800ee3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee40:	4615      	mov	r5, r2
 800ee42:	f012 0203 	ands.w	r2, r2, #3
 800ee46:	4606      	mov	r6, r0
 800ee48:	460f      	mov	r7, r1
 800ee4a:	d007      	beq.n	800ee5c <__pow5mult+0x20>
 800ee4c:	4c25      	ldr	r4, [pc, #148]	; (800eee4 <__pow5mult+0xa8>)
 800ee4e:	3a01      	subs	r2, #1
 800ee50:	2300      	movs	r3, #0
 800ee52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee56:	f7ff fe9f 	bl	800eb98 <__multadd>
 800ee5a:	4607      	mov	r7, r0
 800ee5c:	10ad      	asrs	r5, r5, #2
 800ee5e:	d03d      	beq.n	800eedc <__pow5mult+0xa0>
 800ee60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ee62:	b97c      	cbnz	r4, 800ee84 <__pow5mult+0x48>
 800ee64:	2010      	movs	r0, #16
 800ee66:	f7ff fe11 	bl	800ea8c <malloc>
 800ee6a:	4602      	mov	r2, r0
 800ee6c:	6270      	str	r0, [r6, #36]	; 0x24
 800ee6e:	b928      	cbnz	r0, 800ee7c <__pow5mult+0x40>
 800ee70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ee74:	4b1c      	ldr	r3, [pc, #112]	; (800eee8 <__pow5mult+0xac>)
 800ee76:	481d      	ldr	r0, [pc, #116]	; (800eeec <__pow5mult+0xb0>)
 800ee78:	f000 fc0a 	bl	800f690 <__assert_func>
 800ee7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee80:	6004      	str	r4, [r0, #0]
 800ee82:	60c4      	str	r4, [r0, #12]
 800ee84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ee88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee8c:	b94c      	cbnz	r4, 800eea2 <__pow5mult+0x66>
 800ee8e:	f240 2171 	movw	r1, #625	; 0x271
 800ee92:	4630      	mov	r0, r6
 800ee94:	f7ff ff14 	bl	800ecc0 <__i2b>
 800ee98:	2300      	movs	r3, #0
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	f8c8 0008 	str.w	r0, [r8, #8]
 800eea0:	6003      	str	r3, [r0, #0]
 800eea2:	f04f 0900 	mov.w	r9, #0
 800eea6:	07eb      	lsls	r3, r5, #31
 800eea8:	d50a      	bpl.n	800eec0 <__pow5mult+0x84>
 800eeaa:	4639      	mov	r1, r7
 800eeac:	4622      	mov	r2, r4
 800eeae:	4630      	mov	r0, r6
 800eeb0:	f7ff ff1c 	bl	800ecec <__multiply>
 800eeb4:	4680      	mov	r8, r0
 800eeb6:	4639      	mov	r1, r7
 800eeb8:	4630      	mov	r0, r6
 800eeba:	f7ff fe4b 	bl	800eb54 <_Bfree>
 800eebe:	4647      	mov	r7, r8
 800eec0:	106d      	asrs	r5, r5, #1
 800eec2:	d00b      	beq.n	800eedc <__pow5mult+0xa0>
 800eec4:	6820      	ldr	r0, [r4, #0]
 800eec6:	b938      	cbnz	r0, 800eed8 <__pow5mult+0x9c>
 800eec8:	4622      	mov	r2, r4
 800eeca:	4621      	mov	r1, r4
 800eecc:	4630      	mov	r0, r6
 800eece:	f7ff ff0d 	bl	800ecec <__multiply>
 800eed2:	6020      	str	r0, [r4, #0]
 800eed4:	f8c0 9000 	str.w	r9, [r0]
 800eed8:	4604      	mov	r4, r0
 800eeda:	e7e4      	b.n	800eea6 <__pow5mult+0x6a>
 800eedc:	4638      	mov	r0, r7
 800eede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eee2:	bf00      	nop
 800eee4:	08012f28 	.word	0x08012f28
 800eee8:	08012d55 	.word	0x08012d55
 800eeec:	08012dd8 	.word	0x08012dd8

0800eef0 <__lshift>:
 800eef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eef4:	460c      	mov	r4, r1
 800eef6:	4607      	mov	r7, r0
 800eef8:	4691      	mov	r9, r2
 800eefa:	6923      	ldr	r3, [r4, #16]
 800eefc:	6849      	ldr	r1, [r1, #4]
 800eefe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ef02:	68a3      	ldr	r3, [r4, #8]
 800ef04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ef08:	f108 0601 	add.w	r6, r8, #1
 800ef0c:	42b3      	cmp	r3, r6
 800ef0e:	db0b      	blt.n	800ef28 <__lshift+0x38>
 800ef10:	4638      	mov	r0, r7
 800ef12:	f7ff fddf 	bl	800ead4 <_Balloc>
 800ef16:	4605      	mov	r5, r0
 800ef18:	b948      	cbnz	r0, 800ef2e <__lshift+0x3e>
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ef20:	4b29      	ldr	r3, [pc, #164]	; (800efc8 <__lshift+0xd8>)
 800ef22:	482a      	ldr	r0, [pc, #168]	; (800efcc <__lshift+0xdc>)
 800ef24:	f000 fbb4 	bl	800f690 <__assert_func>
 800ef28:	3101      	adds	r1, #1
 800ef2a:	005b      	lsls	r3, r3, #1
 800ef2c:	e7ee      	b.n	800ef0c <__lshift+0x1c>
 800ef2e:	2300      	movs	r3, #0
 800ef30:	f100 0114 	add.w	r1, r0, #20
 800ef34:	f100 0210 	add.w	r2, r0, #16
 800ef38:	4618      	mov	r0, r3
 800ef3a:	4553      	cmp	r3, sl
 800ef3c:	db37      	blt.n	800efae <__lshift+0xbe>
 800ef3e:	6920      	ldr	r0, [r4, #16]
 800ef40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ef44:	f104 0314 	add.w	r3, r4, #20
 800ef48:	f019 091f 	ands.w	r9, r9, #31
 800ef4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ef50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ef54:	d02f      	beq.n	800efb6 <__lshift+0xc6>
 800ef56:	468a      	mov	sl, r1
 800ef58:	f04f 0c00 	mov.w	ip, #0
 800ef5c:	f1c9 0e20 	rsb	lr, r9, #32
 800ef60:	681a      	ldr	r2, [r3, #0]
 800ef62:	fa02 f209 	lsl.w	r2, r2, r9
 800ef66:	ea42 020c 	orr.w	r2, r2, ip
 800ef6a:	f84a 2b04 	str.w	r2, [sl], #4
 800ef6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef72:	4298      	cmp	r0, r3
 800ef74:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ef78:	d8f2      	bhi.n	800ef60 <__lshift+0x70>
 800ef7a:	1b03      	subs	r3, r0, r4
 800ef7c:	3b15      	subs	r3, #21
 800ef7e:	f023 0303 	bic.w	r3, r3, #3
 800ef82:	3304      	adds	r3, #4
 800ef84:	f104 0215 	add.w	r2, r4, #21
 800ef88:	4290      	cmp	r0, r2
 800ef8a:	bf38      	it	cc
 800ef8c:	2304      	movcc	r3, #4
 800ef8e:	f841 c003 	str.w	ip, [r1, r3]
 800ef92:	f1bc 0f00 	cmp.w	ip, #0
 800ef96:	d001      	beq.n	800ef9c <__lshift+0xac>
 800ef98:	f108 0602 	add.w	r6, r8, #2
 800ef9c:	3e01      	subs	r6, #1
 800ef9e:	4638      	mov	r0, r7
 800efa0:	4621      	mov	r1, r4
 800efa2:	612e      	str	r6, [r5, #16]
 800efa4:	f7ff fdd6 	bl	800eb54 <_Bfree>
 800efa8:	4628      	mov	r0, r5
 800efaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efae:	f842 0f04 	str.w	r0, [r2, #4]!
 800efb2:	3301      	adds	r3, #1
 800efb4:	e7c1      	b.n	800ef3a <__lshift+0x4a>
 800efb6:	3904      	subs	r1, #4
 800efb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800efbc:	4298      	cmp	r0, r3
 800efbe:	f841 2f04 	str.w	r2, [r1, #4]!
 800efc2:	d8f9      	bhi.n	800efb8 <__lshift+0xc8>
 800efc4:	e7ea      	b.n	800ef9c <__lshift+0xac>
 800efc6:	bf00      	nop
 800efc8:	08012dc7 	.word	0x08012dc7
 800efcc:	08012dd8 	.word	0x08012dd8

0800efd0 <__mcmp>:
 800efd0:	4603      	mov	r3, r0
 800efd2:	690a      	ldr	r2, [r1, #16]
 800efd4:	6900      	ldr	r0, [r0, #16]
 800efd6:	b530      	push	{r4, r5, lr}
 800efd8:	1a80      	subs	r0, r0, r2
 800efda:	d10d      	bne.n	800eff8 <__mcmp+0x28>
 800efdc:	3314      	adds	r3, #20
 800efde:	3114      	adds	r1, #20
 800efe0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800efe4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800efe8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800efec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800eff0:	4295      	cmp	r5, r2
 800eff2:	d002      	beq.n	800effa <__mcmp+0x2a>
 800eff4:	d304      	bcc.n	800f000 <__mcmp+0x30>
 800eff6:	2001      	movs	r0, #1
 800eff8:	bd30      	pop	{r4, r5, pc}
 800effa:	42a3      	cmp	r3, r4
 800effc:	d3f4      	bcc.n	800efe8 <__mcmp+0x18>
 800effe:	e7fb      	b.n	800eff8 <__mcmp+0x28>
 800f000:	f04f 30ff 	mov.w	r0, #4294967295
 800f004:	e7f8      	b.n	800eff8 <__mcmp+0x28>
	...

0800f008 <__mdiff>:
 800f008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f00c:	460d      	mov	r5, r1
 800f00e:	4607      	mov	r7, r0
 800f010:	4611      	mov	r1, r2
 800f012:	4628      	mov	r0, r5
 800f014:	4614      	mov	r4, r2
 800f016:	f7ff ffdb 	bl	800efd0 <__mcmp>
 800f01a:	1e06      	subs	r6, r0, #0
 800f01c:	d111      	bne.n	800f042 <__mdiff+0x3a>
 800f01e:	4631      	mov	r1, r6
 800f020:	4638      	mov	r0, r7
 800f022:	f7ff fd57 	bl	800ead4 <_Balloc>
 800f026:	4602      	mov	r2, r0
 800f028:	b928      	cbnz	r0, 800f036 <__mdiff+0x2e>
 800f02a:	f240 2132 	movw	r1, #562	; 0x232
 800f02e:	4b3a      	ldr	r3, [pc, #232]	; (800f118 <__mdiff+0x110>)
 800f030:	483a      	ldr	r0, [pc, #232]	; (800f11c <__mdiff+0x114>)
 800f032:	f000 fb2d 	bl	800f690 <__assert_func>
 800f036:	2301      	movs	r3, #1
 800f038:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f03c:	4610      	mov	r0, r2
 800f03e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f042:	bfa4      	itt	ge
 800f044:	4623      	movge	r3, r4
 800f046:	462c      	movge	r4, r5
 800f048:	4638      	mov	r0, r7
 800f04a:	6861      	ldr	r1, [r4, #4]
 800f04c:	bfa6      	itte	ge
 800f04e:	461d      	movge	r5, r3
 800f050:	2600      	movge	r6, #0
 800f052:	2601      	movlt	r6, #1
 800f054:	f7ff fd3e 	bl	800ead4 <_Balloc>
 800f058:	4602      	mov	r2, r0
 800f05a:	b918      	cbnz	r0, 800f064 <__mdiff+0x5c>
 800f05c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f060:	4b2d      	ldr	r3, [pc, #180]	; (800f118 <__mdiff+0x110>)
 800f062:	e7e5      	b.n	800f030 <__mdiff+0x28>
 800f064:	f102 0814 	add.w	r8, r2, #20
 800f068:	46c2      	mov	sl, r8
 800f06a:	f04f 0c00 	mov.w	ip, #0
 800f06e:	6927      	ldr	r7, [r4, #16]
 800f070:	60c6      	str	r6, [r0, #12]
 800f072:	692e      	ldr	r6, [r5, #16]
 800f074:	f104 0014 	add.w	r0, r4, #20
 800f078:	f105 0914 	add.w	r9, r5, #20
 800f07c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800f080:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f084:	3410      	adds	r4, #16
 800f086:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800f08a:	f859 3b04 	ldr.w	r3, [r9], #4
 800f08e:	fa1f f18b 	uxth.w	r1, fp
 800f092:	448c      	add	ip, r1
 800f094:	b299      	uxth	r1, r3
 800f096:	0c1b      	lsrs	r3, r3, #16
 800f098:	ebac 0101 	sub.w	r1, ip, r1
 800f09c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f0a0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f0a4:	b289      	uxth	r1, r1
 800f0a6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800f0aa:	454e      	cmp	r6, r9
 800f0ac:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f0b0:	f84a 3b04 	str.w	r3, [sl], #4
 800f0b4:	d8e7      	bhi.n	800f086 <__mdiff+0x7e>
 800f0b6:	1b73      	subs	r3, r6, r5
 800f0b8:	3b15      	subs	r3, #21
 800f0ba:	f023 0303 	bic.w	r3, r3, #3
 800f0be:	3515      	adds	r5, #21
 800f0c0:	3304      	adds	r3, #4
 800f0c2:	42ae      	cmp	r6, r5
 800f0c4:	bf38      	it	cc
 800f0c6:	2304      	movcc	r3, #4
 800f0c8:	4418      	add	r0, r3
 800f0ca:	4443      	add	r3, r8
 800f0cc:	461e      	mov	r6, r3
 800f0ce:	4605      	mov	r5, r0
 800f0d0:	4575      	cmp	r5, lr
 800f0d2:	d30e      	bcc.n	800f0f2 <__mdiff+0xea>
 800f0d4:	f10e 0103 	add.w	r1, lr, #3
 800f0d8:	1a09      	subs	r1, r1, r0
 800f0da:	f021 0103 	bic.w	r1, r1, #3
 800f0de:	3803      	subs	r0, #3
 800f0e0:	4586      	cmp	lr, r0
 800f0e2:	bf38      	it	cc
 800f0e4:	2100      	movcc	r1, #0
 800f0e6:	4419      	add	r1, r3
 800f0e8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800f0ec:	b18b      	cbz	r3, 800f112 <__mdiff+0x10a>
 800f0ee:	6117      	str	r7, [r2, #16]
 800f0f0:	e7a4      	b.n	800f03c <__mdiff+0x34>
 800f0f2:	f855 8b04 	ldr.w	r8, [r5], #4
 800f0f6:	fa1f f188 	uxth.w	r1, r8
 800f0fa:	4461      	add	r1, ip
 800f0fc:	140c      	asrs	r4, r1, #16
 800f0fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f102:	b289      	uxth	r1, r1
 800f104:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f108:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800f10c:	f846 1b04 	str.w	r1, [r6], #4
 800f110:	e7de      	b.n	800f0d0 <__mdiff+0xc8>
 800f112:	3f01      	subs	r7, #1
 800f114:	e7e8      	b.n	800f0e8 <__mdiff+0xe0>
 800f116:	bf00      	nop
 800f118:	08012dc7 	.word	0x08012dc7
 800f11c:	08012dd8 	.word	0x08012dd8

0800f120 <__d2b>:
 800f120:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f124:	2101      	movs	r1, #1
 800f126:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800f12a:	4690      	mov	r8, r2
 800f12c:	461d      	mov	r5, r3
 800f12e:	f7ff fcd1 	bl	800ead4 <_Balloc>
 800f132:	4604      	mov	r4, r0
 800f134:	b930      	cbnz	r0, 800f144 <__d2b+0x24>
 800f136:	4602      	mov	r2, r0
 800f138:	f240 310a 	movw	r1, #778	; 0x30a
 800f13c:	4b24      	ldr	r3, [pc, #144]	; (800f1d0 <__d2b+0xb0>)
 800f13e:	4825      	ldr	r0, [pc, #148]	; (800f1d4 <__d2b+0xb4>)
 800f140:	f000 faa6 	bl	800f690 <__assert_func>
 800f144:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800f148:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800f14c:	bb2d      	cbnz	r5, 800f19a <__d2b+0x7a>
 800f14e:	9301      	str	r3, [sp, #4]
 800f150:	f1b8 0300 	subs.w	r3, r8, #0
 800f154:	d026      	beq.n	800f1a4 <__d2b+0x84>
 800f156:	4668      	mov	r0, sp
 800f158:	9300      	str	r3, [sp, #0]
 800f15a:	f7ff fd83 	bl	800ec64 <__lo0bits>
 800f15e:	9900      	ldr	r1, [sp, #0]
 800f160:	b1f0      	cbz	r0, 800f1a0 <__d2b+0x80>
 800f162:	9a01      	ldr	r2, [sp, #4]
 800f164:	f1c0 0320 	rsb	r3, r0, #32
 800f168:	fa02 f303 	lsl.w	r3, r2, r3
 800f16c:	430b      	orrs	r3, r1
 800f16e:	40c2      	lsrs	r2, r0
 800f170:	6163      	str	r3, [r4, #20]
 800f172:	9201      	str	r2, [sp, #4]
 800f174:	9b01      	ldr	r3, [sp, #4]
 800f176:	2b00      	cmp	r3, #0
 800f178:	bf14      	ite	ne
 800f17a:	2102      	movne	r1, #2
 800f17c:	2101      	moveq	r1, #1
 800f17e:	61a3      	str	r3, [r4, #24]
 800f180:	6121      	str	r1, [r4, #16]
 800f182:	b1c5      	cbz	r5, 800f1b6 <__d2b+0x96>
 800f184:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f188:	4405      	add	r5, r0
 800f18a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f18e:	603d      	str	r5, [r7, #0]
 800f190:	6030      	str	r0, [r6, #0]
 800f192:	4620      	mov	r0, r4
 800f194:	b002      	add	sp, #8
 800f196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f19a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f19e:	e7d6      	b.n	800f14e <__d2b+0x2e>
 800f1a0:	6161      	str	r1, [r4, #20]
 800f1a2:	e7e7      	b.n	800f174 <__d2b+0x54>
 800f1a4:	a801      	add	r0, sp, #4
 800f1a6:	f7ff fd5d 	bl	800ec64 <__lo0bits>
 800f1aa:	2101      	movs	r1, #1
 800f1ac:	9b01      	ldr	r3, [sp, #4]
 800f1ae:	6121      	str	r1, [r4, #16]
 800f1b0:	6163      	str	r3, [r4, #20]
 800f1b2:	3020      	adds	r0, #32
 800f1b4:	e7e5      	b.n	800f182 <__d2b+0x62>
 800f1b6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800f1ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f1be:	6038      	str	r0, [r7, #0]
 800f1c0:	6918      	ldr	r0, [r3, #16]
 800f1c2:	f7ff fd2f 	bl	800ec24 <__hi0bits>
 800f1c6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800f1ca:	6031      	str	r1, [r6, #0]
 800f1cc:	e7e1      	b.n	800f192 <__d2b+0x72>
 800f1ce:	bf00      	nop
 800f1d0:	08012dc7 	.word	0x08012dc7
 800f1d4:	08012dd8 	.word	0x08012dd8

0800f1d8 <_calloc_r>:
 800f1d8:	b570      	push	{r4, r5, r6, lr}
 800f1da:	fba1 5402 	umull	r5, r4, r1, r2
 800f1de:	b934      	cbnz	r4, 800f1ee <_calloc_r+0x16>
 800f1e0:	4629      	mov	r1, r5
 800f1e2:	f000 f875 	bl	800f2d0 <_malloc_r>
 800f1e6:	4606      	mov	r6, r0
 800f1e8:	b928      	cbnz	r0, 800f1f6 <_calloc_r+0x1e>
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	bd70      	pop	{r4, r5, r6, pc}
 800f1ee:	220c      	movs	r2, #12
 800f1f0:	2600      	movs	r6, #0
 800f1f2:	6002      	str	r2, [r0, #0]
 800f1f4:	e7f9      	b.n	800f1ea <_calloc_r+0x12>
 800f1f6:	462a      	mov	r2, r5
 800f1f8:	4621      	mov	r1, r4
 800f1fa:	f7fe f93f 	bl	800d47c <memset>
 800f1fe:	e7f4      	b.n	800f1ea <_calloc_r+0x12>

0800f200 <_free_r>:
 800f200:	b538      	push	{r3, r4, r5, lr}
 800f202:	4605      	mov	r5, r0
 800f204:	2900      	cmp	r1, #0
 800f206:	d040      	beq.n	800f28a <_free_r+0x8a>
 800f208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f20c:	1f0c      	subs	r4, r1, #4
 800f20e:	2b00      	cmp	r3, #0
 800f210:	bfb8      	it	lt
 800f212:	18e4      	addlt	r4, r4, r3
 800f214:	f000 fa98 	bl	800f748 <__malloc_lock>
 800f218:	4a1c      	ldr	r2, [pc, #112]	; (800f28c <_free_r+0x8c>)
 800f21a:	6813      	ldr	r3, [r2, #0]
 800f21c:	b933      	cbnz	r3, 800f22c <_free_r+0x2c>
 800f21e:	6063      	str	r3, [r4, #4]
 800f220:	6014      	str	r4, [r2, #0]
 800f222:	4628      	mov	r0, r5
 800f224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f228:	f000 ba94 	b.w	800f754 <__malloc_unlock>
 800f22c:	42a3      	cmp	r3, r4
 800f22e:	d908      	bls.n	800f242 <_free_r+0x42>
 800f230:	6820      	ldr	r0, [r4, #0]
 800f232:	1821      	adds	r1, r4, r0
 800f234:	428b      	cmp	r3, r1
 800f236:	bf01      	itttt	eq
 800f238:	6819      	ldreq	r1, [r3, #0]
 800f23a:	685b      	ldreq	r3, [r3, #4]
 800f23c:	1809      	addeq	r1, r1, r0
 800f23e:	6021      	streq	r1, [r4, #0]
 800f240:	e7ed      	b.n	800f21e <_free_r+0x1e>
 800f242:	461a      	mov	r2, r3
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	b10b      	cbz	r3, 800f24c <_free_r+0x4c>
 800f248:	42a3      	cmp	r3, r4
 800f24a:	d9fa      	bls.n	800f242 <_free_r+0x42>
 800f24c:	6811      	ldr	r1, [r2, #0]
 800f24e:	1850      	adds	r0, r2, r1
 800f250:	42a0      	cmp	r0, r4
 800f252:	d10b      	bne.n	800f26c <_free_r+0x6c>
 800f254:	6820      	ldr	r0, [r4, #0]
 800f256:	4401      	add	r1, r0
 800f258:	1850      	adds	r0, r2, r1
 800f25a:	4283      	cmp	r3, r0
 800f25c:	6011      	str	r1, [r2, #0]
 800f25e:	d1e0      	bne.n	800f222 <_free_r+0x22>
 800f260:	6818      	ldr	r0, [r3, #0]
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	4401      	add	r1, r0
 800f266:	6011      	str	r1, [r2, #0]
 800f268:	6053      	str	r3, [r2, #4]
 800f26a:	e7da      	b.n	800f222 <_free_r+0x22>
 800f26c:	d902      	bls.n	800f274 <_free_r+0x74>
 800f26e:	230c      	movs	r3, #12
 800f270:	602b      	str	r3, [r5, #0]
 800f272:	e7d6      	b.n	800f222 <_free_r+0x22>
 800f274:	6820      	ldr	r0, [r4, #0]
 800f276:	1821      	adds	r1, r4, r0
 800f278:	428b      	cmp	r3, r1
 800f27a:	bf01      	itttt	eq
 800f27c:	6819      	ldreq	r1, [r3, #0]
 800f27e:	685b      	ldreq	r3, [r3, #4]
 800f280:	1809      	addeq	r1, r1, r0
 800f282:	6021      	streq	r1, [r4, #0]
 800f284:	6063      	str	r3, [r4, #4]
 800f286:	6054      	str	r4, [r2, #4]
 800f288:	e7cb      	b.n	800f222 <_free_r+0x22>
 800f28a:	bd38      	pop	{r3, r4, r5, pc}
 800f28c:	20000808 	.word	0x20000808

0800f290 <sbrk_aligned>:
 800f290:	b570      	push	{r4, r5, r6, lr}
 800f292:	4e0e      	ldr	r6, [pc, #56]	; (800f2cc <sbrk_aligned+0x3c>)
 800f294:	460c      	mov	r4, r1
 800f296:	6831      	ldr	r1, [r6, #0]
 800f298:	4605      	mov	r5, r0
 800f29a:	b911      	cbnz	r1, 800f2a2 <sbrk_aligned+0x12>
 800f29c:	f000 f9e8 	bl	800f670 <_sbrk_r>
 800f2a0:	6030      	str	r0, [r6, #0]
 800f2a2:	4621      	mov	r1, r4
 800f2a4:	4628      	mov	r0, r5
 800f2a6:	f000 f9e3 	bl	800f670 <_sbrk_r>
 800f2aa:	1c43      	adds	r3, r0, #1
 800f2ac:	d00a      	beq.n	800f2c4 <sbrk_aligned+0x34>
 800f2ae:	1cc4      	adds	r4, r0, #3
 800f2b0:	f024 0403 	bic.w	r4, r4, #3
 800f2b4:	42a0      	cmp	r0, r4
 800f2b6:	d007      	beq.n	800f2c8 <sbrk_aligned+0x38>
 800f2b8:	1a21      	subs	r1, r4, r0
 800f2ba:	4628      	mov	r0, r5
 800f2bc:	f000 f9d8 	bl	800f670 <_sbrk_r>
 800f2c0:	3001      	adds	r0, #1
 800f2c2:	d101      	bne.n	800f2c8 <sbrk_aligned+0x38>
 800f2c4:	f04f 34ff 	mov.w	r4, #4294967295
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	bd70      	pop	{r4, r5, r6, pc}
 800f2cc:	2000080c 	.word	0x2000080c

0800f2d0 <_malloc_r>:
 800f2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2d4:	1ccd      	adds	r5, r1, #3
 800f2d6:	f025 0503 	bic.w	r5, r5, #3
 800f2da:	3508      	adds	r5, #8
 800f2dc:	2d0c      	cmp	r5, #12
 800f2de:	bf38      	it	cc
 800f2e0:	250c      	movcc	r5, #12
 800f2e2:	2d00      	cmp	r5, #0
 800f2e4:	4607      	mov	r7, r0
 800f2e6:	db01      	blt.n	800f2ec <_malloc_r+0x1c>
 800f2e8:	42a9      	cmp	r1, r5
 800f2ea:	d905      	bls.n	800f2f8 <_malloc_r+0x28>
 800f2ec:	230c      	movs	r3, #12
 800f2ee:	2600      	movs	r6, #0
 800f2f0:	603b      	str	r3, [r7, #0]
 800f2f2:	4630      	mov	r0, r6
 800f2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2f8:	4e2e      	ldr	r6, [pc, #184]	; (800f3b4 <_malloc_r+0xe4>)
 800f2fa:	f000 fa25 	bl	800f748 <__malloc_lock>
 800f2fe:	6833      	ldr	r3, [r6, #0]
 800f300:	461c      	mov	r4, r3
 800f302:	bb34      	cbnz	r4, 800f352 <_malloc_r+0x82>
 800f304:	4629      	mov	r1, r5
 800f306:	4638      	mov	r0, r7
 800f308:	f7ff ffc2 	bl	800f290 <sbrk_aligned>
 800f30c:	1c43      	adds	r3, r0, #1
 800f30e:	4604      	mov	r4, r0
 800f310:	d14d      	bne.n	800f3ae <_malloc_r+0xde>
 800f312:	6834      	ldr	r4, [r6, #0]
 800f314:	4626      	mov	r6, r4
 800f316:	2e00      	cmp	r6, #0
 800f318:	d140      	bne.n	800f39c <_malloc_r+0xcc>
 800f31a:	6823      	ldr	r3, [r4, #0]
 800f31c:	4631      	mov	r1, r6
 800f31e:	4638      	mov	r0, r7
 800f320:	eb04 0803 	add.w	r8, r4, r3
 800f324:	f000 f9a4 	bl	800f670 <_sbrk_r>
 800f328:	4580      	cmp	r8, r0
 800f32a:	d13a      	bne.n	800f3a2 <_malloc_r+0xd2>
 800f32c:	6821      	ldr	r1, [r4, #0]
 800f32e:	3503      	adds	r5, #3
 800f330:	1a6d      	subs	r5, r5, r1
 800f332:	f025 0503 	bic.w	r5, r5, #3
 800f336:	3508      	adds	r5, #8
 800f338:	2d0c      	cmp	r5, #12
 800f33a:	bf38      	it	cc
 800f33c:	250c      	movcc	r5, #12
 800f33e:	4638      	mov	r0, r7
 800f340:	4629      	mov	r1, r5
 800f342:	f7ff ffa5 	bl	800f290 <sbrk_aligned>
 800f346:	3001      	adds	r0, #1
 800f348:	d02b      	beq.n	800f3a2 <_malloc_r+0xd2>
 800f34a:	6823      	ldr	r3, [r4, #0]
 800f34c:	442b      	add	r3, r5
 800f34e:	6023      	str	r3, [r4, #0]
 800f350:	e00e      	b.n	800f370 <_malloc_r+0xa0>
 800f352:	6822      	ldr	r2, [r4, #0]
 800f354:	1b52      	subs	r2, r2, r5
 800f356:	d41e      	bmi.n	800f396 <_malloc_r+0xc6>
 800f358:	2a0b      	cmp	r2, #11
 800f35a:	d916      	bls.n	800f38a <_malloc_r+0xba>
 800f35c:	1961      	adds	r1, r4, r5
 800f35e:	42a3      	cmp	r3, r4
 800f360:	6025      	str	r5, [r4, #0]
 800f362:	bf18      	it	ne
 800f364:	6059      	strne	r1, [r3, #4]
 800f366:	6863      	ldr	r3, [r4, #4]
 800f368:	bf08      	it	eq
 800f36a:	6031      	streq	r1, [r6, #0]
 800f36c:	5162      	str	r2, [r4, r5]
 800f36e:	604b      	str	r3, [r1, #4]
 800f370:	4638      	mov	r0, r7
 800f372:	f104 060b 	add.w	r6, r4, #11
 800f376:	f000 f9ed 	bl	800f754 <__malloc_unlock>
 800f37a:	f026 0607 	bic.w	r6, r6, #7
 800f37e:	1d23      	adds	r3, r4, #4
 800f380:	1af2      	subs	r2, r6, r3
 800f382:	d0b6      	beq.n	800f2f2 <_malloc_r+0x22>
 800f384:	1b9b      	subs	r3, r3, r6
 800f386:	50a3      	str	r3, [r4, r2]
 800f388:	e7b3      	b.n	800f2f2 <_malloc_r+0x22>
 800f38a:	6862      	ldr	r2, [r4, #4]
 800f38c:	42a3      	cmp	r3, r4
 800f38e:	bf0c      	ite	eq
 800f390:	6032      	streq	r2, [r6, #0]
 800f392:	605a      	strne	r2, [r3, #4]
 800f394:	e7ec      	b.n	800f370 <_malloc_r+0xa0>
 800f396:	4623      	mov	r3, r4
 800f398:	6864      	ldr	r4, [r4, #4]
 800f39a:	e7b2      	b.n	800f302 <_malloc_r+0x32>
 800f39c:	4634      	mov	r4, r6
 800f39e:	6876      	ldr	r6, [r6, #4]
 800f3a0:	e7b9      	b.n	800f316 <_malloc_r+0x46>
 800f3a2:	230c      	movs	r3, #12
 800f3a4:	4638      	mov	r0, r7
 800f3a6:	603b      	str	r3, [r7, #0]
 800f3a8:	f000 f9d4 	bl	800f754 <__malloc_unlock>
 800f3ac:	e7a1      	b.n	800f2f2 <_malloc_r+0x22>
 800f3ae:	6025      	str	r5, [r4, #0]
 800f3b0:	e7de      	b.n	800f370 <_malloc_r+0xa0>
 800f3b2:	bf00      	nop
 800f3b4:	20000808 	.word	0x20000808

0800f3b8 <__ssputs_r>:
 800f3b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3bc:	688e      	ldr	r6, [r1, #8]
 800f3be:	4682      	mov	sl, r0
 800f3c0:	429e      	cmp	r6, r3
 800f3c2:	460c      	mov	r4, r1
 800f3c4:	4690      	mov	r8, r2
 800f3c6:	461f      	mov	r7, r3
 800f3c8:	d838      	bhi.n	800f43c <__ssputs_r+0x84>
 800f3ca:	898a      	ldrh	r2, [r1, #12]
 800f3cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f3d0:	d032      	beq.n	800f438 <__ssputs_r+0x80>
 800f3d2:	6825      	ldr	r5, [r4, #0]
 800f3d4:	6909      	ldr	r1, [r1, #16]
 800f3d6:	3301      	adds	r3, #1
 800f3d8:	eba5 0901 	sub.w	r9, r5, r1
 800f3dc:	6965      	ldr	r5, [r4, #20]
 800f3de:	444b      	add	r3, r9
 800f3e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f3e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f3e8:	106d      	asrs	r5, r5, #1
 800f3ea:	429d      	cmp	r5, r3
 800f3ec:	bf38      	it	cc
 800f3ee:	461d      	movcc	r5, r3
 800f3f0:	0553      	lsls	r3, r2, #21
 800f3f2:	d531      	bpl.n	800f458 <__ssputs_r+0xa0>
 800f3f4:	4629      	mov	r1, r5
 800f3f6:	f7ff ff6b 	bl	800f2d0 <_malloc_r>
 800f3fa:	4606      	mov	r6, r0
 800f3fc:	b950      	cbnz	r0, 800f414 <__ssputs_r+0x5c>
 800f3fe:	230c      	movs	r3, #12
 800f400:	f04f 30ff 	mov.w	r0, #4294967295
 800f404:	f8ca 3000 	str.w	r3, [sl]
 800f408:	89a3      	ldrh	r3, [r4, #12]
 800f40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f40e:	81a3      	strh	r3, [r4, #12]
 800f410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f414:	464a      	mov	r2, r9
 800f416:	6921      	ldr	r1, [r4, #16]
 800f418:	f7ff fb4e 	bl	800eab8 <memcpy>
 800f41c:	89a3      	ldrh	r3, [r4, #12]
 800f41e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f426:	81a3      	strh	r3, [r4, #12]
 800f428:	6126      	str	r6, [r4, #16]
 800f42a:	444e      	add	r6, r9
 800f42c:	6026      	str	r6, [r4, #0]
 800f42e:	463e      	mov	r6, r7
 800f430:	6165      	str	r5, [r4, #20]
 800f432:	eba5 0509 	sub.w	r5, r5, r9
 800f436:	60a5      	str	r5, [r4, #8]
 800f438:	42be      	cmp	r6, r7
 800f43a:	d900      	bls.n	800f43e <__ssputs_r+0x86>
 800f43c:	463e      	mov	r6, r7
 800f43e:	4632      	mov	r2, r6
 800f440:	4641      	mov	r1, r8
 800f442:	6820      	ldr	r0, [r4, #0]
 800f444:	f000 f966 	bl	800f714 <memmove>
 800f448:	68a3      	ldr	r3, [r4, #8]
 800f44a:	2000      	movs	r0, #0
 800f44c:	1b9b      	subs	r3, r3, r6
 800f44e:	60a3      	str	r3, [r4, #8]
 800f450:	6823      	ldr	r3, [r4, #0]
 800f452:	4433      	add	r3, r6
 800f454:	6023      	str	r3, [r4, #0]
 800f456:	e7db      	b.n	800f410 <__ssputs_r+0x58>
 800f458:	462a      	mov	r2, r5
 800f45a:	f000 f981 	bl	800f760 <_realloc_r>
 800f45e:	4606      	mov	r6, r0
 800f460:	2800      	cmp	r0, #0
 800f462:	d1e1      	bne.n	800f428 <__ssputs_r+0x70>
 800f464:	4650      	mov	r0, sl
 800f466:	6921      	ldr	r1, [r4, #16]
 800f468:	f7ff feca 	bl	800f200 <_free_r>
 800f46c:	e7c7      	b.n	800f3fe <__ssputs_r+0x46>
	...

0800f470 <_svfiprintf_r>:
 800f470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f474:	4698      	mov	r8, r3
 800f476:	898b      	ldrh	r3, [r1, #12]
 800f478:	4607      	mov	r7, r0
 800f47a:	061b      	lsls	r3, r3, #24
 800f47c:	460d      	mov	r5, r1
 800f47e:	4614      	mov	r4, r2
 800f480:	b09d      	sub	sp, #116	; 0x74
 800f482:	d50e      	bpl.n	800f4a2 <_svfiprintf_r+0x32>
 800f484:	690b      	ldr	r3, [r1, #16]
 800f486:	b963      	cbnz	r3, 800f4a2 <_svfiprintf_r+0x32>
 800f488:	2140      	movs	r1, #64	; 0x40
 800f48a:	f7ff ff21 	bl	800f2d0 <_malloc_r>
 800f48e:	6028      	str	r0, [r5, #0]
 800f490:	6128      	str	r0, [r5, #16]
 800f492:	b920      	cbnz	r0, 800f49e <_svfiprintf_r+0x2e>
 800f494:	230c      	movs	r3, #12
 800f496:	603b      	str	r3, [r7, #0]
 800f498:	f04f 30ff 	mov.w	r0, #4294967295
 800f49c:	e0d1      	b.n	800f642 <_svfiprintf_r+0x1d2>
 800f49e:	2340      	movs	r3, #64	; 0x40
 800f4a0:	616b      	str	r3, [r5, #20]
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	9309      	str	r3, [sp, #36]	; 0x24
 800f4a6:	2320      	movs	r3, #32
 800f4a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f4ac:	2330      	movs	r3, #48	; 0x30
 800f4ae:	f04f 0901 	mov.w	r9, #1
 800f4b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f65c <_svfiprintf_r+0x1ec>
 800f4ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f4be:	4623      	mov	r3, r4
 800f4c0:	469a      	mov	sl, r3
 800f4c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4c6:	b10a      	cbz	r2, 800f4cc <_svfiprintf_r+0x5c>
 800f4c8:	2a25      	cmp	r2, #37	; 0x25
 800f4ca:	d1f9      	bne.n	800f4c0 <_svfiprintf_r+0x50>
 800f4cc:	ebba 0b04 	subs.w	fp, sl, r4
 800f4d0:	d00b      	beq.n	800f4ea <_svfiprintf_r+0x7a>
 800f4d2:	465b      	mov	r3, fp
 800f4d4:	4622      	mov	r2, r4
 800f4d6:	4629      	mov	r1, r5
 800f4d8:	4638      	mov	r0, r7
 800f4da:	f7ff ff6d 	bl	800f3b8 <__ssputs_r>
 800f4de:	3001      	adds	r0, #1
 800f4e0:	f000 80aa 	beq.w	800f638 <_svfiprintf_r+0x1c8>
 800f4e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4e6:	445a      	add	r2, fp
 800f4e8:	9209      	str	r2, [sp, #36]	; 0x24
 800f4ea:	f89a 3000 	ldrb.w	r3, [sl]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	f000 80a2 	beq.w	800f638 <_svfiprintf_r+0x1c8>
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f4fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4fe:	f10a 0a01 	add.w	sl, sl, #1
 800f502:	9304      	str	r3, [sp, #16]
 800f504:	9307      	str	r3, [sp, #28]
 800f506:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f50a:	931a      	str	r3, [sp, #104]	; 0x68
 800f50c:	4654      	mov	r4, sl
 800f50e:	2205      	movs	r2, #5
 800f510:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f514:	4851      	ldr	r0, [pc, #324]	; (800f65c <_svfiprintf_r+0x1ec>)
 800f516:	f7ff fac1 	bl	800ea9c <memchr>
 800f51a:	9a04      	ldr	r2, [sp, #16]
 800f51c:	b9d8      	cbnz	r0, 800f556 <_svfiprintf_r+0xe6>
 800f51e:	06d0      	lsls	r0, r2, #27
 800f520:	bf44      	itt	mi
 800f522:	2320      	movmi	r3, #32
 800f524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f528:	0711      	lsls	r1, r2, #28
 800f52a:	bf44      	itt	mi
 800f52c:	232b      	movmi	r3, #43	; 0x2b
 800f52e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f532:	f89a 3000 	ldrb.w	r3, [sl]
 800f536:	2b2a      	cmp	r3, #42	; 0x2a
 800f538:	d015      	beq.n	800f566 <_svfiprintf_r+0xf6>
 800f53a:	4654      	mov	r4, sl
 800f53c:	2000      	movs	r0, #0
 800f53e:	f04f 0c0a 	mov.w	ip, #10
 800f542:	9a07      	ldr	r2, [sp, #28]
 800f544:	4621      	mov	r1, r4
 800f546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f54a:	3b30      	subs	r3, #48	; 0x30
 800f54c:	2b09      	cmp	r3, #9
 800f54e:	d94e      	bls.n	800f5ee <_svfiprintf_r+0x17e>
 800f550:	b1b0      	cbz	r0, 800f580 <_svfiprintf_r+0x110>
 800f552:	9207      	str	r2, [sp, #28]
 800f554:	e014      	b.n	800f580 <_svfiprintf_r+0x110>
 800f556:	eba0 0308 	sub.w	r3, r0, r8
 800f55a:	fa09 f303 	lsl.w	r3, r9, r3
 800f55e:	4313      	orrs	r3, r2
 800f560:	46a2      	mov	sl, r4
 800f562:	9304      	str	r3, [sp, #16]
 800f564:	e7d2      	b.n	800f50c <_svfiprintf_r+0x9c>
 800f566:	9b03      	ldr	r3, [sp, #12]
 800f568:	1d19      	adds	r1, r3, #4
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	9103      	str	r1, [sp, #12]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	bfbb      	ittet	lt
 800f572:	425b      	neglt	r3, r3
 800f574:	f042 0202 	orrlt.w	r2, r2, #2
 800f578:	9307      	strge	r3, [sp, #28]
 800f57a:	9307      	strlt	r3, [sp, #28]
 800f57c:	bfb8      	it	lt
 800f57e:	9204      	strlt	r2, [sp, #16]
 800f580:	7823      	ldrb	r3, [r4, #0]
 800f582:	2b2e      	cmp	r3, #46	; 0x2e
 800f584:	d10c      	bne.n	800f5a0 <_svfiprintf_r+0x130>
 800f586:	7863      	ldrb	r3, [r4, #1]
 800f588:	2b2a      	cmp	r3, #42	; 0x2a
 800f58a:	d135      	bne.n	800f5f8 <_svfiprintf_r+0x188>
 800f58c:	9b03      	ldr	r3, [sp, #12]
 800f58e:	3402      	adds	r4, #2
 800f590:	1d1a      	adds	r2, r3, #4
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	9203      	str	r2, [sp, #12]
 800f596:	2b00      	cmp	r3, #0
 800f598:	bfb8      	it	lt
 800f59a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f59e:	9305      	str	r3, [sp, #20]
 800f5a0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800f660 <_svfiprintf_r+0x1f0>
 800f5a4:	2203      	movs	r2, #3
 800f5a6:	4650      	mov	r0, sl
 800f5a8:	7821      	ldrb	r1, [r4, #0]
 800f5aa:	f7ff fa77 	bl	800ea9c <memchr>
 800f5ae:	b140      	cbz	r0, 800f5c2 <_svfiprintf_r+0x152>
 800f5b0:	2340      	movs	r3, #64	; 0x40
 800f5b2:	eba0 000a 	sub.w	r0, r0, sl
 800f5b6:	fa03 f000 	lsl.w	r0, r3, r0
 800f5ba:	9b04      	ldr	r3, [sp, #16]
 800f5bc:	3401      	adds	r4, #1
 800f5be:	4303      	orrs	r3, r0
 800f5c0:	9304      	str	r3, [sp, #16]
 800f5c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5c6:	2206      	movs	r2, #6
 800f5c8:	4826      	ldr	r0, [pc, #152]	; (800f664 <_svfiprintf_r+0x1f4>)
 800f5ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f5ce:	f7ff fa65 	bl	800ea9c <memchr>
 800f5d2:	2800      	cmp	r0, #0
 800f5d4:	d038      	beq.n	800f648 <_svfiprintf_r+0x1d8>
 800f5d6:	4b24      	ldr	r3, [pc, #144]	; (800f668 <_svfiprintf_r+0x1f8>)
 800f5d8:	bb1b      	cbnz	r3, 800f622 <_svfiprintf_r+0x1b2>
 800f5da:	9b03      	ldr	r3, [sp, #12]
 800f5dc:	3307      	adds	r3, #7
 800f5de:	f023 0307 	bic.w	r3, r3, #7
 800f5e2:	3308      	adds	r3, #8
 800f5e4:	9303      	str	r3, [sp, #12]
 800f5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5e8:	4433      	add	r3, r6
 800f5ea:	9309      	str	r3, [sp, #36]	; 0x24
 800f5ec:	e767      	b.n	800f4be <_svfiprintf_r+0x4e>
 800f5ee:	460c      	mov	r4, r1
 800f5f0:	2001      	movs	r0, #1
 800f5f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5f6:	e7a5      	b.n	800f544 <_svfiprintf_r+0xd4>
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	f04f 0c0a 	mov.w	ip, #10
 800f5fe:	4619      	mov	r1, r3
 800f600:	3401      	adds	r4, #1
 800f602:	9305      	str	r3, [sp, #20]
 800f604:	4620      	mov	r0, r4
 800f606:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f60a:	3a30      	subs	r2, #48	; 0x30
 800f60c:	2a09      	cmp	r2, #9
 800f60e:	d903      	bls.n	800f618 <_svfiprintf_r+0x1a8>
 800f610:	2b00      	cmp	r3, #0
 800f612:	d0c5      	beq.n	800f5a0 <_svfiprintf_r+0x130>
 800f614:	9105      	str	r1, [sp, #20]
 800f616:	e7c3      	b.n	800f5a0 <_svfiprintf_r+0x130>
 800f618:	4604      	mov	r4, r0
 800f61a:	2301      	movs	r3, #1
 800f61c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f620:	e7f0      	b.n	800f604 <_svfiprintf_r+0x194>
 800f622:	ab03      	add	r3, sp, #12
 800f624:	9300      	str	r3, [sp, #0]
 800f626:	462a      	mov	r2, r5
 800f628:	4638      	mov	r0, r7
 800f62a:	4b10      	ldr	r3, [pc, #64]	; (800f66c <_svfiprintf_r+0x1fc>)
 800f62c:	a904      	add	r1, sp, #16
 800f62e:	f7fd ffcb 	bl	800d5c8 <_printf_float>
 800f632:	1c42      	adds	r2, r0, #1
 800f634:	4606      	mov	r6, r0
 800f636:	d1d6      	bne.n	800f5e6 <_svfiprintf_r+0x176>
 800f638:	89ab      	ldrh	r3, [r5, #12]
 800f63a:	065b      	lsls	r3, r3, #25
 800f63c:	f53f af2c 	bmi.w	800f498 <_svfiprintf_r+0x28>
 800f640:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f642:	b01d      	add	sp, #116	; 0x74
 800f644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f648:	ab03      	add	r3, sp, #12
 800f64a:	9300      	str	r3, [sp, #0]
 800f64c:	462a      	mov	r2, r5
 800f64e:	4638      	mov	r0, r7
 800f650:	4b06      	ldr	r3, [pc, #24]	; (800f66c <_svfiprintf_r+0x1fc>)
 800f652:	a904      	add	r1, sp, #16
 800f654:	f7fe fa54 	bl	800db00 <_printf_i>
 800f658:	e7eb      	b.n	800f632 <_svfiprintf_r+0x1c2>
 800f65a:	bf00      	nop
 800f65c:	08012f34 	.word	0x08012f34
 800f660:	08012f3a 	.word	0x08012f3a
 800f664:	08012f3e 	.word	0x08012f3e
 800f668:	0800d5c9 	.word	0x0800d5c9
 800f66c:	0800f3b9 	.word	0x0800f3b9

0800f670 <_sbrk_r>:
 800f670:	b538      	push	{r3, r4, r5, lr}
 800f672:	2300      	movs	r3, #0
 800f674:	4d05      	ldr	r5, [pc, #20]	; (800f68c <_sbrk_r+0x1c>)
 800f676:	4604      	mov	r4, r0
 800f678:	4608      	mov	r0, r1
 800f67a:	602b      	str	r3, [r5, #0]
 800f67c:	f7f8 fe32 	bl	80082e4 <_sbrk>
 800f680:	1c43      	adds	r3, r0, #1
 800f682:	d102      	bne.n	800f68a <_sbrk_r+0x1a>
 800f684:	682b      	ldr	r3, [r5, #0]
 800f686:	b103      	cbz	r3, 800f68a <_sbrk_r+0x1a>
 800f688:	6023      	str	r3, [r4, #0]
 800f68a:	bd38      	pop	{r3, r4, r5, pc}
 800f68c:	20000810 	.word	0x20000810

0800f690 <__assert_func>:
 800f690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f692:	4614      	mov	r4, r2
 800f694:	461a      	mov	r2, r3
 800f696:	4b09      	ldr	r3, [pc, #36]	; (800f6bc <__assert_func+0x2c>)
 800f698:	4605      	mov	r5, r0
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	68d8      	ldr	r0, [r3, #12]
 800f69e:	b14c      	cbz	r4, 800f6b4 <__assert_func+0x24>
 800f6a0:	4b07      	ldr	r3, [pc, #28]	; (800f6c0 <__assert_func+0x30>)
 800f6a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f6a6:	9100      	str	r1, [sp, #0]
 800f6a8:	462b      	mov	r3, r5
 800f6aa:	4906      	ldr	r1, [pc, #24]	; (800f6c4 <__assert_func+0x34>)
 800f6ac:	f000 f80e 	bl	800f6cc <fiprintf>
 800f6b0:	f000 faaa 	bl	800fc08 <abort>
 800f6b4:	4b04      	ldr	r3, [pc, #16]	; (800f6c8 <__assert_func+0x38>)
 800f6b6:	461c      	mov	r4, r3
 800f6b8:	e7f3      	b.n	800f6a2 <__assert_func+0x12>
 800f6ba:	bf00      	nop
 800f6bc:	20000044 	.word	0x20000044
 800f6c0:	08012f45 	.word	0x08012f45
 800f6c4:	08012f52 	.word	0x08012f52
 800f6c8:	08012f80 	.word	0x08012f80

0800f6cc <fiprintf>:
 800f6cc:	b40e      	push	{r1, r2, r3}
 800f6ce:	b503      	push	{r0, r1, lr}
 800f6d0:	4601      	mov	r1, r0
 800f6d2:	ab03      	add	r3, sp, #12
 800f6d4:	4805      	ldr	r0, [pc, #20]	; (800f6ec <fiprintf+0x20>)
 800f6d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6da:	6800      	ldr	r0, [r0, #0]
 800f6dc:	9301      	str	r3, [sp, #4]
 800f6de:	f000 f895 	bl	800f80c <_vfiprintf_r>
 800f6e2:	b002      	add	sp, #8
 800f6e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6e8:	b003      	add	sp, #12
 800f6ea:	4770      	bx	lr
 800f6ec:	20000044 	.word	0x20000044

0800f6f0 <__ascii_mbtowc>:
 800f6f0:	b082      	sub	sp, #8
 800f6f2:	b901      	cbnz	r1, 800f6f6 <__ascii_mbtowc+0x6>
 800f6f4:	a901      	add	r1, sp, #4
 800f6f6:	b142      	cbz	r2, 800f70a <__ascii_mbtowc+0x1a>
 800f6f8:	b14b      	cbz	r3, 800f70e <__ascii_mbtowc+0x1e>
 800f6fa:	7813      	ldrb	r3, [r2, #0]
 800f6fc:	600b      	str	r3, [r1, #0]
 800f6fe:	7812      	ldrb	r2, [r2, #0]
 800f700:	1e10      	subs	r0, r2, #0
 800f702:	bf18      	it	ne
 800f704:	2001      	movne	r0, #1
 800f706:	b002      	add	sp, #8
 800f708:	4770      	bx	lr
 800f70a:	4610      	mov	r0, r2
 800f70c:	e7fb      	b.n	800f706 <__ascii_mbtowc+0x16>
 800f70e:	f06f 0001 	mvn.w	r0, #1
 800f712:	e7f8      	b.n	800f706 <__ascii_mbtowc+0x16>

0800f714 <memmove>:
 800f714:	4288      	cmp	r0, r1
 800f716:	b510      	push	{r4, lr}
 800f718:	eb01 0402 	add.w	r4, r1, r2
 800f71c:	d902      	bls.n	800f724 <memmove+0x10>
 800f71e:	4284      	cmp	r4, r0
 800f720:	4623      	mov	r3, r4
 800f722:	d807      	bhi.n	800f734 <memmove+0x20>
 800f724:	1e43      	subs	r3, r0, #1
 800f726:	42a1      	cmp	r1, r4
 800f728:	d008      	beq.n	800f73c <memmove+0x28>
 800f72a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f72e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f732:	e7f8      	b.n	800f726 <memmove+0x12>
 800f734:	4601      	mov	r1, r0
 800f736:	4402      	add	r2, r0
 800f738:	428a      	cmp	r2, r1
 800f73a:	d100      	bne.n	800f73e <memmove+0x2a>
 800f73c:	bd10      	pop	{r4, pc}
 800f73e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f746:	e7f7      	b.n	800f738 <memmove+0x24>

0800f748 <__malloc_lock>:
 800f748:	4801      	ldr	r0, [pc, #4]	; (800f750 <__malloc_lock+0x8>)
 800f74a:	f000 bc19 	b.w	800ff80 <__retarget_lock_acquire_recursive>
 800f74e:	bf00      	nop
 800f750:	20000814 	.word	0x20000814

0800f754 <__malloc_unlock>:
 800f754:	4801      	ldr	r0, [pc, #4]	; (800f75c <__malloc_unlock+0x8>)
 800f756:	f000 bc14 	b.w	800ff82 <__retarget_lock_release_recursive>
 800f75a:	bf00      	nop
 800f75c:	20000814 	.word	0x20000814

0800f760 <_realloc_r>:
 800f760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f764:	4680      	mov	r8, r0
 800f766:	4614      	mov	r4, r2
 800f768:	460e      	mov	r6, r1
 800f76a:	b921      	cbnz	r1, 800f776 <_realloc_r+0x16>
 800f76c:	4611      	mov	r1, r2
 800f76e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f772:	f7ff bdad 	b.w	800f2d0 <_malloc_r>
 800f776:	b92a      	cbnz	r2, 800f784 <_realloc_r+0x24>
 800f778:	f7ff fd42 	bl	800f200 <_free_r>
 800f77c:	4625      	mov	r5, r4
 800f77e:	4628      	mov	r0, r5
 800f780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f784:	f000 fc64 	bl	8010050 <_malloc_usable_size_r>
 800f788:	4284      	cmp	r4, r0
 800f78a:	4607      	mov	r7, r0
 800f78c:	d802      	bhi.n	800f794 <_realloc_r+0x34>
 800f78e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f792:	d812      	bhi.n	800f7ba <_realloc_r+0x5a>
 800f794:	4621      	mov	r1, r4
 800f796:	4640      	mov	r0, r8
 800f798:	f7ff fd9a 	bl	800f2d0 <_malloc_r>
 800f79c:	4605      	mov	r5, r0
 800f79e:	2800      	cmp	r0, #0
 800f7a0:	d0ed      	beq.n	800f77e <_realloc_r+0x1e>
 800f7a2:	42bc      	cmp	r4, r7
 800f7a4:	4622      	mov	r2, r4
 800f7a6:	4631      	mov	r1, r6
 800f7a8:	bf28      	it	cs
 800f7aa:	463a      	movcs	r2, r7
 800f7ac:	f7ff f984 	bl	800eab8 <memcpy>
 800f7b0:	4631      	mov	r1, r6
 800f7b2:	4640      	mov	r0, r8
 800f7b4:	f7ff fd24 	bl	800f200 <_free_r>
 800f7b8:	e7e1      	b.n	800f77e <_realloc_r+0x1e>
 800f7ba:	4635      	mov	r5, r6
 800f7bc:	e7df      	b.n	800f77e <_realloc_r+0x1e>

0800f7be <__sfputc_r>:
 800f7be:	6893      	ldr	r3, [r2, #8]
 800f7c0:	b410      	push	{r4}
 800f7c2:	3b01      	subs	r3, #1
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	6093      	str	r3, [r2, #8]
 800f7c8:	da07      	bge.n	800f7da <__sfputc_r+0x1c>
 800f7ca:	6994      	ldr	r4, [r2, #24]
 800f7cc:	42a3      	cmp	r3, r4
 800f7ce:	db01      	blt.n	800f7d4 <__sfputc_r+0x16>
 800f7d0:	290a      	cmp	r1, #10
 800f7d2:	d102      	bne.n	800f7da <__sfputc_r+0x1c>
 800f7d4:	bc10      	pop	{r4}
 800f7d6:	f000 b949 	b.w	800fa6c <__swbuf_r>
 800f7da:	6813      	ldr	r3, [r2, #0]
 800f7dc:	1c58      	adds	r0, r3, #1
 800f7de:	6010      	str	r0, [r2, #0]
 800f7e0:	7019      	strb	r1, [r3, #0]
 800f7e2:	4608      	mov	r0, r1
 800f7e4:	bc10      	pop	{r4}
 800f7e6:	4770      	bx	lr

0800f7e8 <__sfputs_r>:
 800f7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ea:	4606      	mov	r6, r0
 800f7ec:	460f      	mov	r7, r1
 800f7ee:	4614      	mov	r4, r2
 800f7f0:	18d5      	adds	r5, r2, r3
 800f7f2:	42ac      	cmp	r4, r5
 800f7f4:	d101      	bne.n	800f7fa <__sfputs_r+0x12>
 800f7f6:	2000      	movs	r0, #0
 800f7f8:	e007      	b.n	800f80a <__sfputs_r+0x22>
 800f7fa:	463a      	mov	r2, r7
 800f7fc:	4630      	mov	r0, r6
 800f7fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f802:	f7ff ffdc 	bl	800f7be <__sfputc_r>
 800f806:	1c43      	adds	r3, r0, #1
 800f808:	d1f3      	bne.n	800f7f2 <__sfputs_r+0xa>
 800f80a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f80c <_vfiprintf_r>:
 800f80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f810:	460d      	mov	r5, r1
 800f812:	4614      	mov	r4, r2
 800f814:	4698      	mov	r8, r3
 800f816:	4606      	mov	r6, r0
 800f818:	b09d      	sub	sp, #116	; 0x74
 800f81a:	b118      	cbz	r0, 800f824 <_vfiprintf_r+0x18>
 800f81c:	6983      	ldr	r3, [r0, #24]
 800f81e:	b90b      	cbnz	r3, 800f824 <_vfiprintf_r+0x18>
 800f820:	f000 fb10 	bl	800fe44 <__sinit>
 800f824:	4b89      	ldr	r3, [pc, #548]	; (800fa4c <_vfiprintf_r+0x240>)
 800f826:	429d      	cmp	r5, r3
 800f828:	d11b      	bne.n	800f862 <_vfiprintf_r+0x56>
 800f82a:	6875      	ldr	r5, [r6, #4]
 800f82c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f82e:	07d9      	lsls	r1, r3, #31
 800f830:	d405      	bmi.n	800f83e <_vfiprintf_r+0x32>
 800f832:	89ab      	ldrh	r3, [r5, #12]
 800f834:	059a      	lsls	r2, r3, #22
 800f836:	d402      	bmi.n	800f83e <_vfiprintf_r+0x32>
 800f838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f83a:	f000 fba1 	bl	800ff80 <__retarget_lock_acquire_recursive>
 800f83e:	89ab      	ldrh	r3, [r5, #12]
 800f840:	071b      	lsls	r3, r3, #28
 800f842:	d501      	bpl.n	800f848 <_vfiprintf_r+0x3c>
 800f844:	692b      	ldr	r3, [r5, #16]
 800f846:	b9eb      	cbnz	r3, 800f884 <_vfiprintf_r+0x78>
 800f848:	4629      	mov	r1, r5
 800f84a:	4630      	mov	r0, r6
 800f84c:	f000 f96e 	bl	800fb2c <__swsetup_r>
 800f850:	b1c0      	cbz	r0, 800f884 <_vfiprintf_r+0x78>
 800f852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f854:	07dc      	lsls	r4, r3, #31
 800f856:	d50e      	bpl.n	800f876 <_vfiprintf_r+0x6a>
 800f858:	f04f 30ff 	mov.w	r0, #4294967295
 800f85c:	b01d      	add	sp, #116	; 0x74
 800f85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f862:	4b7b      	ldr	r3, [pc, #492]	; (800fa50 <_vfiprintf_r+0x244>)
 800f864:	429d      	cmp	r5, r3
 800f866:	d101      	bne.n	800f86c <_vfiprintf_r+0x60>
 800f868:	68b5      	ldr	r5, [r6, #8]
 800f86a:	e7df      	b.n	800f82c <_vfiprintf_r+0x20>
 800f86c:	4b79      	ldr	r3, [pc, #484]	; (800fa54 <_vfiprintf_r+0x248>)
 800f86e:	429d      	cmp	r5, r3
 800f870:	bf08      	it	eq
 800f872:	68f5      	ldreq	r5, [r6, #12]
 800f874:	e7da      	b.n	800f82c <_vfiprintf_r+0x20>
 800f876:	89ab      	ldrh	r3, [r5, #12]
 800f878:	0598      	lsls	r0, r3, #22
 800f87a:	d4ed      	bmi.n	800f858 <_vfiprintf_r+0x4c>
 800f87c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f87e:	f000 fb80 	bl	800ff82 <__retarget_lock_release_recursive>
 800f882:	e7e9      	b.n	800f858 <_vfiprintf_r+0x4c>
 800f884:	2300      	movs	r3, #0
 800f886:	9309      	str	r3, [sp, #36]	; 0x24
 800f888:	2320      	movs	r3, #32
 800f88a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f88e:	2330      	movs	r3, #48	; 0x30
 800f890:	f04f 0901 	mov.w	r9, #1
 800f894:	f8cd 800c 	str.w	r8, [sp, #12]
 800f898:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800fa58 <_vfiprintf_r+0x24c>
 800f89c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f8a0:	4623      	mov	r3, r4
 800f8a2:	469a      	mov	sl, r3
 800f8a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8a8:	b10a      	cbz	r2, 800f8ae <_vfiprintf_r+0xa2>
 800f8aa:	2a25      	cmp	r2, #37	; 0x25
 800f8ac:	d1f9      	bne.n	800f8a2 <_vfiprintf_r+0x96>
 800f8ae:	ebba 0b04 	subs.w	fp, sl, r4
 800f8b2:	d00b      	beq.n	800f8cc <_vfiprintf_r+0xc0>
 800f8b4:	465b      	mov	r3, fp
 800f8b6:	4622      	mov	r2, r4
 800f8b8:	4629      	mov	r1, r5
 800f8ba:	4630      	mov	r0, r6
 800f8bc:	f7ff ff94 	bl	800f7e8 <__sfputs_r>
 800f8c0:	3001      	adds	r0, #1
 800f8c2:	f000 80aa 	beq.w	800fa1a <_vfiprintf_r+0x20e>
 800f8c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8c8:	445a      	add	r2, fp
 800f8ca:	9209      	str	r2, [sp, #36]	; 0x24
 800f8cc:	f89a 3000 	ldrb.w	r3, [sl]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	f000 80a2 	beq.w	800fa1a <_vfiprintf_r+0x20e>
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	f04f 32ff 	mov.w	r2, #4294967295
 800f8dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8e0:	f10a 0a01 	add.w	sl, sl, #1
 800f8e4:	9304      	str	r3, [sp, #16]
 800f8e6:	9307      	str	r3, [sp, #28]
 800f8e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f8ec:	931a      	str	r3, [sp, #104]	; 0x68
 800f8ee:	4654      	mov	r4, sl
 800f8f0:	2205      	movs	r2, #5
 800f8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8f6:	4858      	ldr	r0, [pc, #352]	; (800fa58 <_vfiprintf_r+0x24c>)
 800f8f8:	f7ff f8d0 	bl	800ea9c <memchr>
 800f8fc:	9a04      	ldr	r2, [sp, #16]
 800f8fe:	b9d8      	cbnz	r0, 800f938 <_vfiprintf_r+0x12c>
 800f900:	06d1      	lsls	r1, r2, #27
 800f902:	bf44      	itt	mi
 800f904:	2320      	movmi	r3, #32
 800f906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f90a:	0713      	lsls	r3, r2, #28
 800f90c:	bf44      	itt	mi
 800f90e:	232b      	movmi	r3, #43	; 0x2b
 800f910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f914:	f89a 3000 	ldrb.w	r3, [sl]
 800f918:	2b2a      	cmp	r3, #42	; 0x2a
 800f91a:	d015      	beq.n	800f948 <_vfiprintf_r+0x13c>
 800f91c:	4654      	mov	r4, sl
 800f91e:	2000      	movs	r0, #0
 800f920:	f04f 0c0a 	mov.w	ip, #10
 800f924:	9a07      	ldr	r2, [sp, #28]
 800f926:	4621      	mov	r1, r4
 800f928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f92c:	3b30      	subs	r3, #48	; 0x30
 800f92e:	2b09      	cmp	r3, #9
 800f930:	d94e      	bls.n	800f9d0 <_vfiprintf_r+0x1c4>
 800f932:	b1b0      	cbz	r0, 800f962 <_vfiprintf_r+0x156>
 800f934:	9207      	str	r2, [sp, #28]
 800f936:	e014      	b.n	800f962 <_vfiprintf_r+0x156>
 800f938:	eba0 0308 	sub.w	r3, r0, r8
 800f93c:	fa09 f303 	lsl.w	r3, r9, r3
 800f940:	4313      	orrs	r3, r2
 800f942:	46a2      	mov	sl, r4
 800f944:	9304      	str	r3, [sp, #16]
 800f946:	e7d2      	b.n	800f8ee <_vfiprintf_r+0xe2>
 800f948:	9b03      	ldr	r3, [sp, #12]
 800f94a:	1d19      	adds	r1, r3, #4
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	9103      	str	r1, [sp, #12]
 800f950:	2b00      	cmp	r3, #0
 800f952:	bfbb      	ittet	lt
 800f954:	425b      	neglt	r3, r3
 800f956:	f042 0202 	orrlt.w	r2, r2, #2
 800f95a:	9307      	strge	r3, [sp, #28]
 800f95c:	9307      	strlt	r3, [sp, #28]
 800f95e:	bfb8      	it	lt
 800f960:	9204      	strlt	r2, [sp, #16]
 800f962:	7823      	ldrb	r3, [r4, #0]
 800f964:	2b2e      	cmp	r3, #46	; 0x2e
 800f966:	d10c      	bne.n	800f982 <_vfiprintf_r+0x176>
 800f968:	7863      	ldrb	r3, [r4, #1]
 800f96a:	2b2a      	cmp	r3, #42	; 0x2a
 800f96c:	d135      	bne.n	800f9da <_vfiprintf_r+0x1ce>
 800f96e:	9b03      	ldr	r3, [sp, #12]
 800f970:	3402      	adds	r4, #2
 800f972:	1d1a      	adds	r2, r3, #4
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	9203      	str	r2, [sp, #12]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	bfb8      	it	lt
 800f97c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f980:	9305      	str	r3, [sp, #20]
 800f982:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800fa5c <_vfiprintf_r+0x250>
 800f986:	2203      	movs	r2, #3
 800f988:	4650      	mov	r0, sl
 800f98a:	7821      	ldrb	r1, [r4, #0]
 800f98c:	f7ff f886 	bl	800ea9c <memchr>
 800f990:	b140      	cbz	r0, 800f9a4 <_vfiprintf_r+0x198>
 800f992:	2340      	movs	r3, #64	; 0x40
 800f994:	eba0 000a 	sub.w	r0, r0, sl
 800f998:	fa03 f000 	lsl.w	r0, r3, r0
 800f99c:	9b04      	ldr	r3, [sp, #16]
 800f99e:	3401      	adds	r4, #1
 800f9a0:	4303      	orrs	r3, r0
 800f9a2:	9304      	str	r3, [sp, #16]
 800f9a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9a8:	2206      	movs	r2, #6
 800f9aa:	482d      	ldr	r0, [pc, #180]	; (800fa60 <_vfiprintf_r+0x254>)
 800f9ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f9b0:	f7ff f874 	bl	800ea9c <memchr>
 800f9b4:	2800      	cmp	r0, #0
 800f9b6:	d03f      	beq.n	800fa38 <_vfiprintf_r+0x22c>
 800f9b8:	4b2a      	ldr	r3, [pc, #168]	; (800fa64 <_vfiprintf_r+0x258>)
 800f9ba:	bb1b      	cbnz	r3, 800fa04 <_vfiprintf_r+0x1f8>
 800f9bc:	9b03      	ldr	r3, [sp, #12]
 800f9be:	3307      	adds	r3, #7
 800f9c0:	f023 0307 	bic.w	r3, r3, #7
 800f9c4:	3308      	adds	r3, #8
 800f9c6:	9303      	str	r3, [sp, #12]
 800f9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9ca:	443b      	add	r3, r7
 800f9cc:	9309      	str	r3, [sp, #36]	; 0x24
 800f9ce:	e767      	b.n	800f8a0 <_vfiprintf_r+0x94>
 800f9d0:	460c      	mov	r4, r1
 800f9d2:	2001      	movs	r0, #1
 800f9d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9d8:	e7a5      	b.n	800f926 <_vfiprintf_r+0x11a>
 800f9da:	2300      	movs	r3, #0
 800f9dc:	f04f 0c0a 	mov.w	ip, #10
 800f9e0:	4619      	mov	r1, r3
 800f9e2:	3401      	adds	r4, #1
 800f9e4:	9305      	str	r3, [sp, #20]
 800f9e6:	4620      	mov	r0, r4
 800f9e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9ec:	3a30      	subs	r2, #48	; 0x30
 800f9ee:	2a09      	cmp	r2, #9
 800f9f0:	d903      	bls.n	800f9fa <_vfiprintf_r+0x1ee>
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d0c5      	beq.n	800f982 <_vfiprintf_r+0x176>
 800f9f6:	9105      	str	r1, [sp, #20]
 800f9f8:	e7c3      	b.n	800f982 <_vfiprintf_r+0x176>
 800f9fa:	4604      	mov	r4, r0
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa02:	e7f0      	b.n	800f9e6 <_vfiprintf_r+0x1da>
 800fa04:	ab03      	add	r3, sp, #12
 800fa06:	9300      	str	r3, [sp, #0]
 800fa08:	462a      	mov	r2, r5
 800fa0a:	4630      	mov	r0, r6
 800fa0c:	4b16      	ldr	r3, [pc, #88]	; (800fa68 <_vfiprintf_r+0x25c>)
 800fa0e:	a904      	add	r1, sp, #16
 800fa10:	f7fd fdda 	bl	800d5c8 <_printf_float>
 800fa14:	4607      	mov	r7, r0
 800fa16:	1c78      	adds	r0, r7, #1
 800fa18:	d1d6      	bne.n	800f9c8 <_vfiprintf_r+0x1bc>
 800fa1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa1c:	07d9      	lsls	r1, r3, #31
 800fa1e:	d405      	bmi.n	800fa2c <_vfiprintf_r+0x220>
 800fa20:	89ab      	ldrh	r3, [r5, #12]
 800fa22:	059a      	lsls	r2, r3, #22
 800fa24:	d402      	bmi.n	800fa2c <_vfiprintf_r+0x220>
 800fa26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa28:	f000 faab 	bl	800ff82 <__retarget_lock_release_recursive>
 800fa2c:	89ab      	ldrh	r3, [r5, #12]
 800fa2e:	065b      	lsls	r3, r3, #25
 800fa30:	f53f af12 	bmi.w	800f858 <_vfiprintf_r+0x4c>
 800fa34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa36:	e711      	b.n	800f85c <_vfiprintf_r+0x50>
 800fa38:	ab03      	add	r3, sp, #12
 800fa3a:	9300      	str	r3, [sp, #0]
 800fa3c:	462a      	mov	r2, r5
 800fa3e:	4630      	mov	r0, r6
 800fa40:	4b09      	ldr	r3, [pc, #36]	; (800fa68 <_vfiprintf_r+0x25c>)
 800fa42:	a904      	add	r1, sp, #16
 800fa44:	f7fe f85c 	bl	800db00 <_printf_i>
 800fa48:	e7e4      	b.n	800fa14 <_vfiprintf_r+0x208>
 800fa4a:	bf00      	nop
 800fa4c:	080130ac 	.word	0x080130ac
 800fa50:	080130cc 	.word	0x080130cc
 800fa54:	0801308c 	.word	0x0801308c
 800fa58:	08012f34 	.word	0x08012f34
 800fa5c:	08012f3a 	.word	0x08012f3a
 800fa60:	08012f3e 	.word	0x08012f3e
 800fa64:	0800d5c9 	.word	0x0800d5c9
 800fa68:	0800f7e9 	.word	0x0800f7e9

0800fa6c <__swbuf_r>:
 800fa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa6e:	460e      	mov	r6, r1
 800fa70:	4614      	mov	r4, r2
 800fa72:	4605      	mov	r5, r0
 800fa74:	b118      	cbz	r0, 800fa7e <__swbuf_r+0x12>
 800fa76:	6983      	ldr	r3, [r0, #24]
 800fa78:	b90b      	cbnz	r3, 800fa7e <__swbuf_r+0x12>
 800fa7a:	f000 f9e3 	bl	800fe44 <__sinit>
 800fa7e:	4b21      	ldr	r3, [pc, #132]	; (800fb04 <__swbuf_r+0x98>)
 800fa80:	429c      	cmp	r4, r3
 800fa82:	d12b      	bne.n	800fadc <__swbuf_r+0x70>
 800fa84:	686c      	ldr	r4, [r5, #4]
 800fa86:	69a3      	ldr	r3, [r4, #24]
 800fa88:	60a3      	str	r3, [r4, #8]
 800fa8a:	89a3      	ldrh	r3, [r4, #12]
 800fa8c:	071a      	lsls	r2, r3, #28
 800fa8e:	d52f      	bpl.n	800faf0 <__swbuf_r+0x84>
 800fa90:	6923      	ldr	r3, [r4, #16]
 800fa92:	b36b      	cbz	r3, 800faf0 <__swbuf_r+0x84>
 800fa94:	6923      	ldr	r3, [r4, #16]
 800fa96:	6820      	ldr	r0, [r4, #0]
 800fa98:	b2f6      	uxtb	r6, r6
 800fa9a:	1ac0      	subs	r0, r0, r3
 800fa9c:	6963      	ldr	r3, [r4, #20]
 800fa9e:	4637      	mov	r7, r6
 800faa0:	4283      	cmp	r3, r0
 800faa2:	dc04      	bgt.n	800faae <__swbuf_r+0x42>
 800faa4:	4621      	mov	r1, r4
 800faa6:	4628      	mov	r0, r5
 800faa8:	f000 f938 	bl	800fd1c <_fflush_r>
 800faac:	bb30      	cbnz	r0, 800fafc <__swbuf_r+0x90>
 800faae:	68a3      	ldr	r3, [r4, #8]
 800fab0:	3001      	adds	r0, #1
 800fab2:	3b01      	subs	r3, #1
 800fab4:	60a3      	str	r3, [r4, #8]
 800fab6:	6823      	ldr	r3, [r4, #0]
 800fab8:	1c5a      	adds	r2, r3, #1
 800faba:	6022      	str	r2, [r4, #0]
 800fabc:	701e      	strb	r6, [r3, #0]
 800fabe:	6963      	ldr	r3, [r4, #20]
 800fac0:	4283      	cmp	r3, r0
 800fac2:	d004      	beq.n	800face <__swbuf_r+0x62>
 800fac4:	89a3      	ldrh	r3, [r4, #12]
 800fac6:	07db      	lsls	r3, r3, #31
 800fac8:	d506      	bpl.n	800fad8 <__swbuf_r+0x6c>
 800faca:	2e0a      	cmp	r6, #10
 800facc:	d104      	bne.n	800fad8 <__swbuf_r+0x6c>
 800face:	4621      	mov	r1, r4
 800fad0:	4628      	mov	r0, r5
 800fad2:	f000 f923 	bl	800fd1c <_fflush_r>
 800fad6:	b988      	cbnz	r0, 800fafc <__swbuf_r+0x90>
 800fad8:	4638      	mov	r0, r7
 800fada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fadc:	4b0a      	ldr	r3, [pc, #40]	; (800fb08 <__swbuf_r+0x9c>)
 800fade:	429c      	cmp	r4, r3
 800fae0:	d101      	bne.n	800fae6 <__swbuf_r+0x7a>
 800fae2:	68ac      	ldr	r4, [r5, #8]
 800fae4:	e7cf      	b.n	800fa86 <__swbuf_r+0x1a>
 800fae6:	4b09      	ldr	r3, [pc, #36]	; (800fb0c <__swbuf_r+0xa0>)
 800fae8:	429c      	cmp	r4, r3
 800faea:	bf08      	it	eq
 800faec:	68ec      	ldreq	r4, [r5, #12]
 800faee:	e7ca      	b.n	800fa86 <__swbuf_r+0x1a>
 800faf0:	4621      	mov	r1, r4
 800faf2:	4628      	mov	r0, r5
 800faf4:	f000 f81a 	bl	800fb2c <__swsetup_r>
 800faf8:	2800      	cmp	r0, #0
 800fafa:	d0cb      	beq.n	800fa94 <__swbuf_r+0x28>
 800fafc:	f04f 37ff 	mov.w	r7, #4294967295
 800fb00:	e7ea      	b.n	800fad8 <__swbuf_r+0x6c>
 800fb02:	bf00      	nop
 800fb04:	080130ac 	.word	0x080130ac
 800fb08:	080130cc 	.word	0x080130cc
 800fb0c:	0801308c 	.word	0x0801308c

0800fb10 <__ascii_wctomb>:
 800fb10:	4603      	mov	r3, r0
 800fb12:	4608      	mov	r0, r1
 800fb14:	b141      	cbz	r1, 800fb28 <__ascii_wctomb+0x18>
 800fb16:	2aff      	cmp	r2, #255	; 0xff
 800fb18:	d904      	bls.n	800fb24 <__ascii_wctomb+0x14>
 800fb1a:	228a      	movs	r2, #138	; 0x8a
 800fb1c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb20:	601a      	str	r2, [r3, #0]
 800fb22:	4770      	bx	lr
 800fb24:	2001      	movs	r0, #1
 800fb26:	700a      	strb	r2, [r1, #0]
 800fb28:	4770      	bx	lr
	...

0800fb2c <__swsetup_r>:
 800fb2c:	4b32      	ldr	r3, [pc, #200]	; (800fbf8 <__swsetup_r+0xcc>)
 800fb2e:	b570      	push	{r4, r5, r6, lr}
 800fb30:	681d      	ldr	r5, [r3, #0]
 800fb32:	4606      	mov	r6, r0
 800fb34:	460c      	mov	r4, r1
 800fb36:	b125      	cbz	r5, 800fb42 <__swsetup_r+0x16>
 800fb38:	69ab      	ldr	r3, [r5, #24]
 800fb3a:	b913      	cbnz	r3, 800fb42 <__swsetup_r+0x16>
 800fb3c:	4628      	mov	r0, r5
 800fb3e:	f000 f981 	bl	800fe44 <__sinit>
 800fb42:	4b2e      	ldr	r3, [pc, #184]	; (800fbfc <__swsetup_r+0xd0>)
 800fb44:	429c      	cmp	r4, r3
 800fb46:	d10f      	bne.n	800fb68 <__swsetup_r+0x3c>
 800fb48:	686c      	ldr	r4, [r5, #4]
 800fb4a:	89a3      	ldrh	r3, [r4, #12]
 800fb4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb50:	0719      	lsls	r1, r3, #28
 800fb52:	d42c      	bmi.n	800fbae <__swsetup_r+0x82>
 800fb54:	06dd      	lsls	r5, r3, #27
 800fb56:	d411      	bmi.n	800fb7c <__swsetup_r+0x50>
 800fb58:	2309      	movs	r3, #9
 800fb5a:	6033      	str	r3, [r6, #0]
 800fb5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fb60:	f04f 30ff 	mov.w	r0, #4294967295
 800fb64:	81a3      	strh	r3, [r4, #12]
 800fb66:	e03e      	b.n	800fbe6 <__swsetup_r+0xba>
 800fb68:	4b25      	ldr	r3, [pc, #148]	; (800fc00 <__swsetup_r+0xd4>)
 800fb6a:	429c      	cmp	r4, r3
 800fb6c:	d101      	bne.n	800fb72 <__swsetup_r+0x46>
 800fb6e:	68ac      	ldr	r4, [r5, #8]
 800fb70:	e7eb      	b.n	800fb4a <__swsetup_r+0x1e>
 800fb72:	4b24      	ldr	r3, [pc, #144]	; (800fc04 <__swsetup_r+0xd8>)
 800fb74:	429c      	cmp	r4, r3
 800fb76:	bf08      	it	eq
 800fb78:	68ec      	ldreq	r4, [r5, #12]
 800fb7a:	e7e6      	b.n	800fb4a <__swsetup_r+0x1e>
 800fb7c:	0758      	lsls	r0, r3, #29
 800fb7e:	d512      	bpl.n	800fba6 <__swsetup_r+0x7a>
 800fb80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb82:	b141      	cbz	r1, 800fb96 <__swsetup_r+0x6a>
 800fb84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb88:	4299      	cmp	r1, r3
 800fb8a:	d002      	beq.n	800fb92 <__swsetup_r+0x66>
 800fb8c:	4630      	mov	r0, r6
 800fb8e:	f7ff fb37 	bl	800f200 <_free_r>
 800fb92:	2300      	movs	r3, #0
 800fb94:	6363      	str	r3, [r4, #52]	; 0x34
 800fb96:	89a3      	ldrh	r3, [r4, #12]
 800fb98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fb9c:	81a3      	strh	r3, [r4, #12]
 800fb9e:	2300      	movs	r3, #0
 800fba0:	6063      	str	r3, [r4, #4]
 800fba2:	6923      	ldr	r3, [r4, #16]
 800fba4:	6023      	str	r3, [r4, #0]
 800fba6:	89a3      	ldrh	r3, [r4, #12]
 800fba8:	f043 0308 	orr.w	r3, r3, #8
 800fbac:	81a3      	strh	r3, [r4, #12]
 800fbae:	6923      	ldr	r3, [r4, #16]
 800fbb0:	b94b      	cbnz	r3, 800fbc6 <__swsetup_r+0x9a>
 800fbb2:	89a3      	ldrh	r3, [r4, #12]
 800fbb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fbb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbbc:	d003      	beq.n	800fbc6 <__swsetup_r+0x9a>
 800fbbe:	4621      	mov	r1, r4
 800fbc0:	4630      	mov	r0, r6
 800fbc2:	f000 fa05 	bl	800ffd0 <__smakebuf_r>
 800fbc6:	89a0      	ldrh	r0, [r4, #12]
 800fbc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fbcc:	f010 0301 	ands.w	r3, r0, #1
 800fbd0:	d00a      	beq.n	800fbe8 <__swsetup_r+0xbc>
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	60a3      	str	r3, [r4, #8]
 800fbd6:	6963      	ldr	r3, [r4, #20]
 800fbd8:	425b      	negs	r3, r3
 800fbda:	61a3      	str	r3, [r4, #24]
 800fbdc:	6923      	ldr	r3, [r4, #16]
 800fbde:	b943      	cbnz	r3, 800fbf2 <__swsetup_r+0xc6>
 800fbe0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fbe4:	d1ba      	bne.n	800fb5c <__swsetup_r+0x30>
 800fbe6:	bd70      	pop	{r4, r5, r6, pc}
 800fbe8:	0781      	lsls	r1, r0, #30
 800fbea:	bf58      	it	pl
 800fbec:	6963      	ldrpl	r3, [r4, #20]
 800fbee:	60a3      	str	r3, [r4, #8]
 800fbf0:	e7f4      	b.n	800fbdc <__swsetup_r+0xb0>
 800fbf2:	2000      	movs	r0, #0
 800fbf4:	e7f7      	b.n	800fbe6 <__swsetup_r+0xba>
 800fbf6:	bf00      	nop
 800fbf8:	20000044 	.word	0x20000044
 800fbfc:	080130ac 	.word	0x080130ac
 800fc00:	080130cc 	.word	0x080130cc
 800fc04:	0801308c 	.word	0x0801308c

0800fc08 <abort>:
 800fc08:	2006      	movs	r0, #6
 800fc0a:	b508      	push	{r3, lr}
 800fc0c:	f000 fa50 	bl	80100b0 <raise>
 800fc10:	2001      	movs	r0, #1
 800fc12:	f7f8 faf4 	bl	80081fe <_exit>
	...

0800fc18 <__sflush_r>:
 800fc18:	898a      	ldrh	r2, [r1, #12]
 800fc1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc1c:	4605      	mov	r5, r0
 800fc1e:	0710      	lsls	r0, r2, #28
 800fc20:	460c      	mov	r4, r1
 800fc22:	d457      	bmi.n	800fcd4 <__sflush_r+0xbc>
 800fc24:	684b      	ldr	r3, [r1, #4]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	dc04      	bgt.n	800fc34 <__sflush_r+0x1c>
 800fc2a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	dc01      	bgt.n	800fc34 <__sflush_r+0x1c>
 800fc30:	2000      	movs	r0, #0
 800fc32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc36:	2e00      	cmp	r6, #0
 800fc38:	d0fa      	beq.n	800fc30 <__sflush_r+0x18>
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fc40:	682f      	ldr	r7, [r5, #0]
 800fc42:	602b      	str	r3, [r5, #0]
 800fc44:	d032      	beq.n	800fcac <__sflush_r+0x94>
 800fc46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fc48:	89a3      	ldrh	r3, [r4, #12]
 800fc4a:	075a      	lsls	r2, r3, #29
 800fc4c:	d505      	bpl.n	800fc5a <__sflush_r+0x42>
 800fc4e:	6863      	ldr	r3, [r4, #4]
 800fc50:	1ac0      	subs	r0, r0, r3
 800fc52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc54:	b10b      	cbz	r3, 800fc5a <__sflush_r+0x42>
 800fc56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fc58:	1ac0      	subs	r0, r0, r3
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	4602      	mov	r2, r0
 800fc5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc60:	4628      	mov	r0, r5
 800fc62:	6a21      	ldr	r1, [r4, #32]
 800fc64:	47b0      	blx	r6
 800fc66:	1c43      	adds	r3, r0, #1
 800fc68:	89a3      	ldrh	r3, [r4, #12]
 800fc6a:	d106      	bne.n	800fc7a <__sflush_r+0x62>
 800fc6c:	6829      	ldr	r1, [r5, #0]
 800fc6e:	291d      	cmp	r1, #29
 800fc70:	d82c      	bhi.n	800fccc <__sflush_r+0xb4>
 800fc72:	4a29      	ldr	r2, [pc, #164]	; (800fd18 <__sflush_r+0x100>)
 800fc74:	40ca      	lsrs	r2, r1
 800fc76:	07d6      	lsls	r6, r2, #31
 800fc78:	d528      	bpl.n	800fccc <__sflush_r+0xb4>
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	6062      	str	r2, [r4, #4]
 800fc7e:	6922      	ldr	r2, [r4, #16]
 800fc80:	04d9      	lsls	r1, r3, #19
 800fc82:	6022      	str	r2, [r4, #0]
 800fc84:	d504      	bpl.n	800fc90 <__sflush_r+0x78>
 800fc86:	1c42      	adds	r2, r0, #1
 800fc88:	d101      	bne.n	800fc8e <__sflush_r+0x76>
 800fc8a:	682b      	ldr	r3, [r5, #0]
 800fc8c:	b903      	cbnz	r3, 800fc90 <__sflush_r+0x78>
 800fc8e:	6560      	str	r0, [r4, #84]	; 0x54
 800fc90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc92:	602f      	str	r7, [r5, #0]
 800fc94:	2900      	cmp	r1, #0
 800fc96:	d0cb      	beq.n	800fc30 <__sflush_r+0x18>
 800fc98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc9c:	4299      	cmp	r1, r3
 800fc9e:	d002      	beq.n	800fca6 <__sflush_r+0x8e>
 800fca0:	4628      	mov	r0, r5
 800fca2:	f7ff faad 	bl	800f200 <_free_r>
 800fca6:	2000      	movs	r0, #0
 800fca8:	6360      	str	r0, [r4, #52]	; 0x34
 800fcaa:	e7c2      	b.n	800fc32 <__sflush_r+0x1a>
 800fcac:	6a21      	ldr	r1, [r4, #32]
 800fcae:	2301      	movs	r3, #1
 800fcb0:	4628      	mov	r0, r5
 800fcb2:	47b0      	blx	r6
 800fcb4:	1c41      	adds	r1, r0, #1
 800fcb6:	d1c7      	bne.n	800fc48 <__sflush_r+0x30>
 800fcb8:	682b      	ldr	r3, [r5, #0]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d0c4      	beq.n	800fc48 <__sflush_r+0x30>
 800fcbe:	2b1d      	cmp	r3, #29
 800fcc0:	d001      	beq.n	800fcc6 <__sflush_r+0xae>
 800fcc2:	2b16      	cmp	r3, #22
 800fcc4:	d101      	bne.n	800fcca <__sflush_r+0xb2>
 800fcc6:	602f      	str	r7, [r5, #0]
 800fcc8:	e7b2      	b.n	800fc30 <__sflush_r+0x18>
 800fcca:	89a3      	ldrh	r3, [r4, #12]
 800fccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcd0:	81a3      	strh	r3, [r4, #12]
 800fcd2:	e7ae      	b.n	800fc32 <__sflush_r+0x1a>
 800fcd4:	690f      	ldr	r7, [r1, #16]
 800fcd6:	2f00      	cmp	r7, #0
 800fcd8:	d0aa      	beq.n	800fc30 <__sflush_r+0x18>
 800fcda:	0793      	lsls	r3, r2, #30
 800fcdc:	bf18      	it	ne
 800fcde:	2300      	movne	r3, #0
 800fce0:	680e      	ldr	r6, [r1, #0]
 800fce2:	bf08      	it	eq
 800fce4:	694b      	ldreq	r3, [r1, #20]
 800fce6:	1bf6      	subs	r6, r6, r7
 800fce8:	600f      	str	r7, [r1, #0]
 800fcea:	608b      	str	r3, [r1, #8]
 800fcec:	2e00      	cmp	r6, #0
 800fcee:	dd9f      	ble.n	800fc30 <__sflush_r+0x18>
 800fcf0:	4633      	mov	r3, r6
 800fcf2:	463a      	mov	r2, r7
 800fcf4:	4628      	mov	r0, r5
 800fcf6:	6a21      	ldr	r1, [r4, #32]
 800fcf8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800fcfc:	47e0      	blx	ip
 800fcfe:	2800      	cmp	r0, #0
 800fd00:	dc06      	bgt.n	800fd10 <__sflush_r+0xf8>
 800fd02:	89a3      	ldrh	r3, [r4, #12]
 800fd04:	f04f 30ff 	mov.w	r0, #4294967295
 800fd08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd0c:	81a3      	strh	r3, [r4, #12]
 800fd0e:	e790      	b.n	800fc32 <__sflush_r+0x1a>
 800fd10:	4407      	add	r7, r0
 800fd12:	1a36      	subs	r6, r6, r0
 800fd14:	e7ea      	b.n	800fcec <__sflush_r+0xd4>
 800fd16:	bf00      	nop
 800fd18:	20400001 	.word	0x20400001

0800fd1c <_fflush_r>:
 800fd1c:	b538      	push	{r3, r4, r5, lr}
 800fd1e:	690b      	ldr	r3, [r1, #16]
 800fd20:	4605      	mov	r5, r0
 800fd22:	460c      	mov	r4, r1
 800fd24:	b913      	cbnz	r3, 800fd2c <_fflush_r+0x10>
 800fd26:	2500      	movs	r5, #0
 800fd28:	4628      	mov	r0, r5
 800fd2a:	bd38      	pop	{r3, r4, r5, pc}
 800fd2c:	b118      	cbz	r0, 800fd36 <_fflush_r+0x1a>
 800fd2e:	6983      	ldr	r3, [r0, #24]
 800fd30:	b90b      	cbnz	r3, 800fd36 <_fflush_r+0x1a>
 800fd32:	f000 f887 	bl	800fe44 <__sinit>
 800fd36:	4b14      	ldr	r3, [pc, #80]	; (800fd88 <_fflush_r+0x6c>)
 800fd38:	429c      	cmp	r4, r3
 800fd3a:	d11b      	bne.n	800fd74 <_fflush_r+0x58>
 800fd3c:	686c      	ldr	r4, [r5, #4]
 800fd3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d0ef      	beq.n	800fd26 <_fflush_r+0xa>
 800fd46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fd48:	07d0      	lsls	r0, r2, #31
 800fd4a:	d404      	bmi.n	800fd56 <_fflush_r+0x3a>
 800fd4c:	0599      	lsls	r1, r3, #22
 800fd4e:	d402      	bmi.n	800fd56 <_fflush_r+0x3a>
 800fd50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd52:	f000 f915 	bl	800ff80 <__retarget_lock_acquire_recursive>
 800fd56:	4628      	mov	r0, r5
 800fd58:	4621      	mov	r1, r4
 800fd5a:	f7ff ff5d 	bl	800fc18 <__sflush_r>
 800fd5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd60:	4605      	mov	r5, r0
 800fd62:	07da      	lsls	r2, r3, #31
 800fd64:	d4e0      	bmi.n	800fd28 <_fflush_r+0xc>
 800fd66:	89a3      	ldrh	r3, [r4, #12]
 800fd68:	059b      	lsls	r3, r3, #22
 800fd6a:	d4dd      	bmi.n	800fd28 <_fflush_r+0xc>
 800fd6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd6e:	f000 f908 	bl	800ff82 <__retarget_lock_release_recursive>
 800fd72:	e7d9      	b.n	800fd28 <_fflush_r+0xc>
 800fd74:	4b05      	ldr	r3, [pc, #20]	; (800fd8c <_fflush_r+0x70>)
 800fd76:	429c      	cmp	r4, r3
 800fd78:	d101      	bne.n	800fd7e <_fflush_r+0x62>
 800fd7a:	68ac      	ldr	r4, [r5, #8]
 800fd7c:	e7df      	b.n	800fd3e <_fflush_r+0x22>
 800fd7e:	4b04      	ldr	r3, [pc, #16]	; (800fd90 <_fflush_r+0x74>)
 800fd80:	429c      	cmp	r4, r3
 800fd82:	bf08      	it	eq
 800fd84:	68ec      	ldreq	r4, [r5, #12]
 800fd86:	e7da      	b.n	800fd3e <_fflush_r+0x22>
 800fd88:	080130ac 	.word	0x080130ac
 800fd8c:	080130cc 	.word	0x080130cc
 800fd90:	0801308c 	.word	0x0801308c

0800fd94 <std>:
 800fd94:	2300      	movs	r3, #0
 800fd96:	b510      	push	{r4, lr}
 800fd98:	4604      	mov	r4, r0
 800fd9a:	e9c0 3300 	strd	r3, r3, [r0]
 800fd9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fda2:	6083      	str	r3, [r0, #8]
 800fda4:	8181      	strh	r1, [r0, #12]
 800fda6:	6643      	str	r3, [r0, #100]	; 0x64
 800fda8:	81c2      	strh	r2, [r0, #14]
 800fdaa:	6183      	str	r3, [r0, #24]
 800fdac:	4619      	mov	r1, r3
 800fdae:	2208      	movs	r2, #8
 800fdb0:	305c      	adds	r0, #92	; 0x5c
 800fdb2:	f7fd fb63 	bl	800d47c <memset>
 800fdb6:	4b05      	ldr	r3, [pc, #20]	; (800fdcc <std+0x38>)
 800fdb8:	6224      	str	r4, [r4, #32]
 800fdba:	6263      	str	r3, [r4, #36]	; 0x24
 800fdbc:	4b04      	ldr	r3, [pc, #16]	; (800fdd0 <std+0x3c>)
 800fdbe:	62a3      	str	r3, [r4, #40]	; 0x28
 800fdc0:	4b04      	ldr	r3, [pc, #16]	; (800fdd4 <std+0x40>)
 800fdc2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fdc4:	4b04      	ldr	r3, [pc, #16]	; (800fdd8 <std+0x44>)
 800fdc6:	6323      	str	r3, [r4, #48]	; 0x30
 800fdc8:	bd10      	pop	{r4, pc}
 800fdca:	bf00      	nop
 800fdcc:	080100e9 	.word	0x080100e9
 800fdd0:	0801010b 	.word	0x0801010b
 800fdd4:	08010143 	.word	0x08010143
 800fdd8:	08010167 	.word	0x08010167

0800fddc <_cleanup_r>:
 800fddc:	4901      	ldr	r1, [pc, #4]	; (800fde4 <_cleanup_r+0x8>)
 800fdde:	f000 b8af 	b.w	800ff40 <_fwalk_reent>
 800fde2:	bf00      	nop
 800fde4:	0800fd1d 	.word	0x0800fd1d

0800fde8 <__sfmoreglue>:
 800fde8:	2268      	movs	r2, #104	; 0x68
 800fdea:	b570      	push	{r4, r5, r6, lr}
 800fdec:	1e4d      	subs	r5, r1, #1
 800fdee:	4355      	muls	r5, r2
 800fdf0:	460e      	mov	r6, r1
 800fdf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fdf6:	f7ff fa6b 	bl	800f2d0 <_malloc_r>
 800fdfa:	4604      	mov	r4, r0
 800fdfc:	b140      	cbz	r0, 800fe10 <__sfmoreglue+0x28>
 800fdfe:	2100      	movs	r1, #0
 800fe00:	e9c0 1600 	strd	r1, r6, [r0]
 800fe04:	300c      	adds	r0, #12
 800fe06:	60a0      	str	r0, [r4, #8]
 800fe08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fe0c:	f7fd fb36 	bl	800d47c <memset>
 800fe10:	4620      	mov	r0, r4
 800fe12:	bd70      	pop	{r4, r5, r6, pc}

0800fe14 <__sfp_lock_acquire>:
 800fe14:	4801      	ldr	r0, [pc, #4]	; (800fe1c <__sfp_lock_acquire+0x8>)
 800fe16:	f000 b8b3 	b.w	800ff80 <__retarget_lock_acquire_recursive>
 800fe1a:	bf00      	nop
 800fe1c:	20000815 	.word	0x20000815

0800fe20 <__sfp_lock_release>:
 800fe20:	4801      	ldr	r0, [pc, #4]	; (800fe28 <__sfp_lock_release+0x8>)
 800fe22:	f000 b8ae 	b.w	800ff82 <__retarget_lock_release_recursive>
 800fe26:	bf00      	nop
 800fe28:	20000815 	.word	0x20000815

0800fe2c <__sinit_lock_acquire>:
 800fe2c:	4801      	ldr	r0, [pc, #4]	; (800fe34 <__sinit_lock_acquire+0x8>)
 800fe2e:	f000 b8a7 	b.w	800ff80 <__retarget_lock_acquire_recursive>
 800fe32:	bf00      	nop
 800fe34:	20000816 	.word	0x20000816

0800fe38 <__sinit_lock_release>:
 800fe38:	4801      	ldr	r0, [pc, #4]	; (800fe40 <__sinit_lock_release+0x8>)
 800fe3a:	f000 b8a2 	b.w	800ff82 <__retarget_lock_release_recursive>
 800fe3e:	bf00      	nop
 800fe40:	20000816 	.word	0x20000816

0800fe44 <__sinit>:
 800fe44:	b510      	push	{r4, lr}
 800fe46:	4604      	mov	r4, r0
 800fe48:	f7ff fff0 	bl	800fe2c <__sinit_lock_acquire>
 800fe4c:	69a3      	ldr	r3, [r4, #24]
 800fe4e:	b11b      	cbz	r3, 800fe58 <__sinit+0x14>
 800fe50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe54:	f7ff bff0 	b.w	800fe38 <__sinit_lock_release>
 800fe58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fe5c:	6523      	str	r3, [r4, #80]	; 0x50
 800fe5e:	4b13      	ldr	r3, [pc, #76]	; (800feac <__sinit+0x68>)
 800fe60:	4a13      	ldr	r2, [pc, #76]	; (800feb0 <__sinit+0x6c>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	62a2      	str	r2, [r4, #40]	; 0x28
 800fe66:	42a3      	cmp	r3, r4
 800fe68:	bf08      	it	eq
 800fe6a:	2301      	moveq	r3, #1
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	bf08      	it	eq
 800fe70:	61a3      	streq	r3, [r4, #24]
 800fe72:	f000 f81f 	bl	800feb4 <__sfp>
 800fe76:	6060      	str	r0, [r4, #4]
 800fe78:	4620      	mov	r0, r4
 800fe7a:	f000 f81b 	bl	800feb4 <__sfp>
 800fe7e:	60a0      	str	r0, [r4, #8]
 800fe80:	4620      	mov	r0, r4
 800fe82:	f000 f817 	bl	800feb4 <__sfp>
 800fe86:	2200      	movs	r2, #0
 800fe88:	2104      	movs	r1, #4
 800fe8a:	60e0      	str	r0, [r4, #12]
 800fe8c:	6860      	ldr	r0, [r4, #4]
 800fe8e:	f7ff ff81 	bl	800fd94 <std>
 800fe92:	2201      	movs	r2, #1
 800fe94:	2109      	movs	r1, #9
 800fe96:	68a0      	ldr	r0, [r4, #8]
 800fe98:	f7ff ff7c 	bl	800fd94 <std>
 800fe9c:	2202      	movs	r2, #2
 800fe9e:	2112      	movs	r1, #18
 800fea0:	68e0      	ldr	r0, [r4, #12]
 800fea2:	f7ff ff77 	bl	800fd94 <std>
 800fea6:	2301      	movs	r3, #1
 800fea8:	61a3      	str	r3, [r4, #24]
 800feaa:	e7d1      	b.n	800fe50 <__sinit+0xc>
 800feac:	08012d10 	.word	0x08012d10
 800feb0:	0800fddd 	.word	0x0800fddd

0800feb4 <__sfp>:
 800feb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feb6:	4607      	mov	r7, r0
 800feb8:	f7ff ffac 	bl	800fe14 <__sfp_lock_acquire>
 800febc:	4b1e      	ldr	r3, [pc, #120]	; (800ff38 <__sfp+0x84>)
 800febe:	681e      	ldr	r6, [r3, #0]
 800fec0:	69b3      	ldr	r3, [r6, #24]
 800fec2:	b913      	cbnz	r3, 800feca <__sfp+0x16>
 800fec4:	4630      	mov	r0, r6
 800fec6:	f7ff ffbd 	bl	800fe44 <__sinit>
 800feca:	3648      	adds	r6, #72	; 0x48
 800fecc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fed0:	3b01      	subs	r3, #1
 800fed2:	d503      	bpl.n	800fedc <__sfp+0x28>
 800fed4:	6833      	ldr	r3, [r6, #0]
 800fed6:	b30b      	cbz	r3, 800ff1c <__sfp+0x68>
 800fed8:	6836      	ldr	r6, [r6, #0]
 800feda:	e7f7      	b.n	800fecc <__sfp+0x18>
 800fedc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fee0:	b9d5      	cbnz	r5, 800ff18 <__sfp+0x64>
 800fee2:	4b16      	ldr	r3, [pc, #88]	; (800ff3c <__sfp+0x88>)
 800fee4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fee8:	60e3      	str	r3, [r4, #12]
 800feea:	6665      	str	r5, [r4, #100]	; 0x64
 800feec:	f000 f847 	bl	800ff7e <__retarget_lock_init_recursive>
 800fef0:	f7ff ff96 	bl	800fe20 <__sfp_lock_release>
 800fef4:	2208      	movs	r2, #8
 800fef6:	4629      	mov	r1, r5
 800fef8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fefc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ff00:	6025      	str	r5, [r4, #0]
 800ff02:	61a5      	str	r5, [r4, #24]
 800ff04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ff08:	f7fd fab8 	bl	800d47c <memset>
 800ff0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ff10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ff14:	4620      	mov	r0, r4
 800ff16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff18:	3468      	adds	r4, #104	; 0x68
 800ff1a:	e7d9      	b.n	800fed0 <__sfp+0x1c>
 800ff1c:	2104      	movs	r1, #4
 800ff1e:	4638      	mov	r0, r7
 800ff20:	f7ff ff62 	bl	800fde8 <__sfmoreglue>
 800ff24:	4604      	mov	r4, r0
 800ff26:	6030      	str	r0, [r6, #0]
 800ff28:	2800      	cmp	r0, #0
 800ff2a:	d1d5      	bne.n	800fed8 <__sfp+0x24>
 800ff2c:	f7ff ff78 	bl	800fe20 <__sfp_lock_release>
 800ff30:	230c      	movs	r3, #12
 800ff32:	603b      	str	r3, [r7, #0]
 800ff34:	e7ee      	b.n	800ff14 <__sfp+0x60>
 800ff36:	bf00      	nop
 800ff38:	08012d10 	.word	0x08012d10
 800ff3c:	ffff0001 	.word	0xffff0001

0800ff40 <_fwalk_reent>:
 800ff40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff44:	4606      	mov	r6, r0
 800ff46:	4688      	mov	r8, r1
 800ff48:	2700      	movs	r7, #0
 800ff4a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ff4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ff52:	f1b9 0901 	subs.w	r9, r9, #1
 800ff56:	d505      	bpl.n	800ff64 <_fwalk_reent+0x24>
 800ff58:	6824      	ldr	r4, [r4, #0]
 800ff5a:	2c00      	cmp	r4, #0
 800ff5c:	d1f7      	bne.n	800ff4e <_fwalk_reent+0xe>
 800ff5e:	4638      	mov	r0, r7
 800ff60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff64:	89ab      	ldrh	r3, [r5, #12]
 800ff66:	2b01      	cmp	r3, #1
 800ff68:	d907      	bls.n	800ff7a <_fwalk_reent+0x3a>
 800ff6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ff6e:	3301      	adds	r3, #1
 800ff70:	d003      	beq.n	800ff7a <_fwalk_reent+0x3a>
 800ff72:	4629      	mov	r1, r5
 800ff74:	4630      	mov	r0, r6
 800ff76:	47c0      	blx	r8
 800ff78:	4307      	orrs	r7, r0
 800ff7a:	3568      	adds	r5, #104	; 0x68
 800ff7c:	e7e9      	b.n	800ff52 <_fwalk_reent+0x12>

0800ff7e <__retarget_lock_init_recursive>:
 800ff7e:	4770      	bx	lr

0800ff80 <__retarget_lock_acquire_recursive>:
 800ff80:	4770      	bx	lr

0800ff82 <__retarget_lock_release_recursive>:
 800ff82:	4770      	bx	lr

0800ff84 <__swhatbuf_r>:
 800ff84:	b570      	push	{r4, r5, r6, lr}
 800ff86:	460e      	mov	r6, r1
 800ff88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff8c:	4614      	mov	r4, r2
 800ff8e:	2900      	cmp	r1, #0
 800ff90:	461d      	mov	r5, r3
 800ff92:	b096      	sub	sp, #88	; 0x58
 800ff94:	da08      	bge.n	800ffa8 <__swhatbuf_r+0x24>
 800ff96:	2200      	movs	r2, #0
 800ff98:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ff9c:	602a      	str	r2, [r5, #0]
 800ff9e:	061a      	lsls	r2, r3, #24
 800ffa0:	d410      	bmi.n	800ffc4 <__swhatbuf_r+0x40>
 800ffa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ffa6:	e00e      	b.n	800ffc6 <__swhatbuf_r+0x42>
 800ffa8:	466a      	mov	r2, sp
 800ffaa:	f000 f903 	bl	80101b4 <_fstat_r>
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	dbf1      	blt.n	800ff96 <__swhatbuf_r+0x12>
 800ffb2:	9a01      	ldr	r2, [sp, #4]
 800ffb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ffb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ffbc:	425a      	negs	r2, r3
 800ffbe:	415a      	adcs	r2, r3
 800ffc0:	602a      	str	r2, [r5, #0]
 800ffc2:	e7ee      	b.n	800ffa2 <__swhatbuf_r+0x1e>
 800ffc4:	2340      	movs	r3, #64	; 0x40
 800ffc6:	2000      	movs	r0, #0
 800ffc8:	6023      	str	r3, [r4, #0]
 800ffca:	b016      	add	sp, #88	; 0x58
 800ffcc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ffd0 <__smakebuf_r>:
 800ffd0:	898b      	ldrh	r3, [r1, #12]
 800ffd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ffd4:	079d      	lsls	r5, r3, #30
 800ffd6:	4606      	mov	r6, r0
 800ffd8:	460c      	mov	r4, r1
 800ffda:	d507      	bpl.n	800ffec <__smakebuf_r+0x1c>
 800ffdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ffe0:	6023      	str	r3, [r4, #0]
 800ffe2:	6123      	str	r3, [r4, #16]
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	6163      	str	r3, [r4, #20]
 800ffe8:	b002      	add	sp, #8
 800ffea:	bd70      	pop	{r4, r5, r6, pc}
 800ffec:	466a      	mov	r2, sp
 800ffee:	ab01      	add	r3, sp, #4
 800fff0:	f7ff ffc8 	bl	800ff84 <__swhatbuf_r>
 800fff4:	9900      	ldr	r1, [sp, #0]
 800fff6:	4605      	mov	r5, r0
 800fff8:	4630      	mov	r0, r6
 800fffa:	f7ff f969 	bl	800f2d0 <_malloc_r>
 800fffe:	b948      	cbnz	r0, 8010014 <__smakebuf_r+0x44>
 8010000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010004:	059a      	lsls	r2, r3, #22
 8010006:	d4ef      	bmi.n	800ffe8 <__smakebuf_r+0x18>
 8010008:	f023 0303 	bic.w	r3, r3, #3
 801000c:	f043 0302 	orr.w	r3, r3, #2
 8010010:	81a3      	strh	r3, [r4, #12]
 8010012:	e7e3      	b.n	800ffdc <__smakebuf_r+0xc>
 8010014:	4b0d      	ldr	r3, [pc, #52]	; (801004c <__smakebuf_r+0x7c>)
 8010016:	62b3      	str	r3, [r6, #40]	; 0x28
 8010018:	89a3      	ldrh	r3, [r4, #12]
 801001a:	6020      	str	r0, [r4, #0]
 801001c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010020:	81a3      	strh	r3, [r4, #12]
 8010022:	9b00      	ldr	r3, [sp, #0]
 8010024:	6120      	str	r0, [r4, #16]
 8010026:	6163      	str	r3, [r4, #20]
 8010028:	9b01      	ldr	r3, [sp, #4]
 801002a:	b15b      	cbz	r3, 8010044 <__smakebuf_r+0x74>
 801002c:	4630      	mov	r0, r6
 801002e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010032:	f000 f8d1 	bl	80101d8 <_isatty_r>
 8010036:	b128      	cbz	r0, 8010044 <__smakebuf_r+0x74>
 8010038:	89a3      	ldrh	r3, [r4, #12]
 801003a:	f023 0303 	bic.w	r3, r3, #3
 801003e:	f043 0301 	orr.w	r3, r3, #1
 8010042:	81a3      	strh	r3, [r4, #12]
 8010044:	89a0      	ldrh	r0, [r4, #12]
 8010046:	4305      	orrs	r5, r0
 8010048:	81a5      	strh	r5, [r4, #12]
 801004a:	e7cd      	b.n	800ffe8 <__smakebuf_r+0x18>
 801004c:	0800fddd 	.word	0x0800fddd

08010050 <_malloc_usable_size_r>:
 8010050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010054:	1f18      	subs	r0, r3, #4
 8010056:	2b00      	cmp	r3, #0
 8010058:	bfbc      	itt	lt
 801005a:	580b      	ldrlt	r3, [r1, r0]
 801005c:	18c0      	addlt	r0, r0, r3
 801005e:	4770      	bx	lr

08010060 <_raise_r>:
 8010060:	291f      	cmp	r1, #31
 8010062:	b538      	push	{r3, r4, r5, lr}
 8010064:	4604      	mov	r4, r0
 8010066:	460d      	mov	r5, r1
 8010068:	d904      	bls.n	8010074 <_raise_r+0x14>
 801006a:	2316      	movs	r3, #22
 801006c:	6003      	str	r3, [r0, #0]
 801006e:	f04f 30ff 	mov.w	r0, #4294967295
 8010072:	bd38      	pop	{r3, r4, r5, pc}
 8010074:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010076:	b112      	cbz	r2, 801007e <_raise_r+0x1e>
 8010078:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801007c:	b94b      	cbnz	r3, 8010092 <_raise_r+0x32>
 801007e:	4620      	mov	r0, r4
 8010080:	f000 f830 	bl	80100e4 <_getpid_r>
 8010084:	462a      	mov	r2, r5
 8010086:	4601      	mov	r1, r0
 8010088:	4620      	mov	r0, r4
 801008a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801008e:	f000 b817 	b.w	80100c0 <_kill_r>
 8010092:	2b01      	cmp	r3, #1
 8010094:	d00a      	beq.n	80100ac <_raise_r+0x4c>
 8010096:	1c59      	adds	r1, r3, #1
 8010098:	d103      	bne.n	80100a2 <_raise_r+0x42>
 801009a:	2316      	movs	r3, #22
 801009c:	6003      	str	r3, [r0, #0]
 801009e:	2001      	movs	r0, #1
 80100a0:	e7e7      	b.n	8010072 <_raise_r+0x12>
 80100a2:	2400      	movs	r4, #0
 80100a4:	4628      	mov	r0, r5
 80100a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80100aa:	4798      	blx	r3
 80100ac:	2000      	movs	r0, #0
 80100ae:	e7e0      	b.n	8010072 <_raise_r+0x12>

080100b0 <raise>:
 80100b0:	4b02      	ldr	r3, [pc, #8]	; (80100bc <raise+0xc>)
 80100b2:	4601      	mov	r1, r0
 80100b4:	6818      	ldr	r0, [r3, #0]
 80100b6:	f7ff bfd3 	b.w	8010060 <_raise_r>
 80100ba:	bf00      	nop
 80100bc:	20000044 	.word	0x20000044

080100c0 <_kill_r>:
 80100c0:	b538      	push	{r3, r4, r5, lr}
 80100c2:	2300      	movs	r3, #0
 80100c4:	4d06      	ldr	r5, [pc, #24]	; (80100e0 <_kill_r+0x20>)
 80100c6:	4604      	mov	r4, r0
 80100c8:	4608      	mov	r0, r1
 80100ca:	4611      	mov	r1, r2
 80100cc:	602b      	str	r3, [r5, #0]
 80100ce:	f7f8 f886 	bl	80081de <_kill>
 80100d2:	1c43      	adds	r3, r0, #1
 80100d4:	d102      	bne.n	80100dc <_kill_r+0x1c>
 80100d6:	682b      	ldr	r3, [r5, #0]
 80100d8:	b103      	cbz	r3, 80100dc <_kill_r+0x1c>
 80100da:	6023      	str	r3, [r4, #0]
 80100dc:	bd38      	pop	{r3, r4, r5, pc}
 80100de:	bf00      	nop
 80100e0:	20000810 	.word	0x20000810

080100e4 <_getpid_r>:
 80100e4:	f7f8 b874 	b.w	80081d0 <_getpid>

080100e8 <__sread>:
 80100e8:	b510      	push	{r4, lr}
 80100ea:	460c      	mov	r4, r1
 80100ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100f0:	f000 f894 	bl	801021c <_read_r>
 80100f4:	2800      	cmp	r0, #0
 80100f6:	bfab      	itete	ge
 80100f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80100fa:	89a3      	ldrhlt	r3, [r4, #12]
 80100fc:	181b      	addge	r3, r3, r0
 80100fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010102:	bfac      	ite	ge
 8010104:	6563      	strge	r3, [r4, #84]	; 0x54
 8010106:	81a3      	strhlt	r3, [r4, #12]
 8010108:	bd10      	pop	{r4, pc}

0801010a <__swrite>:
 801010a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801010e:	461f      	mov	r7, r3
 8010110:	898b      	ldrh	r3, [r1, #12]
 8010112:	4605      	mov	r5, r0
 8010114:	05db      	lsls	r3, r3, #23
 8010116:	460c      	mov	r4, r1
 8010118:	4616      	mov	r6, r2
 801011a:	d505      	bpl.n	8010128 <__swrite+0x1e>
 801011c:	2302      	movs	r3, #2
 801011e:	2200      	movs	r2, #0
 8010120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010124:	f000 f868 	bl	80101f8 <_lseek_r>
 8010128:	89a3      	ldrh	r3, [r4, #12]
 801012a:	4632      	mov	r2, r6
 801012c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010130:	81a3      	strh	r3, [r4, #12]
 8010132:	4628      	mov	r0, r5
 8010134:	463b      	mov	r3, r7
 8010136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801013a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801013e:	f000 b817 	b.w	8010170 <_write_r>

08010142 <__sseek>:
 8010142:	b510      	push	{r4, lr}
 8010144:	460c      	mov	r4, r1
 8010146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801014a:	f000 f855 	bl	80101f8 <_lseek_r>
 801014e:	1c43      	adds	r3, r0, #1
 8010150:	89a3      	ldrh	r3, [r4, #12]
 8010152:	bf15      	itete	ne
 8010154:	6560      	strne	r0, [r4, #84]	; 0x54
 8010156:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801015a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801015e:	81a3      	strheq	r3, [r4, #12]
 8010160:	bf18      	it	ne
 8010162:	81a3      	strhne	r3, [r4, #12]
 8010164:	bd10      	pop	{r4, pc}

08010166 <__sclose>:
 8010166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801016a:	f000 b813 	b.w	8010194 <_close_r>
	...

08010170 <_write_r>:
 8010170:	b538      	push	{r3, r4, r5, lr}
 8010172:	4604      	mov	r4, r0
 8010174:	4608      	mov	r0, r1
 8010176:	4611      	mov	r1, r2
 8010178:	2200      	movs	r2, #0
 801017a:	4d05      	ldr	r5, [pc, #20]	; (8010190 <_write_r+0x20>)
 801017c:	602a      	str	r2, [r5, #0]
 801017e:	461a      	mov	r2, r3
 8010180:	f7f8 f864 	bl	800824c <_write>
 8010184:	1c43      	adds	r3, r0, #1
 8010186:	d102      	bne.n	801018e <_write_r+0x1e>
 8010188:	682b      	ldr	r3, [r5, #0]
 801018a:	b103      	cbz	r3, 801018e <_write_r+0x1e>
 801018c:	6023      	str	r3, [r4, #0]
 801018e:	bd38      	pop	{r3, r4, r5, pc}
 8010190:	20000810 	.word	0x20000810

08010194 <_close_r>:
 8010194:	b538      	push	{r3, r4, r5, lr}
 8010196:	2300      	movs	r3, #0
 8010198:	4d05      	ldr	r5, [pc, #20]	; (80101b0 <_close_r+0x1c>)
 801019a:	4604      	mov	r4, r0
 801019c:	4608      	mov	r0, r1
 801019e:	602b      	str	r3, [r5, #0]
 80101a0:	f7f8 f870 	bl	8008284 <_close>
 80101a4:	1c43      	adds	r3, r0, #1
 80101a6:	d102      	bne.n	80101ae <_close_r+0x1a>
 80101a8:	682b      	ldr	r3, [r5, #0]
 80101aa:	b103      	cbz	r3, 80101ae <_close_r+0x1a>
 80101ac:	6023      	str	r3, [r4, #0]
 80101ae:	bd38      	pop	{r3, r4, r5, pc}
 80101b0:	20000810 	.word	0x20000810

080101b4 <_fstat_r>:
 80101b4:	b538      	push	{r3, r4, r5, lr}
 80101b6:	2300      	movs	r3, #0
 80101b8:	4d06      	ldr	r5, [pc, #24]	; (80101d4 <_fstat_r+0x20>)
 80101ba:	4604      	mov	r4, r0
 80101bc:	4608      	mov	r0, r1
 80101be:	4611      	mov	r1, r2
 80101c0:	602b      	str	r3, [r5, #0]
 80101c2:	f7f8 f86a 	bl	800829a <_fstat>
 80101c6:	1c43      	adds	r3, r0, #1
 80101c8:	d102      	bne.n	80101d0 <_fstat_r+0x1c>
 80101ca:	682b      	ldr	r3, [r5, #0]
 80101cc:	b103      	cbz	r3, 80101d0 <_fstat_r+0x1c>
 80101ce:	6023      	str	r3, [r4, #0]
 80101d0:	bd38      	pop	{r3, r4, r5, pc}
 80101d2:	bf00      	nop
 80101d4:	20000810 	.word	0x20000810

080101d8 <_isatty_r>:
 80101d8:	b538      	push	{r3, r4, r5, lr}
 80101da:	2300      	movs	r3, #0
 80101dc:	4d05      	ldr	r5, [pc, #20]	; (80101f4 <_isatty_r+0x1c>)
 80101de:	4604      	mov	r4, r0
 80101e0:	4608      	mov	r0, r1
 80101e2:	602b      	str	r3, [r5, #0]
 80101e4:	f7f8 f868 	bl	80082b8 <_isatty>
 80101e8:	1c43      	adds	r3, r0, #1
 80101ea:	d102      	bne.n	80101f2 <_isatty_r+0x1a>
 80101ec:	682b      	ldr	r3, [r5, #0]
 80101ee:	b103      	cbz	r3, 80101f2 <_isatty_r+0x1a>
 80101f0:	6023      	str	r3, [r4, #0]
 80101f2:	bd38      	pop	{r3, r4, r5, pc}
 80101f4:	20000810 	.word	0x20000810

080101f8 <_lseek_r>:
 80101f8:	b538      	push	{r3, r4, r5, lr}
 80101fa:	4604      	mov	r4, r0
 80101fc:	4608      	mov	r0, r1
 80101fe:	4611      	mov	r1, r2
 8010200:	2200      	movs	r2, #0
 8010202:	4d05      	ldr	r5, [pc, #20]	; (8010218 <_lseek_r+0x20>)
 8010204:	602a      	str	r2, [r5, #0]
 8010206:	461a      	mov	r2, r3
 8010208:	f7f8 f860 	bl	80082cc <_lseek>
 801020c:	1c43      	adds	r3, r0, #1
 801020e:	d102      	bne.n	8010216 <_lseek_r+0x1e>
 8010210:	682b      	ldr	r3, [r5, #0]
 8010212:	b103      	cbz	r3, 8010216 <_lseek_r+0x1e>
 8010214:	6023      	str	r3, [r4, #0]
 8010216:	bd38      	pop	{r3, r4, r5, pc}
 8010218:	20000810 	.word	0x20000810

0801021c <_read_r>:
 801021c:	b538      	push	{r3, r4, r5, lr}
 801021e:	4604      	mov	r4, r0
 8010220:	4608      	mov	r0, r1
 8010222:	4611      	mov	r1, r2
 8010224:	2200      	movs	r2, #0
 8010226:	4d05      	ldr	r5, [pc, #20]	; (801023c <_read_r+0x20>)
 8010228:	602a      	str	r2, [r5, #0]
 801022a:	461a      	mov	r2, r3
 801022c:	f7f7 fff1 	bl	8008212 <_read>
 8010230:	1c43      	adds	r3, r0, #1
 8010232:	d102      	bne.n	801023a <_read_r+0x1e>
 8010234:	682b      	ldr	r3, [r5, #0]
 8010236:	b103      	cbz	r3, 801023a <_read_r+0x1e>
 8010238:	6023      	str	r3, [r4, #0]
 801023a:	bd38      	pop	{r3, r4, r5, pc}
 801023c:	20000810 	.word	0x20000810

08010240 <log>:
 8010240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010242:	4604      	mov	r4, r0
 8010244:	460d      	mov	r5, r1
 8010246:	f000 f853 	bl	80102f0 <__ieee754_log>
 801024a:	4622      	mov	r2, r4
 801024c:	4606      	mov	r6, r0
 801024e:	460f      	mov	r7, r1
 8010250:	462b      	mov	r3, r5
 8010252:	4620      	mov	r0, r4
 8010254:	4629      	mov	r1, r5
 8010256:	f7f0 fbd9 	bl	8000a0c <__aeabi_dcmpun>
 801025a:	b998      	cbnz	r0, 8010284 <log+0x44>
 801025c:	2200      	movs	r2, #0
 801025e:	2300      	movs	r3, #0
 8010260:	4620      	mov	r0, r4
 8010262:	4629      	mov	r1, r5
 8010264:	f7f0 fbc8 	bl	80009f8 <__aeabi_dcmpgt>
 8010268:	b960      	cbnz	r0, 8010284 <log+0x44>
 801026a:	2200      	movs	r2, #0
 801026c:	2300      	movs	r3, #0
 801026e:	4620      	mov	r0, r4
 8010270:	4629      	mov	r1, r5
 8010272:	f7f0 fb99 	bl	80009a8 <__aeabi_dcmpeq>
 8010276:	b140      	cbz	r0, 801028a <log+0x4a>
 8010278:	f7fd f8d6 	bl	800d428 <__errno>
 801027c:	2322      	movs	r3, #34	; 0x22
 801027e:	2600      	movs	r6, #0
 8010280:	4f06      	ldr	r7, [pc, #24]	; (801029c <log+0x5c>)
 8010282:	6003      	str	r3, [r0, #0]
 8010284:	4630      	mov	r0, r6
 8010286:	4639      	mov	r1, r7
 8010288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801028a:	f7fd f8cd 	bl	800d428 <__errno>
 801028e:	2321      	movs	r3, #33	; 0x21
 8010290:	6003      	str	r3, [r0, #0]
 8010292:	4803      	ldr	r0, [pc, #12]	; (80102a0 <log+0x60>)
 8010294:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010298:	f000 ba8c 	b.w	80107b4 <nan>
 801029c:	fff00000 	.word	0xfff00000
 80102a0:	08012f80 	.word	0x08012f80

080102a4 <sqrt>:
 80102a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102a6:	4606      	mov	r6, r0
 80102a8:	460f      	mov	r7, r1
 80102aa:	f000 f9d3 	bl	8010654 <__ieee754_sqrt>
 80102ae:	4632      	mov	r2, r6
 80102b0:	4604      	mov	r4, r0
 80102b2:	460d      	mov	r5, r1
 80102b4:	463b      	mov	r3, r7
 80102b6:	4630      	mov	r0, r6
 80102b8:	4639      	mov	r1, r7
 80102ba:	f7f0 fba7 	bl	8000a0c <__aeabi_dcmpun>
 80102be:	b990      	cbnz	r0, 80102e6 <sqrt+0x42>
 80102c0:	2200      	movs	r2, #0
 80102c2:	2300      	movs	r3, #0
 80102c4:	4630      	mov	r0, r6
 80102c6:	4639      	mov	r1, r7
 80102c8:	f7f0 fb78 	bl	80009bc <__aeabi_dcmplt>
 80102cc:	b158      	cbz	r0, 80102e6 <sqrt+0x42>
 80102ce:	f7fd f8ab 	bl	800d428 <__errno>
 80102d2:	2321      	movs	r3, #33	; 0x21
 80102d4:	2200      	movs	r2, #0
 80102d6:	6003      	str	r3, [r0, #0]
 80102d8:	2300      	movs	r3, #0
 80102da:	4610      	mov	r0, r2
 80102dc:	4619      	mov	r1, r3
 80102de:	f7f0 fa25 	bl	800072c <__aeabi_ddiv>
 80102e2:	4604      	mov	r4, r0
 80102e4:	460d      	mov	r5, r1
 80102e6:	4620      	mov	r0, r4
 80102e8:	4629      	mov	r1, r5
 80102ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102ec:	0000      	movs	r0, r0
	...

080102f0 <__ieee754_log>:
 80102f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102f4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80102f8:	4602      	mov	r2, r0
 80102fa:	460b      	mov	r3, r1
 80102fc:	460d      	mov	r5, r1
 80102fe:	b087      	sub	sp, #28
 8010300:	da24      	bge.n	801034c <__ieee754_log+0x5c>
 8010302:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8010306:	4304      	orrs	r4, r0
 8010308:	d108      	bne.n	801031c <__ieee754_log+0x2c>
 801030a:	2200      	movs	r2, #0
 801030c:	2300      	movs	r3, #0
 801030e:	2000      	movs	r0, #0
 8010310:	49cb      	ldr	r1, [pc, #812]	; (8010640 <__ieee754_log+0x350>)
 8010312:	f7f0 fa0b 	bl	800072c <__aeabi_ddiv>
 8010316:	b007      	add	sp, #28
 8010318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801031c:	2900      	cmp	r1, #0
 801031e:	da04      	bge.n	801032a <__ieee754_log+0x3a>
 8010320:	f7ef ff22 	bl	8000168 <__aeabi_dsub>
 8010324:	2200      	movs	r2, #0
 8010326:	2300      	movs	r3, #0
 8010328:	e7f3      	b.n	8010312 <__ieee754_log+0x22>
 801032a:	2200      	movs	r2, #0
 801032c:	4bc5      	ldr	r3, [pc, #788]	; (8010644 <__ieee754_log+0x354>)
 801032e:	f7f0 f8d3 	bl	80004d8 <__aeabi_dmul>
 8010332:	f06f 0635 	mvn.w	r6, #53	; 0x35
 8010336:	4602      	mov	r2, r0
 8010338:	460b      	mov	r3, r1
 801033a:	460d      	mov	r5, r1
 801033c:	49c2      	ldr	r1, [pc, #776]	; (8010648 <__ieee754_log+0x358>)
 801033e:	428d      	cmp	r5, r1
 8010340:	dd06      	ble.n	8010350 <__ieee754_log+0x60>
 8010342:	4610      	mov	r0, r2
 8010344:	4619      	mov	r1, r3
 8010346:	f7ef ff11 	bl	800016c <__adddf3>
 801034a:	e7e4      	b.n	8010316 <__ieee754_log+0x26>
 801034c:	2600      	movs	r6, #0
 801034e:	e7f5      	b.n	801033c <__ieee754_log+0x4c>
 8010350:	152c      	asrs	r4, r5, #20
 8010352:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8010356:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 801035a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801035e:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 8010362:	4426      	add	r6, r4
 8010364:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8010368:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 801036c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8010370:	ea41 0305 	orr.w	r3, r1, r5
 8010374:	4610      	mov	r0, r2
 8010376:	4619      	mov	r1, r3
 8010378:	2200      	movs	r2, #0
 801037a:	4bb4      	ldr	r3, [pc, #720]	; (801064c <__ieee754_log+0x35c>)
 801037c:	f7ef fef4 	bl	8000168 <__aeabi_dsub>
 8010380:	1cab      	adds	r3, r5, #2
 8010382:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010386:	2b02      	cmp	r3, #2
 8010388:	4682      	mov	sl, r0
 801038a:	468b      	mov	fp, r1
 801038c:	f04f 0200 	mov.w	r2, #0
 8010390:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 8010394:	dc53      	bgt.n	801043e <__ieee754_log+0x14e>
 8010396:	2300      	movs	r3, #0
 8010398:	f7f0 fb06 	bl	80009a8 <__aeabi_dcmpeq>
 801039c:	b1d0      	cbz	r0, 80103d4 <__ieee754_log+0xe4>
 801039e:	2c00      	cmp	r4, #0
 80103a0:	f000 8122 	beq.w	80105e8 <__ieee754_log+0x2f8>
 80103a4:	4620      	mov	r0, r4
 80103a6:	f7f0 f82d 	bl	8000404 <__aeabi_i2d>
 80103aa:	a391      	add	r3, pc, #580	; (adr r3, 80105f0 <__ieee754_log+0x300>)
 80103ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b0:	4606      	mov	r6, r0
 80103b2:	460f      	mov	r7, r1
 80103b4:	f7f0 f890 	bl	80004d8 <__aeabi_dmul>
 80103b8:	a38f      	add	r3, pc, #572	; (adr r3, 80105f8 <__ieee754_log+0x308>)
 80103ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103be:	4604      	mov	r4, r0
 80103c0:	460d      	mov	r5, r1
 80103c2:	4630      	mov	r0, r6
 80103c4:	4639      	mov	r1, r7
 80103c6:	f7f0 f887 	bl	80004d8 <__aeabi_dmul>
 80103ca:	4602      	mov	r2, r0
 80103cc:	460b      	mov	r3, r1
 80103ce:	4620      	mov	r0, r4
 80103d0:	4629      	mov	r1, r5
 80103d2:	e7b8      	b.n	8010346 <__ieee754_log+0x56>
 80103d4:	a38a      	add	r3, pc, #552	; (adr r3, 8010600 <__ieee754_log+0x310>)
 80103d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103da:	4650      	mov	r0, sl
 80103dc:	4659      	mov	r1, fp
 80103de:	f7f0 f87b 	bl	80004d8 <__aeabi_dmul>
 80103e2:	4602      	mov	r2, r0
 80103e4:	460b      	mov	r3, r1
 80103e6:	2000      	movs	r0, #0
 80103e8:	4999      	ldr	r1, [pc, #612]	; (8010650 <__ieee754_log+0x360>)
 80103ea:	f7ef febd 	bl	8000168 <__aeabi_dsub>
 80103ee:	4652      	mov	r2, sl
 80103f0:	4606      	mov	r6, r0
 80103f2:	460f      	mov	r7, r1
 80103f4:	465b      	mov	r3, fp
 80103f6:	4650      	mov	r0, sl
 80103f8:	4659      	mov	r1, fp
 80103fa:	f7f0 f86d 	bl	80004d8 <__aeabi_dmul>
 80103fe:	4602      	mov	r2, r0
 8010400:	460b      	mov	r3, r1
 8010402:	4630      	mov	r0, r6
 8010404:	4639      	mov	r1, r7
 8010406:	f7f0 f867 	bl	80004d8 <__aeabi_dmul>
 801040a:	4606      	mov	r6, r0
 801040c:	460f      	mov	r7, r1
 801040e:	b914      	cbnz	r4, 8010416 <__ieee754_log+0x126>
 8010410:	4632      	mov	r2, r6
 8010412:	463b      	mov	r3, r7
 8010414:	e0a2      	b.n	801055c <__ieee754_log+0x26c>
 8010416:	4620      	mov	r0, r4
 8010418:	f7ef fff4 	bl	8000404 <__aeabi_i2d>
 801041c:	a374      	add	r3, pc, #464	; (adr r3, 80105f0 <__ieee754_log+0x300>)
 801041e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010422:	4680      	mov	r8, r0
 8010424:	4689      	mov	r9, r1
 8010426:	f7f0 f857 	bl	80004d8 <__aeabi_dmul>
 801042a:	a373      	add	r3, pc, #460	; (adr r3, 80105f8 <__ieee754_log+0x308>)
 801042c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010430:	4604      	mov	r4, r0
 8010432:	460d      	mov	r5, r1
 8010434:	4640      	mov	r0, r8
 8010436:	4649      	mov	r1, r9
 8010438:	f7f0 f84e 	bl	80004d8 <__aeabi_dmul>
 801043c:	e0a7      	b.n	801058e <__ieee754_log+0x29e>
 801043e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010442:	f7ef fe93 	bl	800016c <__adddf3>
 8010446:	4602      	mov	r2, r0
 8010448:	460b      	mov	r3, r1
 801044a:	4650      	mov	r0, sl
 801044c:	4659      	mov	r1, fp
 801044e:	f7f0 f96d 	bl	800072c <__aeabi_ddiv>
 8010452:	e9cd 0100 	strd	r0, r1, [sp]
 8010456:	4620      	mov	r0, r4
 8010458:	f7ef ffd4 	bl	8000404 <__aeabi_i2d>
 801045c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010460:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010464:	4610      	mov	r0, r2
 8010466:	4619      	mov	r1, r3
 8010468:	f7f0 f836 	bl	80004d8 <__aeabi_dmul>
 801046c:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8010470:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8010474:	4602      	mov	r2, r0
 8010476:	9305      	str	r3, [sp, #20]
 8010478:	460b      	mov	r3, r1
 801047a:	4606      	mov	r6, r0
 801047c:	460f      	mov	r7, r1
 801047e:	f7f0 f82b 	bl	80004d8 <__aeabi_dmul>
 8010482:	a361      	add	r3, pc, #388	; (adr r3, 8010608 <__ieee754_log+0x318>)
 8010484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010488:	4680      	mov	r8, r0
 801048a:	4689      	mov	r9, r1
 801048c:	f7f0 f824 	bl	80004d8 <__aeabi_dmul>
 8010490:	a35f      	add	r3, pc, #380	; (adr r3, 8010610 <__ieee754_log+0x320>)
 8010492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010496:	f7ef fe69 	bl	800016c <__adddf3>
 801049a:	4642      	mov	r2, r8
 801049c:	464b      	mov	r3, r9
 801049e:	f7f0 f81b 	bl	80004d8 <__aeabi_dmul>
 80104a2:	a35d      	add	r3, pc, #372	; (adr r3, 8010618 <__ieee754_log+0x328>)
 80104a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a8:	f7ef fe60 	bl	800016c <__adddf3>
 80104ac:	4642      	mov	r2, r8
 80104ae:	464b      	mov	r3, r9
 80104b0:	f7f0 f812 	bl	80004d8 <__aeabi_dmul>
 80104b4:	a35a      	add	r3, pc, #360	; (adr r3, 8010620 <__ieee754_log+0x330>)
 80104b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ba:	f7ef fe57 	bl	800016c <__adddf3>
 80104be:	4632      	mov	r2, r6
 80104c0:	463b      	mov	r3, r7
 80104c2:	f7f0 f809 	bl	80004d8 <__aeabi_dmul>
 80104c6:	a358      	add	r3, pc, #352	; (adr r3, 8010628 <__ieee754_log+0x338>)
 80104c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104cc:	4606      	mov	r6, r0
 80104ce:	460f      	mov	r7, r1
 80104d0:	4640      	mov	r0, r8
 80104d2:	4649      	mov	r1, r9
 80104d4:	f7f0 f800 	bl	80004d8 <__aeabi_dmul>
 80104d8:	a355      	add	r3, pc, #340	; (adr r3, 8010630 <__ieee754_log+0x340>)
 80104da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104de:	f7ef fe45 	bl	800016c <__adddf3>
 80104e2:	4642      	mov	r2, r8
 80104e4:	464b      	mov	r3, r9
 80104e6:	f7ef fff7 	bl	80004d8 <__aeabi_dmul>
 80104ea:	a353      	add	r3, pc, #332	; (adr r3, 8010638 <__ieee754_log+0x348>)
 80104ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f0:	f7ef fe3c 	bl	800016c <__adddf3>
 80104f4:	4642      	mov	r2, r8
 80104f6:	464b      	mov	r3, r9
 80104f8:	f7ef ffee 	bl	80004d8 <__aeabi_dmul>
 80104fc:	460b      	mov	r3, r1
 80104fe:	4602      	mov	r2, r0
 8010500:	4639      	mov	r1, r7
 8010502:	4630      	mov	r0, r6
 8010504:	f7ef fe32 	bl	800016c <__adddf3>
 8010508:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801050c:	9b05      	ldr	r3, [sp, #20]
 801050e:	3551      	adds	r5, #81	; 0x51
 8010510:	431d      	orrs	r5, r3
 8010512:	2d00      	cmp	r5, #0
 8010514:	4680      	mov	r8, r0
 8010516:	4689      	mov	r9, r1
 8010518:	dd48      	ble.n	80105ac <__ieee754_log+0x2bc>
 801051a:	2200      	movs	r2, #0
 801051c:	4b4c      	ldr	r3, [pc, #304]	; (8010650 <__ieee754_log+0x360>)
 801051e:	4650      	mov	r0, sl
 8010520:	4659      	mov	r1, fp
 8010522:	f7ef ffd9 	bl	80004d8 <__aeabi_dmul>
 8010526:	4652      	mov	r2, sl
 8010528:	465b      	mov	r3, fp
 801052a:	f7ef ffd5 	bl	80004d8 <__aeabi_dmul>
 801052e:	4602      	mov	r2, r0
 8010530:	460b      	mov	r3, r1
 8010532:	4606      	mov	r6, r0
 8010534:	460f      	mov	r7, r1
 8010536:	4640      	mov	r0, r8
 8010538:	4649      	mov	r1, r9
 801053a:	f7ef fe17 	bl	800016c <__adddf3>
 801053e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010542:	f7ef ffc9 	bl	80004d8 <__aeabi_dmul>
 8010546:	4680      	mov	r8, r0
 8010548:	4689      	mov	r9, r1
 801054a:	b964      	cbnz	r4, 8010566 <__ieee754_log+0x276>
 801054c:	4602      	mov	r2, r0
 801054e:	460b      	mov	r3, r1
 8010550:	4630      	mov	r0, r6
 8010552:	4639      	mov	r1, r7
 8010554:	f7ef fe08 	bl	8000168 <__aeabi_dsub>
 8010558:	4602      	mov	r2, r0
 801055a:	460b      	mov	r3, r1
 801055c:	4650      	mov	r0, sl
 801055e:	4659      	mov	r1, fp
 8010560:	f7ef fe02 	bl	8000168 <__aeabi_dsub>
 8010564:	e6d7      	b.n	8010316 <__ieee754_log+0x26>
 8010566:	a322      	add	r3, pc, #136	; (adr r3, 80105f0 <__ieee754_log+0x300>)
 8010568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801056c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010570:	f7ef ffb2 	bl	80004d8 <__aeabi_dmul>
 8010574:	a320      	add	r3, pc, #128	; (adr r3, 80105f8 <__ieee754_log+0x308>)
 8010576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801057a:	4604      	mov	r4, r0
 801057c:	460d      	mov	r5, r1
 801057e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010582:	f7ef ffa9 	bl	80004d8 <__aeabi_dmul>
 8010586:	4642      	mov	r2, r8
 8010588:	464b      	mov	r3, r9
 801058a:	f7ef fdef 	bl	800016c <__adddf3>
 801058e:	4602      	mov	r2, r0
 8010590:	460b      	mov	r3, r1
 8010592:	4630      	mov	r0, r6
 8010594:	4639      	mov	r1, r7
 8010596:	f7ef fde7 	bl	8000168 <__aeabi_dsub>
 801059a:	4652      	mov	r2, sl
 801059c:	465b      	mov	r3, fp
 801059e:	f7ef fde3 	bl	8000168 <__aeabi_dsub>
 80105a2:	4602      	mov	r2, r0
 80105a4:	460b      	mov	r3, r1
 80105a6:	4620      	mov	r0, r4
 80105a8:	4629      	mov	r1, r5
 80105aa:	e7d9      	b.n	8010560 <__ieee754_log+0x270>
 80105ac:	4602      	mov	r2, r0
 80105ae:	460b      	mov	r3, r1
 80105b0:	4650      	mov	r0, sl
 80105b2:	4659      	mov	r1, fp
 80105b4:	f7ef fdd8 	bl	8000168 <__aeabi_dsub>
 80105b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105bc:	f7ef ff8c 	bl	80004d8 <__aeabi_dmul>
 80105c0:	4606      	mov	r6, r0
 80105c2:	460f      	mov	r7, r1
 80105c4:	2c00      	cmp	r4, #0
 80105c6:	f43f af23 	beq.w	8010410 <__ieee754_log+0x120>
 80105ca:	a309      	add	r3, pc, #36	; (adr r3, 80105f0 <__ieee754_log+0x300>)
 80105cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105d4:	f7ef ff80 	bl	80004d8 <__aeabi_dmul>
 80105d8:	a307      	add	r3, pc, #28	; (adr r3, 80105f8 <__ieee754_log+0x308>)
 80105da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105de:	4604      	mov	r4, r0
 80105e0:	460d      	mov	r5, r1
 80105e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105e6:	e727      	b.n	8010438 <__ieee754_log+0x148>
 80105e8:	2000      	movs	r0, #0
 80105ea:	2100      	movs	r1, #0
 80105ec:	e693      	b.n	8010316 <__ieee754_log+0x26>
 80105ee:	bf00      	nop
 80105f0:	fee00000 	.word	0xfee00000
 80105f4:	3fe62e42 	.word	0x3fe62e42
 80105f8:	35793c76 	.word	0x35793c76
 80105fc:	3dea39ef 	.word	0x3dea39ef
 8010600:	55555555 	.word	0x55555555
 8010604:	3fd55555 	.word	0x3fd55555
 8010608:	df3e5244 	.word	0xdf3e5244
 801060c:	3fc2f112 	.word	0x3fc2f112
 8010610:	96cb03de 	.word	0x96cb03de
 8010614:	3fc74664 	.word	0x3fc74664
 8010618:	94229359 	.word	0x94229359
 801061c:	3fd24924 	.word	0x3fd24924
 8010620:	55555593 	.word	0x55555593
 8010624:	3fe55555 	.word	0x3fe55555
 8010628:	d078c69f 	.word	0xd078c69f
 801062c:	3fc39a09 	.word	0x3fc39a09
 8010630:	1d8e78af 	.word	0x1d8e78af
 8010634:	3fcc71c5 	.word	0x3fcc71c5
 8010638:	9997fa04 	.word	0x9997fa04
 801063c:	3fd99999 	.word	0x3fd99999
 8010640:	c3500000 	.word	0xc3500000
 8010644:	43500000 	.word	0x43500000
 8010648:	7fefffff 	.word	0x7fefffff
 801064c:	3ff00000 	.word	0x3ff00000
 8010650:	3fe00000 	.word	0x3fe00000

08010654 <__ieee754_sqrt>:
 8010654:	f8df c158 	ldr.w	ip, [pc, #344]	; 80107b0 <__ieee754_sqrt+0x15c>
 8010658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801065c:	ea3c 0c01 	bics.w	ip, ip, r1
 8010660:	4606      	mov	r6, r0
 8010662:	460d      	mov	r5, r1
 8010664:	460c      	mov	r4, r1
 8010666:	460a      	mov	r2, r1
 8010668:	4607      	mov	r7, r0
 801066a:	4603      	mov	r3, r0
 801066c:	d10f      	bne.n	801068e <__ieee754_sqrt+0x3a>
 801066e:	4602      	mov	r2, r0
 8010670:	460b      	mov	r3, r1
 8010672:	f7ef ff31 	bl	80004d8 <__aeabi_dmul>
 8010676:	4602      	mov	r2, r0
 8010678:	460b      	mov	r3, r1
 801067a:	4630      	mov	r0, r6
 801067c:	4629      	mov	r1, r5
 801067e:	f7ef fd75 	bl	800016c <__adddf3>
 8010682:	4606      	mov	r6, r0
 8010684:	460d      	mov	r5, r1
 8010686:	4630      	mov	r0, r6
 8010688:	4629      	mov	r1, r5
 801068a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801068e:	2900      	cmp	r1, #0
 8010690:	dc0e      	bgt.n	80106b0 <__ieee754_sqrt+0x5c>
 8010692:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8010696:	ea5c 0707 	orrs.w	r7, ip, r7
 801069a:	d0f4      	beq.n	8010686 <__ieee754_sqrt+0x32>
 801069c:	b141      	cbz	r1, 80106b0 <__ieee754_sqrt+0x5c>
 801069e:	4602      	mov	r2, r0
 80106a0:	460b      	mov	r3, r1
 80106a2:	f7ef fd61 	bl	8000168 <__aeabi_dsub>
 80106a6:	4602      	mov	r2, r0
 80106a8:	460b      	mov	r3, r1
 80106aa:	f7f0 f83f 	bl	800072c <__aeabi_ddiv>
 80106ae:	e7e8      	b.n	8010682 <__ieee754_sqrt+0x2e>
 80106b0:	1521      	asrs	r1, r4, #20
 80106b2:	d075      	beq.n	80107a0 <__ieee754_sqrt+0x14c>
 80106b4:	07cc      	lsls	r4, r1, #31
 80106b6:	f04f 0400 	mov.w	r4, #0
 80106ba:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80106be:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80106c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80106c6:	bf5e      	ittt	pl
 80106c8:	0fd9      	lsrpl	r1, r3, #31
 80106ca:	005b      	lslpl	r3, r3, #1
 80106cc:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80106d0:	0fd9      	lsrs	r1, r3, #31
 80106d2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80106d6:	2516      	movs	r5, #22
 80106d8:	4620      	mov	r0, r4
 80106da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80106de:	107f      	asrs	r7, r7, #1
 80106e0:	005b      	lsls	r3, r3, #1
 80106e2:	1846      	adds	r6, r0, r1
 80106e4:	4296      	cmp	r6, r2
 80106e6:	bfde      	ittt	le
 80106e8:	1b92      	suble	r2, r2, r6
 80106ea:	1870      	addle	r0, r6, r1
 80106ec:	1864      	addle	r4, r4, r1
 80106ee:	0052      	lsls	r2, r2, #1
 80106f0:	3d01      	subs	r5, #1
 80106f2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80106f6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80106fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80106fe:	d1f0      	bne.n	80106e2 <__ieee754_sqrt+0x8e>
 8010700:	4629      	mov	r1, r5
 8010702:	f04f 0e20 	mov.w	lr, #32
 8010706:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801070a:	4282      	cmp	r2, r0
 801070c:	eb06 0c05 	add.w	ip, r6, r5
 8010710:	dc02      	bgt.n	8010718 <__ieee754_sqrt+0xc4>
 8010712:	d113      	bne.n	801073c <__ieee754_sqrt+0xe8>
 8010714:	459c      	cmp	ip, r3
 8010716:	d811      	bhi.n	801073c <__ieee754_sqrt+0xe8>
 8010718:	f1bc 0f00 	cmp.w	ip, #0
 801071c:	eb0c 0506 	add.w	r5, ip, r6
 8010720:	da43      	bge.n	80107aa <__ieee754_sqrt+0x156>
 8010722:	2d00      	cmp	r5, #0
 8010724:	db41      	blt.n	80107aa <__ieee754_sqrt+0x156>
 8010726:	f100 0801 	add.w	r8, r0, #1
 801072a:	1a12      	subs	r2, r2, r0
 801072c:	4640      	mov	r0, r8
 801072e:	459c      	cmp	ip, r3
 8010730:	bf88      	it	hi
 8010732:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8010736:	eba3 030c 	sub.w	r3, r3, ip
 801073a:	4431      	add	r1, r6
 801073c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8010740:	f1be 0e01 	subs.w	lr, lr, #1
 8010744:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8010748:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801074c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010750:	d1db      	bne.n	801070a <__ieee754_sqrt+0xb6>
 8010752:	4313      	orrs	r3, r2
 8010754:	d006      	beq.n	8010764 <__ieee754_sqrt+0x110>
 8010756:	1c48      	adds	r0, r1, #1
 8010758:	bf0b      	itete	eq
 801075a:	4671      	moveq	r1, lr
 801075c:	3101      	addne	r1, #1
 801075e:	3401      	addeq	r4, #1
 8010760:	f021 0101 	bicne.w	r1, r1, #1
 8010764:	1063      	asrs	r3, r4, #1
 8010766:	0849      	lsrs	r1, r1, #1
 8010768:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801076c:	07e2      	lsls	r2, r4, #31
 801076e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010772:	bf48      	it	mi
 8010774:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8010778:	460e      	mov	r6, r1
 801077a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801077e:	e782      	b.n	8010686 <__ieee754_sqrt+0x32>
 8010780:	0ada      	lsrs	r2, r3, #11
 8010782:	3815      	subs	r0, #21
 8010784:	055b      	lsls	r3, r3, #21
 8010786:	2a00      	cmp	r2, #0
 8010788:	d0fa      	beq.n	8010780 <__ieee754_sqrt+0x12c>
 801078a:	02d5      	lsls	r5, r2, #11
 801078c:	d50a      	bpl.n	80107a4 <__ieee754_sqrt+0x150>
 801078e:	f1c1 0420 	rsb	r4, r1, #32
 8010792:	fa23 f404 	lsr.w	r4, r3, r4
 8010796:	1e4d      	subs	r5, r1, #1
 8010798:	408b      	lsls	r3, r1
 801079a:	4322      	orrs	r2, r4
 801079c:	1b41      	subs	r1, r0, r5
 801079e:	e789      	b.n	80106b4 <__ieee754_sqrt+0x60>
 80107a0:	4608      	mov	r0, r1
 80107a2:	e7f0      	b.n	8010786 <__ieee754_sqrt+0x132>
 80107a4:	0052      	lsls	r2, r2, #1
 80107a6:	3101      	adds	r1, #1
 80107a8:	e7ef      	b.n	801078a <__ieee754_sqrt+0x136>
 80107aa:	4680      	mov	r8, r0
 80107ac:	e7bd      	b.n	801072a <__ieee754_sqrt+0xd6>
 80107ae:	bf00      	nop
 80107b0:	7ff00000 	.word	0x7ff00000

080107b4 <nan>:
 80107b4:	2000      	movs	r0, #0
 80107b6:	4901      	ldr	r1, [pc, #4]	; (80107bc <nan+0x8>)
 80107b8:	4770      	bx	lr
 80107ba:	bf00      	nop
 80107bc:	7ff80000 	.word	0x7ff80000

080107c0 <_init>:
 80107c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107c2:	bf00      	nop
 80107c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107c6:	bc08      	pop	{r3}
 80107c8:	469e      	mov	lr, r3
 80107ca:	4770      	bx	lr

080107cc <_fini>:
 80107cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ce:	bf00      	nop
 80107d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107d2:	bc08      	pop	{r3}
 80107d4:	469e      	mov	lr, r3
 80107d6:	4770      	bx	lr
